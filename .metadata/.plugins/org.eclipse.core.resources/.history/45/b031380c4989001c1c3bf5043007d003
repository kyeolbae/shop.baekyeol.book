<!-- 
	-- 프로그램명 : 영수증
	-- 날짜 : 
	-- 수정 : 2021.07.23 hshwang (결재선 변경 - changeapprovemp 주석 처리된 곳 추가함)
	-- 수정 : 2021.08.23 hshwang (결재화면 - 다중 유형 리포트 가능하게)
	-- 수정 : 2021.09.29 by hshwang (getTmapApiUrls 추가)
-->
<!DOCTYPE html>
 
<html xmlns:th="http://www.thymeleaf.org" lang="ko">
<head>
    <meta charset="utf-8" />
</head>
  <body>
   
   <div th:fragment="js">
   
    <script type="text/javascript" >

      var [[${param.pgm_id}]] = new Vue({
          el:  '#[[${param.pgm_id}]]',
//********************************************************************************************        
          
          data: {  pgmid : "[[${param.pgm_id}]]",
        	       authparam : "[[${param.authParam}]]",
        	       user_id : '', //
        	       columnlayout : [],
                   columnlayouttoll : [],
                   
                   columnlayoutTravel : [],
                   gridView : "",
                   tollOcrList : [],
                   receiptList : [],
                   selectedReceiptList : [],
                   
                   reportList : [],
                   curItem : {}, // 모달에서 보이는 item
                   tempCurItem : {},
                   viewType : "box", // box, list, grid
                   isBox : true,
                   isList : false,
                   isGrid : false,
                   isCardEvidShow : false,
                   tempReport : {},
                   selectReportType : "",  //"ONE" , "MULTI" 
                   girdProps : {},
                       
                   timerId : 0, //master-detail구조에서만 사용, 민감도
			       masterBeforeRowIndex : 0, //master-detail구조에서만 사용
			       masterBeforeColIndex : 0, //master-detail구조에서만 사용
			       approvemp_checkall : false,
			       processApprvGrp : "",
			    // changeapprovemp end
			       
			       curItem_pass : [],
                   mapOil : {},
                   mapTravel : {},
                   marker_start : {},
                   marker_pass : [],
                   curPassIndex : null,
                   marker_end : {},
                   tmapApiUrls : {},
//                    dropzoneReceiptId : objId(),
                   dropzonePrepayId : objId(),
//                    dropzoneCardId : objId(),
                   dropzoneFromNum : objId(),
                   dropzoneToNum : objId(),
                   dropzoneToll : objId(),
                   
                   receiptimg : objId(),
                   
                   tollCanvasId : objId(),
//                    tollCanvasId1 : objId(),
                   distanceCalcType : "", // 1,2,3,4
                   approveLine : [], // 결재선 전체 모음
                   approveLines : [], // 1~3차수로 분류된 결재선
                   copy_approveLines : [], // 1~3차수로 분류된 결재선 (결재선 변경에 필요)
                   
                   
                   approveLineTp : '', // LINE10 , LINE20.... 
                   approveStatus : [],
                   reportFiles : [],
                   orderby : "",
                   odometerStartFile : "",
                   odometerEndFile : "",
                   imgModalUrl : "",
                   startAddr : "",
                   passAddr : [],
                   endAddr : "",
                   tpinst : "",
                   
                   currencyCd : '[[${session.g_baseCurrencyCd}]]',
                   currencyDt : "",
                   currencyRate : 1,  // 초기값 1
                   expenseAmt : "",
                   
                   //코스트센터 / 프로젝트 여부
                   receiptcosttype : "", // 1 : costcenter, 2: project
                   receiptbelongtype : "",
                   receiptMngList : [], // 영수증 관리항목
                   
                   approvetpList : [],
                   firstSelectedItem : {},
                   modalId : objId(),
                   
                   reportMngList: [],
                   
                   selectedReportTypes : [],
                   
                   modalVisible : false,
                   
   	       		   isApproveTypeCheckbox: '',
   	       	       isSrcTypeCheckbox: '',
   	       	       
   	       	       
   	       	       apprvline : { APPROVE_LINE_TP : "LINE10" }, // 임시 (결재라인)
   	       	       
   	       	 	   biztripCalTypeName : objId(), 	// 출장비 - 금액계산방법
   	       		   columnlayoutBizTripCal : [],		// 출장비 - 금액계산방법_일자별*일당유형 합계 팝업 그리드
//    	       			footerLayout : [],
   	       		   bizTripCalGridView : "",
   	       		   biztripnewItem : {},
//    	       		   bizTripCalGridItem : false,
   	       		   bizTripCalSum : 0,
   	       		   gridProps : {showStateColumn:false},
   	       		   BIZTRIP_RATES : [],
   	       		   
   	       		   
   	       		addedreportType : [{ CODE : '미등록' , NAME : '미등록', INDEX : 0}]
                   
          },//data    
          created () { //초기화================================================================
        	    // sortableByFormatValue=true  데이터를 포맷등으로 변형 시키고, 그 컬럼을 정렬하고자 할 때
        	  
                initGridDropDownBox("SOURCE_TP","/common/syscommon/selectSystemCommonCode", auiDropDownCallBack,{ COMM_CL_CD:"EX_SOURCE_TP" }); // 시스템 공통코드
                initGridDropDownBox("EX_APPROVE_TP","/common/syscommon/selectSystemCommonCode", auiDropDownCallBack,{ COMM_CL_CD:"EX_APPROVE_TP" }); // 시스템 공통코드

                //그리드 초기화
                this.girdProps = { wordWrap : true, showTooltip : true};
                
                
                //카드// source_type == '1'
                //선택	입력	삭제	첨부 유형 	 증빙일	시간	가맹점명	업종	사용금액	구분	카드번호	승인번호	청구금액	계정-항목	코스트센터	프로젝트	결재진행상태	결재제목	전표번호
                 this.columnlayoutCard = 
                     [   
                         {dataField : "CHECKED",   headerText : "",  width: 50, editable : true, renderer : this.expCheckboxRenderer(), headerRenderer : { type : "CheckBoxHeaderRenderer", position : "top", text : "선택",  onClick : this.headerCheckClick }}, // 기본값 "bottom"
                         {dataField : "undefined",headerText : "입력",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiOpenDetail, },
                         {dataField : "undefined",headerText : "삭제",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiDeleteItem, },
                         {dataField : "undefined",   headerText : "첨부",  width: 50, style : "aui_col_center", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDetail,  tooltip : {  tooltipFunction :  this.detailTootip } },
						 {dataField : "SOURCE_TP",     headerText : "유형",   width: 70 , editRenderer : gridDropdownRenderer['EX_SOURCE_TP'], labelFunction : auiDrodownLabelFunction }, 
                         {dataField : "undefined",   headerText : "증빙일",  width: 120, style : "aui_col_center", renderer : {type : "TemplateRenderer"},  labelFunction : this.setAuiDate,   },
                         {dataField : "undefined",   headerText : "시간",  width: 90, style : "aui_col_center",  renderer : {type : "TemplateRenderer"},  labelFunction : this.setAuiTime,   },

                         {dataField : "BIZ_NM",   headerText : "가맹점명",  width: 240, style : "aui_col_left",},
                         {dataField : "BIZ_CATEGORY",   headerText : "업종",  width: 120, style : "aui_col_left",},
                         {dataField : "TOT_AMT",   headerText : "사용금액",formatString : "#,###", dataType : "numeric" , width: 100, style : "aui_col_right", },
                //     --    {dataField : "CANCEL_YN",   headerText : "구분",  width: 120, style : "aui_col_center",}, // 승인/취소
                         {dataField : "CARD_NO",   headerText : "카드번호",  width: 120, style : "aui_col_center",labelFunction : function( rowIndex, columnIndex, value, headerText, item ) { return cardformat(nvl(value,''));}}, // 승인/취소
                         {dataField : "CARD_BILL_NO",   headerText : "승인번호",  width: 120, style : "aui_col_center",}, // 승인/취소
                         {dataField : "PAY_AMT",   headerText : "청구금액",formatString : "#,###", dataType : "numeric" , width: 100, style : "aui_col_right", },
                         {dataField : "EXPENSE_NM",   headerText : "계정-항목",  width: 120, style : "aui_col_center",},
                         
                         {dataField : "CCTR_NM",   headerText : "코스트센터",  width: 120, style : "aui_col_center",},
                         {dataField : "PS_NM",   headerText : "프로젝트",  width: 120, style : "aui_col_center",},
                         {dataField : "APPROVE_STATUS_NM",   headerText : "결재진행상태",  width: 120, style : "aui_col_center",},                      
                         {dataField : "REPORT_TITLE",   headerText : "결재제목",  width: 120, style : "aui_col_center",},                    
                         {dataField : "SLIP_KEY",   headerText : "SAP전표",  width: 120, style : "aui_col_center",},
                         
                                                 
                   ] ;//columnlayout 
                   //선택	유형	입력	삭제	첨부파일	증빙일	청구금액	계정-항목	코스트센터	프로젝트	결재진행상태	결재제목	전표번호
                   this.columnlayoutReceipt =   
                       [   
                           {dataField : "CHECKED",   headerText : "",  width: 50, editable : true, renderer : this.expCheckboxRenderer(), headerRenderer : { type : "CheckBoxHeaderRenderer", position : "top", text : "선택",  onClick : this.headerCheckClick }}, // 기본값 "bottom"
                           {dataField : "undefined",headerText : "입력",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiOpenDetail, },
                           {dataField : "undefined",headerText : "삭제",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiDeleteItem, },
                           {dataField : "undefined",   headerText : "첨부",  width: 50, style : "aui_col_center", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDetail,  tooltip : {  tooltipFunction :  this.detailTootip } },
                           {dataField : "SOURCE_TP",     headerText : "유형",   width: 70 , editRenderer : gridDropdownRenderer['EX_SOURCE_TP'], labelFunction : auiDrodownLabelFunction }, 
                           {dataField : "undefined",   headerText : "증빙일",  width: 120, style : "aui_col_center", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDate,   },
                           {dataField : "PAY_AMT",   headerText : "청구금액",formatString : "#,###", dataType : "numeric" , width: 100, style : "aui_col_right", },
                           {dataField : "EXPENSE_NM",   headerText : "계정-항목",  width: 120, style : "aui_col_center",},
                           {dataField : "CCTR_NM",   headerText : "코스트센터",  width: 120, style : "aui_col_center",},
                           {dataField : "PS_NM",   headerText : "프로젝트",  width: 120, style : "aui_col_center",},                          
                           {dataField : "APPROVE_STATUS_NM",   headerText : "결재진행상태",  width: 120, style : "aui_col_center",},                      
                           {dataField : "REPORT_TITLE",   headerText : "결재제목",  width: 120, style : "aui_col_center",},                    
                           {dataField : "SLIP_KEY",   headerText : "SAP전표",  width: 120, style : "aui_col_center",},              
                           
                     ] ;//columnlayout
                   
                     
                     
//                      this.columnlayout =   
//                          [   
//                              {dataField : "CHECKED",   headerText : "선택",  width: 70, editable : true, renderer : this.expCheckboxRenderer()},
//                              {dataField : "SLIP_KEY",   headerText : "SAP전표",  width: 120, style : "aui_col_center",},
//                              {dataField : "SOURCE_TP",     headerText : "유형",   width: 90 , editRenderer : gridDropdownRenderer['EX_SOURCE_TP'], labelFunction : auiDrodownLabelFunction }, 
//                              {dataField : "undefined",   headerText : "증빙일",  width: 120, style : "aui_col_center", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDate,   },
//                              {dataField : "undefined",   headerText : "시간",  width: 90, style : "aui_col_center",  renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiTime,   },
//                              {dataField : "undefined",   headerText : "내역",  width: 300, style : "aui_col_left", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDetail,  tooltip : {  tooltipFunction :  this.detailTootip } },
//                              {dataField : "undefined",headerText : "입력",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiOpenDetail, },
//                              {dataField : "undefined",headerText : "삭제",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiDeleteItem, },
//                              {dataField : "EXPENSE_AMT",   headerText : "지급액",formatString : "#,###", dataType : "numeric" , width: 100, style : "aui_col_right", },
//                              {dataField : "EXPENSE_NM",   headerText : "비용항목",  width: 120, style : "aui_col_center",},
//                              {dataField : "CCTR_NM",   headerText : "코스트센터",  width: 120, style : "aui_col_center",},
//                              {dataField : "PS_NM",   headerText : "프로젝트",  width: 120, style : "aui_col_center",},
//                              {dataField : "REPORT_TITLE",   headerText : "결재제목",  width: 120, style : "aui_col_center",},
//                              {dataField : "APPROVE_STATUS_NM",   headerText : "진행상태",  width: 120, style : "aui_col_center",},
                             
//                        ] ;//columnlayout     
                       
                // 유류비 4      
                //선택	유형	입력	삭제	증빙일	거리계산방식	출발지	도착지	거리(Km)	유종	청구금액	계정-항목	코스트센터	프로젝트	결재진행상태	결재제목	전표번호
 
                this.columnlayoutGas =   
                   [   
                	   
                       {dataField : "CHECKED",   headerText : "",  width: 50, editable : true, renderer : this.expCheckboxRenderer(), headerRenderer : { type : "CheckBoxHeaderRenderer", position : "top", text : "선택",  onClick : this.headerCheckClick }}, // 기본값 "bottom"
                       {dataField : "undefined",headerText : "입력",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiOpenDetail, },
                       {dataField : "undefined",headerText : "삭제",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiDeleteItem, },
//                        {dataField : "undefined",   headerText : "첨부",  width: 180, style : "aui_col_left", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDetail,  tooltip : {  tooltipFunction :  this.detailTootip } },
                       {dataField : "SOURCE_TP",     headerText : "유형",   width: 70 , editRenderer : gridDropdownRenderer['EX_SOURCE_TP'], labelFunction : auiDrodownLabelFunction }, 
                       {dataField : "undefined",   headerText : "증빙일",  width: 120, style : "aui_col_center", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDate,   },
                       
//                        {dataField : "DISTANCE_TP",     headerText : "거리계산방식",   width: 90 , editRenderer : gridDropdownRenderer['EX_DISTANCE_CALC_TP'], labelFunction : auiDrodownLabelFunction }, 
                       {dataField : "DISTANCE_TP_NM",   headerText : "거리계산방식",  width: 120, style : "aui_col_center",},
                       {dataField : "START_ADDR",   headerText : "출발지",  width: 240, style : "aui_col_left",},
                       {dataField : "END_ADDR",   headerText : "도착지",  width: 240, style : "aui_col_left",},
                       {dataField : "DISTANCE",   headerText : "거리(Km)",  width: 120, style : "aui_col_right",},
                       {dataField : "MILEAGE_RATE_NM",   headerText : "유종",  width: 120, style : "aui_col_center",},
                       {dataField : "PAY_AMT",   headerText : "청구금액",formatString : "#,###", dataType : "numeric" , width: 100, style : "aui_col_right", },
                       {dataField : "EXPENSE_NM",   headerText : "계정-항목",  width: 120, style : "aui_col_center",},
                       {dataField : "CCTR_NM",   headerText : "코스트센터",  width: 120, style : "aui_col_center",},
                       {dataField : "PS_NM",   headerText : "프로젝트",  width: 120, style : "aui_col_center",},                          
                       {dataField : "APPROVE_STATUS_NM",   headerText : "결재진행상태",  width: 120, style : "aui_col_center",},                      
                       {dataField : "REPORT_TITLE",   headerText : "결재제목",  width: 120, style : "aui_col_center",},                    
                       {dataField : "SLIP_KEY",   headerText : "SAP전표",  width: 120, style : "aui_col_center",},              
                       
             	   
                       
                 ] ;//columnlayout
                 // 선택 , 
                 
                // 선택	유형	입력	삭제	첨부파일	증빙일	청구금액	계정-항목	코스트센터	프로젝트	결재진행상태	결재제목	전표번호

                     this.columnlayoutToll =   
                         [   
                             {dataField : "CHECKED",   headerText : "",  width: 50, editable : true, renderer : this.expCheckboxRenderer(), headerRenderer : { type : "CheckBoxHeaderRenderer", position : "top", text : "선택",  onClick : this.headerCheckClick }}, // 기본값 "bottom"
                             {dataField : "undefined",headerText : "입력",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiOpenDetail, },
                             {dataField : "undefined",headerText : "삭제",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiDeleteItem, },
                             {dataField : "undefined",   headerText : "첨부",  width: 50, style : "aui_col_left", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDetail,  tooltip : {  tooltipFunction :  this.detailTootip } },
                             {dataField : "SOURCE_TP",     headerText : "유형",   width: 70 , editRenderer : gridDropdownRenderer['EX_SOURCE_TP'], labelFunction : auiDrodownLabelFunction }, 
                             {dataField : "undefined",   headerText : "증빙일",  width: 120, style : "aui_col_center", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDate,   },
                             {dataField : "PAY_AMT",   headerText : "청구금액",formatString : "#,###", dataType : "numeric" , width: 100, style : "aui_col_right", },
                             {dataField : "EXPENSE_NM",   headerText : "계정-항목",  width: 120, style : "aui_col_center",},
                             {dataField : "CCTR_NM",   headerText : "코스트센터",  width: 120, style : "aui_col_center",},
                             {dataField : "PS_NM",   headerText : "프로젝트",  width: 120, style : "aui_col_center",},                          
                             {dataField : "APPROVE_STATUS_NM",   headerText : "결재진행상태",  width: 120, style : "aui_col_center",},                      
                             {dataField : "REPORT_TITLE",   headerText : "결재제목",  width: 120, style : "aui_col_center",},                    
                             {dataField : "SLIP_KEY",   headerText : "SAP전표",  width: 120, style : "aui_col_center",},     
                             
                       ] ;//columnlayout     
                 
                 // source_type == '3'
                 // 선택	유형	입력	삭제	출장시작일	출장종료일	일수	일당유형	청구금액	계정-항목	코스트센터	프로젝트	결재진행상태	결재제목	전표번호
//                 initGridDropDownBox("getBizTripType","/common/syscommon/selectSystemCommonCode", auiDropDownCallBack,{ COMM_CL_CD:"EX_DISTANCE_CALC_TP" }); // 거리계산방식
                initGridDropDownBox("BIZTRIP_TP","/common/syscommon/commonSelect/search", auiDropDownCallBack,{SELECT_ID :'getBizTripType' });
 
                 this.columnlayoutTravel =   
                     [   
                         {dataField : "CHECKED",   headerText : "",  width: 50, editable : true, renderer : this.expCheckboxRenderer(), headerRenderer : { type : "CheckBoxHeaderRenderer", position : "top", text : "선택",  onClick : this.headerCheckClick }}, // 기본값 "bottom"
                         {dataField : "undefined",headerText : "입력",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiOpenDetail, },
                         {dataField : "undefined",headerText : "삭제",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiDeleteItem, },
//                          {dataField : "undefined",   headerText : "첨부",  width: 180, style : "aui_col_left", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDetail,  tooltip : {  tooltipFunction :  this.detailTootip } },
                         {dataField : "SOURCE_TP",     headerText : "유형",   width: 70 , editRenderer : gridDropdownRenderer['EX_SOURCE_TP'], labelFunction : auiDrodownLabelFunction }, 

                         {dataField : "BIZTRIP_START",   headerText : "출장시작일",  width: 120, style : "aui_col_center",},
                         {dataField : "BIZTRIP_END",   headerText : "출장종료일",  width: 120, style : "aui_col_center",},                         
                         {dataField : "BIZTRIP_DAYS",   headerText : "일수",  width: 120, style : "aui_col_center",},      
                         {dataField : "BIZTRIP_TP",     headerText : "유형",   width: 90 , editRenderer : gridDropdownRenderer['BIZTRIP_TP'], labelFunction : auiDrodownLabelFunction },  
                         
                         {dataField : "PAY_AMT",   headerText : "청구금액",formatString : "#,###", dataType : "numeric" , width: 100, style : "aui_col_right", },
                         {dataField : "EXPENSE_NM",   headerText : "계정-항목",  width: 120, style : "aui_col_center",},

                         
                         {dataField : "CCTR_NM",   headerText : "코스트센터",  width: 120, style : "aui_col_center",},
                         {dataField : "PS_NM",   headerText : "프로젝트",  width: 120, style : "aui_col_center",},                          
                         {dataField : "APPROVE_STATUS_NM",   headerText : "결재진행상태",  width: 120, style : "aui_col_center",},                      
                         {dataField : "REPORT_TITLE",   headerText : "결재제목",  width: 120, style : "aui_col_center",},                    
                         {dataField : "SLIP_KEY",   headerText : "SAP전표",  width: 120, style : "aui_col_center",},                            
                     ] ;//columnlayout      
                     
                     
                     //선택	유형	입력	삭제	첨부파일	증빙일	청구금액	계정-항목	코스트센터	프로젝트	결재진행상태	결재제목	전표번호

                     this.columnlayoutPrepay =   
                         [   
                             {dataField : "CHECKED",   headerText : "",  width: 50, editable : true, renderer : this.expCheckboxRenderer(), headerRenderer : { type : "CheckBoxHeaderRenderer", position : "top", text : "선택",  onClick : this.headerCheckClick }}, // 기본값 "bottom"
                             {dataField : "SOURCE_TP",     headerText : "유형",   width: 90 , editRenderer : gridDropdownRenderer['EX_SOURCE_TP'], labelFunction : auiDrodownLabelFunction }, 
                             {dataField : "undefined",headerText : "입력",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiOpenDetail, },
                             {dataField : "undefined",headerText : "삭제",width: 50,  renderer : {type : "TemplateRenderer"},labelFunction : this.auiDeleteItem, },
                             {dataField : "undefined",   headerText : "첨부",  width	: 50, style : "aui_col_left", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDetail,  tooltip : {  tooltipFunction :  this.detailTootip } },
                             {dataField : "SOURCE_TP",     headerText : "유형",   width: 70 , editRenderer : gridDropdownRenderer['EX_SOURCE_TP'], labelFunction : auiDrodownLabelFunction }, 

                             {dataField : "undefined",   headerText : "증빙일",  width: 120, style : "aui_col_center", renderer : {type : "TemplateRenderer"},labelFunction : this.setAuiDate,   },
                             {dataField : "PAY_AMT",   headerText : "청구금액",formatString : "#,###", dataType : "numeric" , width: 100, style : "aui_col_right", },
                             {dataField : "EXPENSE_NM",   headerText : "계정-항목",  width: 120, style : "aui_col_center",},
                             {dataField : "CCTR_NM",   headerText : "코스트센터",  width: 120, style : "aui_col_center",},
                             {dataField : "PS_NM",   headerText : "프로젝트",  width: 120, style : "aui_col_center",},                          
                             {dataField : "APPROVE_STATUS_NM",   headerText : "결재진행상태",  width: 120, style : "aui_col_center",},                      
                             {dataField : "REPORT_TITLE",   headerText : "결재제목",  width: 120, style : "aui_col_center",},                    
                             {dataField : "SLIP_KEY",   headerText : "SAP전표",  width: 120, style : "aui_col_center",},                                 
                         ] ;//columnlayout                     
                     
                 
                 // 팝업 그리드
                 this.columnlayouttoll =   
                     [   
                         {dataField : "BIZ_NM",   headerText : "영업소",  width: 120, style : "aui_col_left",},
                         {dataField : "DH",   headerText : "일자",  width: 80, style : "aui_col_center",  },
                         {dataField : "TOT_AMT",   headerText : "금액",  width: 80, style : "aui_col_right",dataType : "numeric",formatString : "#,###"},
                         {dataField : "BIZ_NO",   headerText : "사업자번호",  width: 100, style : "aui_col_center",},
                         {dataField : "CARD_NO",   headerText : "카드정보",  width: 120, style : "aui_col_center",},
                         {dataField : "HIPASS_DOC_NO",   headerText : "DOC",  width: 120, style : "aui_col_center",},
                         
                   ] ;//columnlayouttoll
                    
                    
//                  // 팝업 그리드 - changeapprovemp
//                  this.columnlayoutapprovemp =   
//                      [   
//                          {dataField : "DEPT_CD",   headerText : "부서코드",  width: 120, visible : false, style : "aui_col_left",},
//                          {dataField : "DEPT_NM",   headerText : "부서",  width: 220, style : "aui_col_center",},
                           
//                      ] ;//changeapprovemp   
                // 팝업 그리드 - changeapprovemp2
//                  this.columnlayoutapprovemp2 =   
//                      [   
//                     	 {dataField : "isActive", headerText : "Active", width: 25,
//                     			headerRenderer : {
//                     				type : "CheckBoxHeaderRenderer",
//                     				// 헤더의 체크박스가 상호 의존적인 역할을 할지 여부(기본값:false)
//                     				// dependentMode 는 renderer 의 type 으로 CheckBoxEditRenderer 를 정의할 때만 활성화됨.
//                     				// true 설정했을 때 클릭하면 해당 열의 필드(데모 상은 isActive 필드)의 모든 데이터를 true, false 로 자동 바꿈
//                     				dependentMode : true, 			
//                     				position : "bottom" // 기본값 "bottom"
//                     			},
//                     			renderer : {
//                     				type : "CheckBoxEditRenderer",
//                     				showLabel : false, // 참, 거짓 텍스트 출력여부( 기본값 false )
//                     				editable : true, // 체크박스 편집 활성화 여부(기본값 : false)
//                     				checkValue : "Active", // true, false 인 경우가 기본
//                     				unCheckValue : "Inactive"
//                     			}
//                     	},
//                     	 {dataField : "EMP_NO",   headerText : "직원번호",  width: 120, editable : false, visible : false, style : "aui_col_left",},
//                     	 {dataField : "EMP_NM",   headerText : "결재자",  width: 140, editable : false, style : "aui_col_center",},
//                     	 {dataField : "DEPT_CD",   headerText : "부서코드",  width: 120, editable : false, visible : false, style : "aui_col_left",},
//                     	 {dataField : "DEPT_NM",   headerText : "부서",  width: 155, editable : false, style : "aui_col_center",},
                           
//                      ] ;//changeapprovemp2
                     
                  // ELEMENWT_TYPE 콤보박스
//      			  	var keyValueList = [{"code":"2", "value":"합의"}, {"code":"3", "value":"결재"}];
                     
                 // 팝업 그리드 - changeapprovemp3
//                   this.columnlayoutapprovemp3 =   
//                       [   
//                     	 {dataField : "LINE_SEQ",   headerText : "결재라인순번",  width: 60, editable : false, visible : false, style : "aui_col_center",},
//                     	 {dataField : "ORD",   headerText : "결재순서",  width: 60, visible : false, style : "aui_col_center",},
//                     	 {dataField : "APPROVE_STEP",   headerText : "결재단계",  width: 60, editable : true, visible : false, style : "aui_col_center",},
//                     	 //{dataField : "APPROVE_TP",   headerText : "종류",  width: 60, editable : true, style : "aui_col_center",},
//                     	 {dataField : "APPROVE_TP",   headerText : "종류",  width: 60, 
//      			        	labelFunction : function(  rowIndex, columnIndex, value, headerText, item ) { 
//      			    			var retStr = value;
//      			    			for(var i=0,len=keyValueList.length; i<len; i++) {
//      			    				if(keyValueList[i]["code"] == value) {
//      			    					retStr = keyValueList[i]["value"];
//      			    					break;
//      			    				}
//      			    			}
//      			    			return retStr;
//      			    		}, editRenderer : {
//      			    			type : "DropDownListRenderer",
//      			    			list : keyValueList, //key-value Object 로 구성된 리스트
//      			    			keyField : "code", // key 에 해당되는 필드명
//      			    			valueField : "value", // value 에 해당되는 필드명
//      			    			maxlength : 10
//      				    	}
//      			    	},
//                     	 {dataField : "EMP_NO",   headerText : "직원번호",  width: 120, editable : false, visible : false, style : "aui_col_left",},
//                      	 {dataField : "EMP_NM",   headerText : "결재자",  width: 100, editable : false, style : "aui_col_center",},
//                     	 {dataField : "DEPT_CD",   headerText : "부서코드",  width: 120, editable : false, visible : false, style : "aui_col_left",},
//                      	 {dataField : "DEPT_NM",   headerText : "부서",  width: 150, editable : false, style : "aui_col_center",},
//                      	 {dataField : "PROCESS_APPRV_GRP",   headerText : "업무유형결재그룹",  width: 120, editable : false, visible : false, style : "aui_col_center",},
//                      	 {dataField : "DELETE", headerText : "DELETE", width: 30,
//                      		renderer : {
//                      			type : "IconRenderer",
//                      			iconWidth : 16, // icon 사이즈, 지정하지 않으면 rowHeight에 맞게 기본값 적용됨
//                      			iconHeight : 16,
//                      			iconPosition : "center",
//                      			iconTableRef :  { // icon 값 참조할 테이블 레퍼런스
//                      				"default" : "/custom/image/danger.png" // default
//                      			},
//                      			onClick : function(event) {
//                      				AUIGrid.removeRow(event.pid, event.rowIndex);
//                      			}
//                      		}
//                      	}   
//                    	 ] ;//changeapprovemp3
                  // 팝업 그리드 - changeapprovemp4
//                    this.columnlayoutapprovemp4 =   
//                       [   
//                     	 {dataField : "LINE_SEQ",   headerText : "결재라인순번",  width: 60, editable : false, visible : false, style : "aui_col_center",},
//                      	 {dataField : "ORD",   headerText : "결재순서",  width: 60, visible : false, style : "aui_col_center",},
//                      	 {dataField : "APPROVE_STEP",   headerText : "결재단계",  width: 60, editable : true, visible : false, style : "aui_col_center",},
//                     	 //{dataField : "APPROVE_TP",   headerText : "종류",  width: 60, editable : true, style : "aui_col_center",},
//                     	 {dataField : "APPROVE_TP",   headerText : "종류",  width: 60,
//       			        	labelFunction : function(  rowIndex, columnIndex, value, headerText, item ) { 
//       			    			var retStr = value;
//       			    			for(var i=0,len=keyValueList.length; i<len; i++) {
//       			    				if(keyValueList[i]["code"] == value) {
//       			    					retStr = keyValueList[i]["value"];
//       			    					break;
//       			    				}
//       			    			}
//       			    			return retStr;
//       			    		}, editRenderer : {
//       			    			type : "DropDownListRenderer",
//       			    			list : keyValueList, //key-value Object 로 구성된 리스트
//       			    			keyField : "code", // key 에 해당되는 필드명
//       			    			valueField : "value", // value 에 해당되는 필드명
//       			    			maxlength : 10
//       				    	}
//       			    	},
//                     	 {dataField : "EMP_NO",   headerText : "직원번호",  width: 120, editable : false, visible : false, style : "aui_col_left",},
//                      	 {dataField : "EMP_NM",   headerText : "결재자",  width: 100, editable : false, style : "aui_col_center",},
//                     	 {dataField : "DEPT_CD",   headerText : "부서코드",  width: 120, editable : false, visible : false, style : "aui_col_left",},
//                      	 {dataField : "DEPT_NM",   headerText : "부서",  width: 150, editable : false, style : "aui_col_center",},
//                      	 {dataField : "PROCESS_APPRV_GRP",   headerText : "업무유형결재그룹",  width: 120, editable : false, visible : false, style : "aui_col_center",},
//                      	 {dataField : "DELETE", headerText : "DELETE", width: 30, editable : false,
//                       		renderer : {
//                       			type : "IconRenderer",
//                       			iconWidth : 16, // icon 사이즈, 지정하지 않으면 rowHeight에 맞게 기본값 적용됨
//                       			iconHeight : 16,
//                       			iconPosition : "center",
//                       			iconTableRef :  { // icon 값 참조할 테이블 레퍼런스
//                       				"default" : "/custom/image/danger.png" // default
//                       			},
//                       			onClick : function(event) {
//                       				AUIGrid.removeRow(event.pid, event.rowIndex);
//                       			}
//                       		}
//                       	}  
//                       ] ;//changeapprovemp4  
                   // 팝업 그리드 - changeapprovemp end
                   
//                    출장비 - 금액계산방법_일자별*일당유형 합계 팝업 그리드 ---------------------------------------------

				   initGridDropDownBox("BIZTRIP_TP","/pay/common/commonSelect/search",auiDropDownCallBack,{ SELECT_ID:"getBizTripType" }); 
				   
                   this.columnlayoutBizTripCal = 
                   [   
                	   	 {dataField : "BIZTRIP_ORDER",  headerText : "번호", dataType : "numeric", editable: false, visible: false },
                    	 {dataField : "BIZTRIP_DT",  headerText : "일자", dateInputFormat : "yyyymmdd", dataType : "date" , formatString : "yyyy-mm-dd", editable: false },
                         {dataField : "BIZTRIP_TP",   headerText : "일당유형",  style : "aui_col_left", editRenderer : gridDropdownRenderer['BIZTRIP_TP'], labelFunction : auiDrodownLabelFunction},
                         {dataField : "BIZTRIP_RATE",   headerText : "금액",formatString : "#,###", dataType : "numeric" , style : "aui_col_right", editable: false},
                         {dataField : "TRAVEL_RATE",   headerText : "TRAVEL_RATE", style : "aui_col_right", editable: false, visible : false},
                   ] ;//columnlayoutBizTripCal
                   
                   //columnlayoutBizTripCal 금액 합계 row
                  var ref = this;
                   this.footerLayout = [{ 
                              labelText : "합 계",
                              positionField : "BIZTRIP_TP",
                              colSpan : 1
                          }, {
                              dataField : "BIZTRIP_RATE",
                              operation : "SUM",
                              positionField : "BIZTRIP_RATE",
                              formatString : "#,##0",
                              labelFunction : function(value, columnValues, footerValues) {
                              	if(ref.BIZTRIP_RATES.length > 0){
	                              	var val = 0;
	                              	for(var i=0; i<ref.BIZTRIP_RATES.length;i++){
	                              		val = val + ref.BIZTRIP_RATES[i]
	                              	}
                            	  	return val;
                              	}  else {
//                               		return getNewSum(ref.bizTripCalGridView,this.dataField, value);
                              	}
                              },                          
                              styleFunction : function(ownValue, footerValues) {
                              
                                 if (footerValues[1] != footerValues[2]) {
                                    return "aui-grid-footer-blue"; // Invalid Color
                                 }
                                return "aui-grid-footer-red"; // Valid Color
                              }, // styleFunction
                     },];
          }, // created       
          methods : {  // ======================================================================================
        	  // 
        	  changeReportType: function(e, item) {
                  
        		  log(item)
	        	  var ref = this;
	        	  if (isEmpty(item)) {
	  				this.receiptList.forEach(function(i){
	  							i.NOT_SHOW = '' ;	
	  				})   
	  				ref.$forceUpdate()
	  				return;
	        	  }
 
	        	  if (item.CODE == '미등록') {
	        	    log('미등록')
		  				this.receiptList.forEach(function(i){
		  					if (isEmpty(i.EXPENSE_NO) ){
		  							i.NOT_SHOW = '' ;	
		  							// ref.getSelectedReportTypes(i);
		  						}else{
		  							i.NOT_SHOW = '1' ;
		  						}
		  				})   
		  				ref.$forceUpdate()
		  				return;
		        	  }
       		  //초기화
				this.receiptList.forEach(function(i){
  					if (!(isEmpty(i.EXPENSE_NO) || (i.APPROVE_STATUS == "2" || i.APPROVE_STATUS == "4") ) ){
  						if (item.CODE == i.REPORT_TP) {
  							i.NOT_SHOW = '' ;	
  							log(i)
  							// ref.getSelectedReportTypes(i);
  						}else{
  							i.NOT_SHOW = '1' ;
  							log(i)
  						}
  					}
  				})
       		  ref.$forceUpdate();
  				
        	  },
          //-------------------
        	  saveApproved: function(e) {
        		  
//         		  log("saveApproved");
//         		  log(e);
//         		  saveGritter();
        		  
          	      $('#'+this.id+'reportAddedFile').val(''); // reset
                    
                   var ref = this;   
                   this.receiptList.forEach( function (item, index) {
                   	 var i = ref.selectedReceiptList.findIndex( function(i) { return i.EXPENSE_NO == item.EXPENSE_NO  }    )
                   	 if (i != -1) {
                   		 item.CHECKED = '0';
                   	     item.APPROVE_STATUS = '2';
                   		 item.APPROVE_STATUS_NM = '진행중';
                   		 item.REPORT_TITLE =  ref.$refs.receiptapprove.reportTitle;
                   		 log('item.REPORT_TITLE');
                   		 log(item.REPORT_TITLE);
                   		 ref.getSelectedReportTypes(item);
                   	 }
                    });
        		  
        	  },
        	  resetSelectedReportBtn:  function () {
        		  
        		  //초기화
        		  var ref = this
        		  this.selectedReportTypes = [];
        		  this.receiptList.forEach(function(i){
					     if (i.CHECKED == "1") {
					    	 ref.getSelectedReportTypes(i);
					     }
    				})
        	  },
        	  clickSelectAll:  function (e) {
        		
        		  //초기화
        		  this.selectedReportTypes = [];
        		  
        		  var ref = this;
                  if (e.target.checked == true){
	      				this.receiptList.forEach(function(i){
	      					if (!(isEmpty(i.EXPENSE_NO) || (i.APPROVE_STATUS == "2" || i.APPROVE_STATUS == "4") ) ){
	      						 i.CHECKED = '1' ;
	      					     ref.getSelectedReportTypes(i);
	      					}
	      				})
                  }else{
      				this.receiptList.forEach(function(i){
      					if (!(isEmpty(i.EXPENSE_NO) || (i.APPROVE_STATUS == "2" || i.APPROVE_STATUS == "4") ) ) {
      						i.CHECKED = '0' ;
      					}
      				});
      				this.selectedReportTypes = [];
                  } 
                  
        	  },
        	  
        	  getSelectedReportTypes :  function (item) {
        		
        		 var index =  this.selectedReportTypes.findIndex( function (i, index) {
        			        return i.REPORT_TP == item.REPORT_TP;
        		     }
        		  );		
        		
        		if (item.CHECKED == '1'){
            		if (index == -1){
            			this.selectedReportTypes.push({REPORT_TP : item.REPORT_TP, REPORT_TP_NM : item.REPORT_TP_NM , COUNT : 1 });
            			
            		}else{
            			this.selectedReportTypes[index].COUNT = to_number(this.selectedReportTypes[index].COUNT) + 1;
            		}	
        		
        		
        		}else{
        			
        			if  (index == -1){
        				
        			}else{
        		   
        		      var cnt = this.selectedReportTypes[index].COUNT;
        		      if (this.selectedReportTypes[index].COUNT == 1) {
        		    	  this.selectedReportTypes.splice(index,1);
        		      }else if (cnt > 1){
        		    	   this.selectedReportTypes[index].COUNT = cnt - 1;
        		      }
        			}
        		}
        		  
        		  
        	  },	  
        	  
        	  deleteApproveLine:  function (items, index, item, idx) {
        		  this.copy_approveLines[index].APPROVE_LIST.splice(idx,1);
              },
        	  deleteEcImg:  function (me) {
        		  
                       if (this.curItem.APPROVE_STATUS == '2' ||this.curItem.APPROVE_STATUS == '4')	 {
                    	      customAlert('','','진행중 또는 결재건은 삭제할 수 없습니다.');
                       }else{
                    	   me.deleteimg();
                       }
        	  },
			  receiptClickMainFile:  function (url, kind, name) {
					this.tempCurItem.FILE_NO = url;
					this.tempCurItem.FILE_KIND = kind;
					this.tempCurItem.ORG_FILE_NAME = name;
					
			  },
        	  headerCheckClick :  function (event) {
  			    var type = this.$refs.EX_GRID_SOURCE_TYPE.getValue();
  				var ref = this;
  				this.receiptList.forEach(function(i){
  					if ((i.SOURCE_TP == type) && !(isEmpty(i.EXPENSE_NO) || (i.APPROVE_STATUS == "2" || i.APPROVE_STATUS == "4") ) )
  						event.checked == true ? i.CHECKED = '1' : i.CHECKED = '0'; 
  				})
  					AUIGrid.update(this.gridView);
  	           },
        	  
        	  closeModal:  function () {
        		  $('#'+this.modalId).scrollTop(0);
        	  },
        	  
        	  changeSourceType :  function (type) {
        		     //컬럼 레이아웃 변경
        		   if (type == '1')  {
		    	     AUIGrid.changeColumnLayout(this.gridView, this.columnlayoutCard);
        		   }else if (type == '2')  {
        			 AUIGrid.changeColumnLayout(this.gridView, this.columnlayoutReceipt);
        		   }else if (type == '3')  {
          			 AUIGrid.changeColumnLayout(this.gridView, this.columnlayoutTravel);    			 
        		   }else if (type == '4')  {
          			 AUIGrid.changeColumnLayout(this.gridView, this.columnlayoutGas);      			 
        		   }else if (type == '8')  {
          			 AUIGrid.changeColumnLayout(this.gridView, this.columnlayoutPrepay);
        		   }else if (type == '6')  {
          			 AUIGrid.changeColumnLayout(this.gridView, this.columnlayoutToll);			 
        		   }else{
        			 AUIGrid.changeColumnLayout(this.gridView, this.columnlayoutReceipt);   
        		   }
        		     
        		   if (type != "ALL") { 
        			   AUIGrid.setFilterByValues(this.gridView, "SOURCE_TP", [type]);
        		   }else{
        			   AUIGrid.clearFilterAll(this.gridView);
        		   }
        		     
              }, // changeSourceType 
              
              
        	  changeCardEvidSwitch :  function () {
        		  if ($('#'+this.pgmid+'cardevidswitch').is(":checked") ) {
        			  this.isCardEvidShow = true;
                  }else{
                	  this.isCardEvidShow = false;
                  }
        	  
        	  },
        	  clickApproveTpList : function (itemapprovetp, indexapprovetp, applineitem, index) {     
        		  
        		  // {"APPROVE_LINE_TP":"LINE10","APPROVE_NAME":"우김이","APPROVE_TP_NM":"합의","DEPT_NM":"아산삼성아름타운점","EMAIL":"jmleejslee@gmail.com","APPROVE_ID":"Y-0002","DEPT_CD":"D000270","APPROVE_TP":"2","APPROVE_ORDER":1}
        		  // {"ORD":2,"CODE":"2","CLCD":"EX_APPROVE_TP","REF1":"합의","NAME":"합의","LANGCL":"ko"}
        		  applineitem.APPROVE_TP_NM = itemapprovetp.NAME;
        		  applineitem.APPROVE_TP = itemapprovetp.CODE;
        	  },
        	  
        	  
    
        	  saveapproveline : function () {             
        		  
                  if (this.approveLine.length <= 1) {
                	  customAlert("","","저장할 데이터가 없습니다.");
                	  return false;
                  }
                  
                  var o = {};
                  o.data = this.approveLine;
                  o.REPORT_TP = this.firstSelectedItem.REPORT_TP;
                  o.PROCESS_APPRV_GRP = this.processApprvGrp;
                  
                  var param = {
                          svcId:"saveApproveLine",
                          strUrl:"/ex/expense/approve/saveApproveLine", 
                          inDs :  "" ,
                          param : o, 
                          pCall : this.saveapprovelineCallback, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                    ajaxReadJsonData(param); 
                  
               },       	  
               saveapprovelineCallback: function (svcId, data) { 
            	 
            	    saveGritter();
            	   
               },
        	  
        	  saveCardSharedEmp: function (isvalid, codeId, item) { 
                 
        		  if (isEmpty(item.CODE) ) { 
        		      customAlert('','','취소되었습니다.');
        		      return false;
        		  }
                  var param = {
                          svcId:"saveCardSharedEmp",
                          strUrl:"/ex/expense/expensemst/saveCardSharedEmp", 
                          inDs :  "" ,
                          param : { SHARED_USER_ID : item.CODE , EVID_NO : this.curItem.EVID_NO  }, 
                          pCall : this.saveCardSharedEmpCallback, 
                          pLoad : true,
                          
                      };
                      //트랜젝션 실행
                    ajaxReadJsonData(param); 
        	  },
        	  saveCardSharedEmpCallback : function (svcId, data) { 
        		  saveGritter();
        	  },
              getApproveLine : function (obj) { 
//             	 LINE10  수동-결재선본인선택
//             	 LINE20  자동-코스트센터결재선
//             	 LINE30  자동-보고서유형결재선
//             	 LINE40  자동-부서기준결재선   
            	this.approveLineTp = obj.APPROVE_LINE_TP;
            	 var val = '';
            	 var cctrorps = '';
            	 if (obj.APPROVE_LINE_TP == 'LINE10') {
            		 val =  '[[${session.g_userId}]]';  // 본인 id
                 }else if (obj.APPROVE_LINE_TP == 'LINE20') {
                     if (obj.BELONGING_TP == '1') {
                    	 val = obj.CCTR_CD;
                    	 cctrorps = 'CCTR';
                     }else if (obj.BELONGING_TP == '2'){
                    	 val = obj.PS_CD;
                    	 cctrorps = 'PS';
                     }
                 }else if (obj.APPROVE_LINE_TP == 'LINE30') {
                	 val =  obj.APPROVE_LINE_TP;  // 보고서유형
                 }else if (obj.APPROVE_LINE_TP == 'LINE40') {
                	 val =  '[[${session.g_deptCd}]]';  // 부서
                 }
            	  
                var sObj =  { REPORT_TP : obj.REPORT_TP, 
                		      REF : val, CCTRORPS : cctrorps,  
                		      APPROVE_LINE_TP : obj.APPROVE_LINE_TP  ,
                		      PROCESS_APPRV_GRP : obj.PROCESS_APPRV_GRP 
                             };
                
                var param = {
                        svcId:"getApproveLine",
                        strUrl:"/ex/expense/report/getApproveLine", 
                        inDs :  "" ,
                        param : sObj, 
                        pCall : this.getApproveLineCallback, 
                        pLoad : true          
                    };
                    //트랜젝션 실행
                  ajaxReadJsonData(param);    
              },
              getApproveLineCallback : function (svcId, data) { 
            	  
	               this.approveLines = data.ds_master.data;
	               this.approveLines.forEach( function (item) {
	            	   item.APPROVE_LIST =  JSON.parse( item.APPROVE_LIST ) ;
	                   })
	
	               this.approveLine = [];
	               var ref = this;
	               this.approveLines.forEach( function (items) {
	            	   ref.approveLine.push(...items.APPROVE_LIST);
	                   }  );
              },       	  
        	  receiptimgcrop : function () { 
        		  this.$refs.receiptimg.showModal();
        	  },
        	  cardimgcrop : function () { 
        		  this.$refs.cardimg.showModal();
        	  },
        	  // 이미지 편집 후 저장(기존 파일 제거 & replace)
        	  receiptimgedited: function (fileno) { 
                  // reload 보류
                  $('#'+this.pgmid+'expbox'+this.curItem.INDEX).find('img').attr('src', '/ec/common/syscommon/fileupload/downloadFile/' + fileno+'?objid='+objId());
                  $('#'+this.pgmid+'expmobilebox'+this.curItem.INDEX).find('img').attr('src', '/ec/common/syscommon/fileupload/downloadFile/' + fileno+'?objid='+objId());
        	  },
        	  newCurItem: function () { 
        		  if (this.curItem.TYPE == 'RECEIPT') { // 영수증
        			  this.openReceipt();
        		  }else if (this.curItem.TYPE == 'TRAVEL'){
        			  this.openTravel();
        		  }else if (this.curItem.TYPE == 'TOLL'){
        			  this.openToll();
	    		  }else if (this.curItem.TYPE == 'PREPAY'){
	    			  this.openPrepay();
	    		  }else if (this.curItem.TYPE == 'ATM'){
	    			  this.openAtm();
	    		  }else if (this.curItem.TYPE == 'CON'){
	    			  this.openCon();
	    		  }else if (this.curItem.TYPE == 'GEN'){
	    			  this.openGen();
	    		  }else if (this.curItem.TYPE == 'GAS'){
	    			  this.openGas();
	    		  }    		    		  		  
        	  },
        	  
        	 //사적사용 업데이트
        	  privatUseCheckChanged: function () { 
        		  
        		  if (!isEmpty(this.curItem.EXPENSE_NO) && $('#'+this.pgmid+'privateUseCheck').is(":checked") == true ) {
        			 // customPrompt(type, title, callbackFunction, val){
        			  customConfirm("정산제외로 하시겠습니까?", this.privatUseCheckChangedCallback, this.privatUseCheckChangedCancel )
        			  return false;
        		  }else{
        			  this.privatUseCheckChangedCallback();
        		  }
        	  },
        	  privatUseCheckChangedCancel: function () { 
        		  $('#'+this.pgmid+'privateUseCheck').prop("checked", false);
        	  },
              privatUseCheckChangedCallback: function () { 
                  
                  if ($('#'+this.pgmid+'privateUseCheck').is(":checked") == true) {
                      this.curItem.PRIVATE_YN = '1';
                  }else{
                      this.curItem.PRIVATE_YN = '0';
                  }
                 
                 var sObj =  {};
                 Object.assign(sObj, this.curItem); 
                 Object.assign(sObj, this.tempCurItem);
             
                
                var param = {
                        svcId:"savePrivateUse",
                        strUrl:"/ex/expense/expensemst/savePrivateUse", 
                        inDs :  "" ,  
                        param : sObj, 
                        pCall : this.privatUseCheckChangedCallbackCallback, 
                        pLoad : true          
                    };
                    //트랜젝션 실행
                   ajaxReadJsonData(param);  
           
           },     	  
        	  
        	  privatUseCheckChangedCallbackCallback: function (svcId, data, errCd, msgTp, msgCd, msgText) { 
        	  
        		     
//         		     $("#" + this.pgmid + 'cardmodalbody ' + 'input').attr("disabled","disabled");// : inputArea_kgmb class내의 모든 input 태그를 disabled 처리
//         		     $("#" + this.pgmid + 'cardmodalbody ' + 'select').attr("disabled","disabled");//
//         		     $("#" + this.pgmid + 'cardmodalbody ' + 'input').attr("disabled","disabled");//
        		     
//         		  this.curItem.EXPENSE_NO = '';
//         		  this.tempItem.EXPENSE_NO = '';
        		  this.openCard();
        		     
        	  
        	  },
        	  openTollPdfExpand : function () { 
        		
                  var param = {
                          svcId:"curCdChange",
                          strUrl:"/ec/common/vision/extractText", 
                          inDs :  "" ,  
                          param : {}, 
                          pCall : this.openTollPdfExpandCallback, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                     ajaxReadJsonData(param);    		  
                  
        	  },
        	  openTollPdfExpandCallback : function (svcId, data, errCd, msgTp, msgCd, msgText) {  
        		  // clNSY3hhZFl4TE5vRVN4ckRTdHNtdWtCc2dmQ0lBVEI=
        	      // https://12b68a0b9f8143efadf8aa4954502f8a.apigw.ntruss.com/custom/v1/3776/727385ab91019bad55033362966c2bc1b3aca58f5510b108baefd553b4e0bfa3/general
        	      
                  var obj = jsonParse(data.response);
        	  },
        	  pdfToTextCallback :  function (str) {  
        		  
        		   this.tollOcrList = getTollsFromString(str);
	               if (this.tollOcrList.length > 0) {
	            	   this.$refs.gridtoll.setGridData(this.tollOcrList);
	            	   this.$refs.RECEIPT_DT_TOLL.setData(this.tollOcrList[0].RECEIPT_DT);
	                   var amt = 0;
	                   this.tollOcrList.forEach(function(item){
	                       amt = amt + item.TOT_AMT;
	                   });
	                   $('#'+this.pgmid+'EXPENSE_AMT_TOLL').val(numberformat(amt,'0,000'));
	               }	  
        	  },
        	  procPdfToll : async function (response) {  
        		//  response.savedFileName
        		   var url = window.location.protocol + "//" + window.location.host + '/ec/common/syscommon/fileupload/downloadFile/' + response.fileNo ;
        		
        		   await pdfToCanvasAndText(url, this.tollCanvasId, 1.3); // modal
        		   pdfToText(url, this.pdfToTextCallback);
        		   // pdfToText(url);
                    
              },       
              
              
              to_number : function (str) {   
            	  return to_number(str);
              },
              // 코스트센터/프로젝트 선택 변경
              ccenterTpChange : function (e) {   
                  this.receiptcosttype = e;
                  this.tempCurItem.BELONGING_TP = e;
              },
              
              changeReceiptDate : function (e) {   
                  //환율일자 변경
                  this.curCdChange();
              },
              curCdChange : function (e) { 
                  let dt =  '' ;  
                  if (this.curItem.TYPE == "RECEIPT"){
                      dt = this.$refs.RECEIPT_DT_RECEIPT.getDate() ;
                      this.currencyCd = this.$refs.RECEIPT_CURRENCY.getData() ; 
                  }else if  (this.curItem.TYPE == "PREPAY"){
                      dt = this.$refs.RECEIPT_DT_PREPAY.getDate();
                      this.currencyCd = this.$refs.PREPAY_CURRENCY.getData() ; 
                  }else if  (this.curItem.TYPE == "ATM"){
                      dt = this.$refs.RECEIPT_DT_ATM.getDate();
                      this.currencyCd = this.$refs.ATM_CURRENCY.getData() ; 
                  }else if  (this.curItem.TYPE == "CON"){
                      dt = this.$refs.RECEIPT_DT_CON.getDate();
                      this.currencyCd = this.$refs.CON_CURRENCY.getData() ; 
                  }else if  (this.curItem.TYPE == "GEN"){
                      dt = this.$refs.RECEIPT_DT_GEN.getDate();
                      this.currencyCd = this.$refs.GEN_CURRENCY.getData() ; 
                  }else if  (this.curItem.TYPE == "TRAVEL"){
                     dt = this.$refs.biztriprange.getFrDate();
                    //  this.currencyCd = this.$refs.PREPAY_CURRENCY.getData() ;                      
                  }
                  var param = {
                          svcId:"curCdChange",
                          strUrl:"/ec/fi/exp/receipt/getCurRate", 
                          inDs :  "" ,  
                          param : {CURRENCY_CD : this.currencyCd, CURRENCY_DT : dt }, 
                          pCall : this.tranCallBack, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                     ajaxReadJsonData(param);                 
              },
              // 전표화면으로 가기 & 조회
              user1ButtonOnClick : function () { 
               
                 var selectedRows = AUIGrid.getSelectedRows(this.gridView);
                 // 공통함수로 재생성 
                 goSapSlip(selectedRows[0].SLIP_KEY);
              
              },// user1ButtonOnClick             
              
              mouseoverReceiptBox : function(e) {
                 $('#'+e).find('.checkPlus').removeClass('d-none');
              },
              mouseleaveReceiptBox : function(e) {
                  $('#'+e).find('.checkPlus').addClass('d-none');
               },
               
               
             validateApproveLine :  function(e, item, index) {
//                 LINE10  수동-결재선본인선택
//                 LINE20  자동-코스트센터결재선
//                 LINE30  자동-보고서유형결재선
//                 LINE40  자동-부서기준결재선      


                if (item.CHECKED == '0') return true;  // uncheck 했을 때,  '1'은 기존 값
                // REPORT_TP , APPROVE_LINE_TP
                 var list = [];
                 // 2021.08.08 수정, 리포트 유형으로만 체크
//                  if (item.APPROVE_LINE_TP == "LINE10"){
//                      list = this.receiptList.filter(function (i) {
//                          return (i.CHECKED == '1'  &&  item.APPROVE_LINE_TP != i.APPROVE_LINE_TP) ;
//                      });  
//                  }else if (item.APPROVE_LINE_TP == "LINE20" && item.BELONGING_TP == '1' ){ //코스트센터
// 	                 list = this.receiptList.filter(function (i) {
// 	                     return (i.CHECKED == '1'  &&  item.REPORT_TP != i.REPORT_TP  && item.CCTR_CD != i.CCTR_CD) ;
// 	                 }); 
//                  }else if (item.APPROVE_LINE_TP == "LINE20" && item.BELONGING_TP == '2' ){ // ps_cd
//                      list = this.receiptList.filter(function (i) {
//                          return (i.CHECKED == '1'  &&  item.REPORT_TP != i.REPORT_TP  && item.PS_CD != i.PS_CD) ;
//                      });    
//                  }else if (item.APPROVE_LINE_TP == "LINE30"){
//                      list = this.receiptList.filter(function (i) {
//                          return (i.CHECKED == '1'  &&  item.REPORT_TP != i.REPORT_TP) ;
//                      });              
//                  }else{
//                      list = this.receiptList.filter(function (i) {
//                          return (i.CHECKED == '1'  &&  item.REPORT_TP != i.REPORT_TP) ;
//                      });   
//                  }

                     var o = this.receiptList.find(function (i) {
                         return (i.CHECKED == '1'  &&  item.REPORT_TP != i.REPORT_TP) ;
                     });   
                     
                
                 if ( !isEmpty(o) ){
                     customAlert("","","같은 유형의 문서만 선택할 수 있습니다.("+ item.REPORT_TP_NM+ ','+ o.REPORT_TP_NM + ')');     
                     item.CHECKED ="0";
                     $('#'+ e).prop("checked", false); 
                     return false;
                 }
                 
            	  return true;
               
               },       
               clickReceiptBox : function(e, item, index) {
            	   
               	   if (item.EXPENSE_NO == "") {
                          customAlert('','','비용 등록 후 \n결재할 수 있습니다.');
                          return true;
                     }else if (item.APPROVE_STATUS == "2" || item.APPROVE_STATUS == "4"  ){
                         //customAlert('','', item.APPROVE_STATUS_NM +'(제목:'+ item.REPORT_TITLE +') 중입니다.');
                         customAlert('','', '결재 진행 중입니다.');
                         return false;                   
                     } 
                  },
               
               changedMobileReceiptBox : function(e, item, index) {
            	   
               
              	 if (item.EXPENSE_NO == "") {
                     customAlert('','','비용 등록 후 <br>결재할 수 있습니다.');
                     return true;
                }else if (item.APPROVE_STATUS == "2" || item.APPROVE_STATUS == "4"  ){
                    customAlert('','', item.APPROVE_STATUS_NM +'(제목:'+ item.REPORT_TITLE +') 중입니다.');
                    return false;                   
                } 
          	
	              if (typeof item.CHECKED == "undefined" ){
	                  item.CHECKED = '0';
	              }
	                
// 	              if (item.CHECKED == '1') {
// 	                  item.CHECKED = '0';
// 	              }else{
// 	                  item.CHECKED = '1';
// 	              }
              
                  this.getSelectedReportTypes(item);
                   
                    
                },   
                changedReceiptBox : function(e, item, index) {
                	
                	 if (item.EXPENSE_NO == "") {
                           customAlert('','','비용 등록 후 <br> 결재할 수 있습니다.');
                           return true;
                      }else if (item.APPROVE_STATUS == "2" || item.APPROVE_STATUS == "4"  ){
                          customAlert('','알림', item.APPROVE_STATUS_NM +'(제목:'+ item.REPORT_TITLE +') 중입니다.');
                          return false;                   
                      } 
                	
              	  
                    if (typeof item.CHECKED == "undefined" ){
                        item.CHECKED = '0';
                    }
                      
                    if (item.CHECKED == '1') {
                        item.CHECKED = '0';
                    }else{
                        item.CHECKED = '1';
                    }
                    
                    this.getSelectedReportTypes(item);
                    
                    // 리포트 타입 등 체크
//                     if (this.validateApproveLine(e, item, index) == false)  {
//                           return false;
//                     }
                    
                    },
              uploadedOdometerStart : function(fileName) {
                  this.odometerStartFile = fileName;
              },
              uploadedOdometerEnd : function(fileName) {
                  this.odometerEndFile = fileName;
              },              
              resetReportAddedFile : function() {
                  $('#'+this.pgmid+'reportAddedFile').val('');
              },
              getSelectedExpTotal : function(){
                  var t = 0 ;
                  this.selectedReceiptList.forEach(item => { if (item.CHECKED == '1')   t = t + to_number(item.EXPENSE_AMT) + to_number(item.EXPENSE_VAT_AMT)  ;});
                  return t;
                  
              }, // getSelectedExpTotal
              getSelectedExpVatTotal : function(){
                  var t = 0 ;
                  this.selectedReceiptList.forEach(item => {if (item.CHECKED == '1')   t = t + to_number(item.EXPENSE_VAT_AMT);});
                  return t;     
               }, // getSelectedExpVatTotal
              getSelectedExpCount : function(){
            	  log('getSelectedExpCount');
            	  log(this.selectedReceiptList);
          	    
              
                      var t = 0 ;
                      this.selectedReceiptList.forEach(item => {if (item.CHECKED == '1')   t = t + 1});
                      return t;     
               }, // getSelectedExpVatTotal 
              
              boxCheckboxClick : function (item, e) {
                  
                  if (item.EXPENSE_NO == "") {
                       customAlert('','','비용 등록 후 <br> 결재할 수 있습니다.');
                       return false;
                  }else if (item.APPROVE_STATUS == "2" || item.APPROVE_STATUS == "4"  ){
                      customAlert('','알림', item.APPROVE_STATUS_NM +'(제목:'+ item.REPORT_TITLE +') 중입니다.');
                      return false;                   
                  }
              },
              setTravelDuration : function (fr, to, duration) {
            	  // type새로 호출
                  this.$refs.BizTripType.setDropDown(fr); 
	              $('#'+this.pgmid+'BIZTRIP_DAYS').val(duration);
            	  
                  this.bizTripCalSum = 0;
                  this.BIZTRIP_RATES = [];
	              var type = $("input[name='"+ this.biztripCalTypeName + "']:checked").val()
	              
// 	        	  this.changeTripType();
                  this.biztripCalTypeClick(type);
            	  
              },
              
              changeApproveLine : function(args,items, index ) {
     
            	   var o = {};
            	   o.APPROVE_ID = args[2].CODE;
                  
                  var param = {
                          svcId:"getUserDetail",
                          strUrl:"/ec/common/syscommon/userInformation/getUserDetail", 
                          inDs :  "" ,  
                          param : o, 
                          pCall : this.changeApproveLineCallback, 
                          pLoad : true,
                          pData : { ITEMS : items , INDEX : index }
                      };
                     ajaxReadJsonData(param);  
                  
              },
              changeApproveLineCallback : function(svcId, data, pData ) {
            	  
            	 if (data.ds_master.data.length == 0){
            	      customAlert("","","사용자 아이디와 연결된 결재정보가 없습니다.(부서, 사원번호)");
            	      return false;
            	 }
                  var o = {};
                  o.APPROVE_ID = data.ds_master.data[0].USER_ID;
                  o.APPROVE_NAME = data.ds_master.data[0].USER_NM;
                  o.EMAIL = data.ds_master.data[0].EMAIL;  
                  o.APPROVE_LINE_TP = "LINE10"; 
                  
                  o.DEPT_CD = data.ds_master.data[0].DEPT_CD;  
                  o.DEPT_NM = data.ds_master.data[0].DEPT_NM;   
                  o.PROCESS_APPRV_GRP = this.processApprvGrp;
                  o.APPROVE_STEP = pData.INDEX+1;
                  
                  o.APPROVE_TP = '3';
                  o.APPROVE_TP_NM = '결재';
                  
                  var len = pData.ITEMS.APPROVE_LIST.length;
                  if (len == 0 ) {
                	  o.APPROVE_ORDER = 0;
                  }else{
                      var item = pData.ITEMS.APPROVE_LIST[pData.ITEMS.APPROVE_LIST.length-1];
                      o.APPROVE_ORDER = item.APPROVE_ORDER + 1;     	  
                  }

                  pData.ITEMS.APPROVE_LIST.push(o);
            	  
              },
              
              
              //결재 
              user2ButtonOnClick  : function (r) {
                  this.selectedReceiptList = this.receiptList.filter( function (item) { return item.CHECKED == '1' && item.REPORT_TP == r.REPORT_TP } );
                  if (this.selectedReceiptList.length == 0 ) {
                     customAlert("","","선택한 건이 없습니다."); 
                     return false;
                  }    
                  
                  
	               this.$refs.receiptapprove.setObj(this.selectedReceiptList);
	               this.$refs.receiptapprove.modDh = this.modDh; 
	               this.$refs.receiptapprove.setReportTp(r.REPORT_TP);
            	   this.$refs.receiptapprove.openModal(); // 업무별로 별도 처리해야할 건
            	  
              },
              getReportConfig : function(reportTp) {
            	  var param = {
                          svcId:"getReportConfig",
                          strUrl:"/ex/expense/expensemst/getReportConfig",   
                          param : {REPORT_TP : reportTp},
                          pCall : this.getReportConfigCallback,  
                          pLoad : true
                      };
            	  
                      //트랜젝션 실행
                      ajaxReadJsonData(param);  	  
              },
              getReportConfigCallback : function(svc, data) {
            	  $('#'+this.pgmid+ 'REPORT_TITLE').val(data.ds_master.data[0].REPORT_TITLE);
            	  this.processApprvGrp  = data.ds_master.data[0].PROCESS_APPRV_GRP
              },
              
             // 리포트 관리항목
              getReportMng : function(reportTp) {
              	 
            	  var param = {
                          svcId:"getReportMng",
                          strUrl:"/ex/expense/expensemst/getReportMng",   
                          param : {REPORT_TP : reportTp},
                          pCall : this.getReportMngCallback,  
                          pLoad : true
                      };
            	  
                      //트랜젝션 실행
                      ajaxReadJsonData(param);       	 
              }, //getReportMng
              getReportMngCallback : function(svc , data) {
            	  this.reportMngList = data.ds_master.data;
              }, //getReportMngCallback      
              
              
              
              changedDistanceTp : function(type) {
                  this.distanceCalcType = type;
                  //지도(티맵)
                  let ref = this;
                  this.$nextTick(function () {
                         if (ref.distanceCalcType=='2') this.initMap() // window.dispatchEvent(new Event('resize'));
                  });
              },
              
              odoChange : function() {
                  $('#'+this.pgmid+'DISTANCE').val( $('#'+this.pgmid+'ODOMETER_END').val() -  $('#'+this.pgmid+'ODOMETER_START').val()  );
                  this.changeGasRate();
              },
              
              changeGasRate : function() {
                   var ref = this;            	  
            	   this.$nextTick(function() {
                 	  var rate =  dropdownRenderer['getGasRate'][ref.$refs.getGasRate.getIndex()].REF1;
                      $('#'+ref.pgmid+'EXPENSE_AMT_GAS').val(ref.$options.filters.numberformat( Math.round(rate * to_number($('#'+ref.pgmid+'DISTANCE').val())), '0,000') );
            	   } )
              },              
              
              changeTripType : function() {
                  var rate =  dropdownRenderer['getBizTripType'][this.$refs.BizTripType.getIndex()].REF1; // REF2 :    , BIZTRIP_RATE AS REF1  , CURRENCY_CD AS REF2
                  this.currencyCd = dropdownRenderer['getBizTripType'][this.$refs.BizTripType.getIndex()].REF2; // 화폐코드
                  this.curCdChange();
                 // this.setAmt();
                  //$('#'+this.pgmid+'EXPENSE_AMT_TRAVEL').val(rate * $('#'+this.pgmid+'BIZTRIP_DAYS').val()  );
              },   
              
              exBelongingChanged : function(type) {
                  this.tempCurItem.BELONGING_TP = type;
                  this.$forceUpdate();  // 개별 component forceUpdate로 변경
              },
              initMap : function (){
            	  
            	 $("#"+this.pgmid+"map_div").children().remove();
                 this.mapOil = new Tmapv2.Map(this.pgmid+"map_div", {
                     center : new Tmapv2.LatLng(37.570028, 126.986072),
                     width : "100%",
                     height : isMobile() ? "250px" : "650px",
                     zoom : 15,
                     zoomControl : true,
                     scrollwheel : true,
                     httpsMode: true,
                 });
                 
                     this.tempCurItem.FILE_NO = "";
                     
                     var ref = this;
                     this.$forceUpdate();
                     this.$nextTick(function () {
	                   	   setTimeout(function(){  
	                   		    window.dispatchEvent(new Event('resize'));
	                   		    
	                       }, 500);
                      });
                 
              },
              // 변경된 결재라인 적용
              setChangedAppvLine: function (){
            	  $('#'+this.pgmid+'approvemp').modal("hide");
            	  this.approveLines = [];
            	  this.approveLines = deepClone(this.copy_approveLines);
              
              }, //   setChangedAppvLine          
              // changeapprovemp-modal
              changeapprovemp : function (){
            	this.copy_approveLines = [];
            	this.copy_approveLines = deepClone(this.approveLines);
            	
            	    $('#'+this.pgmid+ 'approvemp').modal('show');

                },
                
                searchApprovempLine : function() {
                	var param = {
	                        svcId:"getApprovempLineList",
	                        strUrl:"/fi/exp/approvemp/getApprovempLineList",   
	                        param : {PROCESS_APPRV_GRP: this.processApprvGrp},
	                        pCall : this.searchApprovempDetailCallBack,  
	                        pLoad : true
	                    };
	                    
	                    //트랜젝션 실행
	                    ajaxReadJsonData(param);
                },
                
                saveChangedApprovemp :  function() {
                	// 저장할 데이터 만들기
		               var o = [];
		               this.copy_approveLines.forEach( function (items, index) {
		            	      o.push(...items.APPROVE_LIST);
		                 });
		                	o.splice(0,1);
    			    
                    var param = {
                            svcId:"saveApproveLine",
                            strUrl:"/ex/expense/approve/saveApproveLine", 
                            inDs :  "" ,
                            param : { data : o , PROCESS_APPRV_GRP : this.processApprvGrp },
                            pCall : this.saveChangedApprovempCallback, 
                            pLoad : true          
                        };    
                    
                 ajaxReadJsonData(param);  
    			    
                }, 
                
                saveChangedApprovempCallback : function(svc, data) {
                	saveGritter();
                     	
                },
//                 // 드롭다운 완료 이벤트
//                dropEndEventHandler : function (e) {
//             		var pidToDrop = e.pidToDrop.slice(-1);
//             		var rowIndex = e.toRowIndex;
//             		var rowCount = AUIGrid.getRowCount(this.gridapprovemp3);
//             		var rowCount2 = AUIGrid.getRowCount(this.gridapprovemp4);
//             		if(pidToDrop == '3') {
//                 		AUIGrid.updateRow(this.gridapprovemp3, {"APPROVE_TP" : "결재", "APPROVE_STEP" : "1", "ORD" : 0, "PROCESS_APPRV_GRP" : this.processApprvGrp}, rowIndex);
//             		} else if (pidToDrop == '4') {
//             			AUIGrid.updateRow(this.gridapprovemp4, {"APPROVE_TP" : "결재", "APPROVE_STEP" : "2", "ORD" : 0, "PROCESS_APPRV_GRP" : this.processApprvGrp}, rowIndex);
//             		}
//                },
              
//              auiGridSelectionChangeHandler : function(event) {
//        		    // 200ms 보다 빠르게 그리드 선택자가 변경된다면 데이터 요청 안함
//        		    if(this.timerId) {
//        		        clearTimeout(this.timerId);
//        		    }
//        		    var ref = this;
       		    
//        		 this.timerId = setTimeout(function() {
//        		        // 선택 대표 셀 정보 
//        		        var primeCell = event.primeCell;
       		        
//        		        // 대표 셀에 대한 전체 행 아이템
//        		        var rowItem = primeCell.item;
//        		        var dept_cd = rowItem.DEPT_CD; // 선택한 행의 고객 ID 값
                       
//        		        if (ref.masterBeforeRowIndex != primeCell.rowIndex) {
//        		            ref.searchApprovempDetail(dept_cd, primeCell.rowIndex, primeCell.columnIndex  );
//        		        }
//        		        if (ref.masterBeforeRowIndex == primeCell.rowIndex && ref.masterBeforeColIndex != primeCell.columnIndex) {
//        		        ref.masterBeforeColIndex = primeCell.columnIndex ;
//        		        }
//        		    }, 200);  // 현재 200ms 민감도....환경에 맞게 조절하세요.		  
//        		  },//auiGridSelectionChangeHandler
       		   
//        		auiGridDropEndBeforeEventHandler : function(event) {
//           		if(event.items.length == 0) return false;
          		
//           		// 이벤트의 isMoveMode 속성을 false 설정하면 행 복사를 합니다.
//           		event.isMoveMode = false;
          		
//           		// 드랍되는 그리드의 PID
//           		var pidToDrop = event.pidToDrop;
//           		var item = event.items[0]; // 드래깅 되고 있는 첫번째 행
//           		var notHave = AUIGrid.isUniqueValue(pidToDrop, "EMP_NO", item.EMP_NO); // 이미 존재하는지 검사
//           		if(!notHave) {
//           			customAlert("", "", "이미 존재하는 행입니다.");
//           			return false;
//           		}
//           		return true; // 만약 return false 를 하게 되면 드랍 행위를 하지 않습니다.(즉, 기본 행위를 안함)
//           	},
          	
          	selectApprovemp : function(apprCheck) {         		
          		var apprArray = apprCheck.split("-");
          		
          		// 그리드 데이터에서 isActive 필드의 값이 Active 인 행 아이템 모두 반환
          		var activeItems = AUIGrid.getItemsByValue(this.gridapprovemp2, "isActive", "Active");

          		for(var i=0, len=activeItems.length; i<len; i++) {
          			// 중복된 행이 있는지 확인
          			var emp_no = activeItems[i].EMP_NO // 아이디만 따로 보관해서 alert 출력
          			if(apprArray[0] == "1"){
           		    	var notHave1 = 	AUIGrid.isUniqueValue(this.gridapprovemp3, "EMP_NO", emp_no); // 이미 존재하는지 검사
           		    	if(!notHave1) {
                  			customAlert("", "", "중복되는 행이 존재합니다.");
                  			return false;
                  		}
           		    } else if(apprArray[0] == "2") {
           		    	var notHave2 =	AUIGrid.isUniqueValue(this.gridapprovemp4, "EMP_NO", emp_no); // 이미 존재하는지 검사
           		    	if(!notHave2) {
                  			customAlert("", "", "중복되는 행이 존재합니다.");
                  			return false;
                  		}
           		    }
          		}
          		
          		for(var i=0, len=activeItems.length; i<len; i++) {
          			var item = {APPROVE_STEP : apprArray[0],
          					PROCESS_APPRV_GRP : this.processApprvGrp,
          					DEPT_CD : activeItems[i].DEPT_CD,
          					DEPT_NM : activeItems[i].DEPT_NM,
          					EMP_NO : emp_no,
          					EMP_NM : activeItems[i].EMP_NM,
          					APPROVE_TP : apprArray[1],
          					ORD : 0
          				};
          			if(apprArray[0] == "1"){
           		    	AUIGrid.addRow(this.gridapprovemp3, item, "last"); 
           		    } else if(apprArray[0] == "2") {
           		    	AUIGrid.addRow(this.gridapprovemp4, item, "last");
           		    } 
          		}
          			
      		  },//selectApprovemp
       		  
       		searchApprovempDetail : function(dept_cd, rowIndex, colIndex) {
       			var param = {
                        svcId:"searchApprovempDetail",
                        strUrl:"/fi/exp/approvemp/searchApprovempDetail",   
                        param : {DEPT_CD: dept_cd},
                        pCall : this.searchApprovempDetailCallBack,  
                        pLoad : true
                    };
                    
                    this.masterBeforeRowIndex = rowIndex;
                    this.masterBeforeColIndex = colIndex;
                    
                    //트랜젝션 실행
                    ajaxReadJsonData(param);
       		},
       		
       		searchApprovemp : function() {
       			var param = {
                        svcId:"searchApprovempDetail",
                        strUrl:"/fi/exp/approvemp/searchApprovempDetail",   
                        param : serializeObjectX($('#[[${param.pgm_id}]]')),
                        pCall : this.searchApprovempDetailCallBack,  
                        pLoad : true
                    };
                    
                    //트랜젝션 실행
                    ajaxReadJsonData(param);
       		},
       		
       	// 구해진 칼럼 사이즈를 적용 시킴
       		searchApprovempDetailCallBack : function (svcId, data, errCd, msgTp, msgCd, msgText) {
       			if(svcId == "searchApproveDept") {
       				this.$refs.gridapprovemp.setGridData(data["ds_master"]['data']);
       			} else if(svcId == "getApprovempLineList") {
       				this.$refs.gridapprovemp3.setGridData(data["approvempLine1"]['data']);
       				this.$refs.gridapprovemp4.setGridData(data["approvempLine2"]['data']);
       			} else if(svcId == "searchApprovempDetail") {
       				this.$refs.gridapprovemp2.setGridData(data["ds_master"]['data']);
       				if(data["ds_master"]['data'].length > 0){
	       				if(data["ds_master"]['data'][0].WORDCHECK == ""){
	       					$("#"+this.pgmid+"DEPT_NM_A").text(data["ds_master"]['data'][0].DEPT_NM);
	       				} else {
	       					$("#"+this.pgmid+"DEPT_NM_A").text("");
	       				}
       				} else {
       					$("#"+this.pgmid+"DEPT_NM_A").text("");
       				}
       				this.approvemp_checkall = false;
       			} else if(svcId == "save") {
       				this.searchApprovempLine();
       				saveGritter();
       				customAlert('', '', '결재선이 변경되었습니다');
       				// 전체 데이터를 대상으로 isActive 필드를 "Inactive" 값으로 변경
           			AUIGrid.updateRowBlockToValue(this.gridapprovemp2, 0, AUIGrid.getRowCount(this.gridapprovemp2)-1, "isActive", "Inactive");
 
       			}
       			
       			
       			// 결재선 재조회 : 2021.8.8 추가(hcho)
       			var o = this.receiptList.find( function (item) { return item.CHECKED == '1' } );
       			this.getApproveLine(o); // 
       			
       		},
       		  //changeapprovemp-modal methods end
               
               
 
              resetApproveLine : function (){
               
            	this.approveLine = [];  
                o = {}; 
                o.APPROVE_ID = '[[${session.g_userId}]]';  
                o.APPROVE_NAME = '[[${session.g_userNm}]]';
                o.DEPT_NM = '[[${session.g_deptNm}]]';
                o.APPROVE_ORDER = 0;
                o.APPROVE_TP = '1';
                o.APPROVE_TP_NM = '기안';
                o.APPROVE_YN = '1';
                
               this.approveLine.push(o);
              },
              
              setStartLoc : function () {
                    //  window.dispatchEvent(new Event('resize'));
                  var addr = $("#"+this.pgmid+'StartAddr').val();
                  
                 if (isEmpty(addr)) {
                     customAlert("","","<span class='f-s-15'><strong>출발지를 검색하세요.</strong></span>");
                     return false;
                 }
                  
                  var optionPoi = {
                            "searchKeyword" : addr,
                            "resCoordType" : "WGS84GEO",
                            "reqCoordType" : "WGS84GEO",
                            "count" : 1
                  }
                  var param = {
                          method : "GET",
                          svcId:"setStartLoc",
                          strUrl:this.tmapApiUrls.SET_LOCATION, 
                          param : optionPoi, 
                          pCall : this.setStartLocCallback, 
                          pLoad : true   ,
                      };
                  
                    ajax_tmap(param);                 
              },
              
              setStartLocCallback : function (svcId, data, errCd, msgTp, msgCd, msgText){
                  
                  if (isEmpty(data) == true){
                      customAlert("","","검색 결과가 없습니다.. 자세한 주소를 입력하세요.");
                      return;
                  }
                  
                   this.initMap();
                   
                   var lat = data.searchPoiInfo.pois.poi[0].frontLat;
                   var lon = data.searchPoiInfo.pois.poi[0].frontLon;
                   var addr = data.searchPoiInfo.pois.poi[0];
                   this.curItem.START_ADDR = "("+ addr.name + ")" +   addr.upperAddrName + ' ' +addr.middleAddrName + ' '+addr.roadName + ' ' + addr.firstBuildNo + ((addr.secondBuildNo=="") ? "" : ((addr.secondBuildNo=="0") ? "" : ('-'+ addr.secondBuildNo)));
                   this.curItem.START_LAT = lat;
                   this.curItem.START_LONG = lon;
                   this.addMarker("llStart", lon, lat);
                   
                   this.mapOil.setCenter(new Tmapv2.LatLng(lat,lon));
                   
                   var ref = this;
                   this.marker_start.addListener("dragend", function (evt) {
                	   
                       ref.marker_start.lat = evt.latLng._lat;
                       ref.marker_start.lon = evt.latLng._lng;//lon;
                       ref.searchAddr('searchMarkerStartAddr',ref.marker_start);
                   });
                   
              },
//               mapMarkerOnDown : function () {
//                this.mapOil.ctrl_nav.dragPan.deactivate();//드래그 액션 비활성화
//               },
//               mapMarkerOnUp : function () {
//                this.mapOil.ctrl_nav.dragPan.activate();//드래그 액션 활성화
//               },              
              setEndLoc : function () {
            	  
//             	  if (isEmpty(this.marker_start.lat)){ 
//                       customAlert("","","<span class='f-s-15'><strong>출발지를 검색하세요.</strong></span>");
//                       return;
//                   }
            	  
//                   if(this.marker_pass.length > 0) {
//                 	  var inputCheck = false
// 	                  for(idx in this.marker_pass) {
// 	                	  if(isEmpty(this.marker_pass[idx].lat)) {
// 	                		  inputCheck = true;
// 	                		  break;
// 	                	  }
// 	          		  }
//                 	  if(inputCheck) {
// 	               		  customAlert("","","<span class='f-s-15'><strong>경유지를 검색하세요.</strong></span>");
// 	                      return false;
//                 	  }
//                   }
                  
                  var addr = $("#"+this.pgmid+'EndAddr').val();
                  if (isEmpty(addr)) {
                      customAlert("","","<span class='f-s-15'><strong>도착지를 입력해주세요.</strong></span>");
                      return false;
                  }
                  
                  var optionPoi = {
                            "searchKeyword" : addr,
                            "resCoordType" : "WGS84GEO",
                            "reqCoordType" : "WGS84GEO",
                            "count" : 1
                  }
                  var param = {
                          method : "GET",
                          svcId:"setEndLoc",
                          strUrl: this.tmapApiUrls.SET_LOCATION, 
                          param : optionPoi, 
                          pCall : this.setEndLocCallback, 
                          pLoad : true   ,
                      };
                  
                    ajax_tmap(param);    
              },    
              
              setEndLocCallback : function (svcId, data, errCd, msgTp, msgCd, msgText){
                  
                  if (isEmpty(data) == true){
                      customAlert("","","검색 결과가 없습니다. 자세한 주소를 입력하세요.");
                      return;
                  }
                   this.initMap();
                   var lat = data.searchPoiInfo.pois.poi[0].frontLat;
                   var lon = data.searchPoiInfo.pois.poi[0].frontLon;
                   var addr = data.searchPoiInfo.pois.poi[0];
                   this.curItem.END_ADDR = "("+ addr.name + ")" +   addr.upperAddrName + ' ' +addr.middleAddrName + ' '+addr.roadName + ' ' + addr.firstBuildNo + ((addr.secondBuildNo=="") ? "" : ((addr.secondBuildNo=="0") ? "" : ('-'+ addr.secondBuildNo)));
                   this.curItem.END_LAT = lat;
                   this.curItem.END_LONG = lon;

//                    $("#"+this.pgmid+"EndAddr").val(this.curItem.END_ADDR);
                   
                   this.addMarker("llEnd", lon, lat);
                   this.mapOil.setCenter(new Tmapv2.LatLng(lat,lon));
                   
                   var ref = this;
                   this.marker_end.addListener("dragend", function (evt) {
                       ref.marker_end.lat = evt.latLng._lat;
                       ref.marker_end.lon = evt.latLng._lng;//lon;
                       ref.searchAddr('searchMarkerEndAddr',ref.marker_end);
                   });
              },
              
              
              //핀 찍기
              addMarker : function (status, lon, lat, draggable) {
              		if(typeof draggable == "undefined") draggable = true
					//출도착경유구분
					//이미지 파일 변경.
					var addrDtl = '';
					
					if(status == "llStart") {
						imgURL = '/custom/image/pin_r_m_s.png';
						addrDtl = this.curItem.START_ADDR;
						if (this.marker_start.isOn){
	                       this.marker_start.setMap(null) ;
	                       this.marker_start.isOn = false;
	                    }
					} else if (status == "llPass") {
						imgURL = '/custom/image/pin_b_m_p.png';
						addrDtl = this.curItem_pass[this.curPassIndex].PASS_ADDR;

						if(this.marker_pass.length > 0 && !isEmpty(this.marker_pass[this.curPassIndex])) {
							if(this.marker_pass[this.curPassIndex].isOn){
		                       this.marker_pass[this.curPassIndex].setMap(null) ;
		                       this.marker_pass[this.curPassIndex].isOn = false;
	                    	}
						} 
					} else if (status == "llEnd") {
						imgURL = '/custom/image/pin_r_m_e.png';
						addrDtl = this.curItem.END_ADDR;
						if (this.marker_end.isOn){
	                       this.marker_end.setMap(null) ;
	                       this.marker_end.isOn = false;
	                    };
					}
					
					var marker = new Tmapv2.Marker({
						position: new Tmapv2.LatLng(lat,lon),
						icon: imgURL,
						iconSize : new Tmapv2.Size(24, 38),
                        title: addrDtl,
                        label: addrDtl,
                        map : this.mapOil,
                        draggable : draggable,
					});
					
					if(status == "llStart") {
						this.marker_start = marker;
						this.marker_start.lat = lat;
		                this.marker_start.lon = lon;
		                this.marker_start.isOn = true;
					} else if (status == "llPass") {
						this.marker_pass[this.curPassIndex] = marker;
						this.marker_pass[this.curPassIndex].lat = lat;
		                this.marker_pass[this.curPassIndex].lon = lon;
		                this.marker_pass[this.curPassIndex].isOn = true;
					} else if (status == "llEnd") {
						this.marker_end = marker;
						this.marker_end.lat = lat;
		                this.marker_end.lon = lon;
		                this.marker_end.isOn = true;
					}
			  },
              
              // 주소 찾기
              searchAddr: function(svcId, o) {
            	  
              // https://apis.openapi.sk.com/tmap/pois?version=1&format=json
//                   url = 'https://apis.openapi.sk.com/tmap/pois?version=1&format=json&callback=result&appKey=l7xx2622f7305ea44b64b4c8e79bfce422c0&coordType=WGS84GEO&addressType=A04';

            	  url = this.tmapApiUrls.GET_ADDRESS+'&appKey='+tmap_apikey+'&coordType=WGS84GEO&addressType=A04';
                  url += '&lon=' + o.lon ;
                  url += '&lat=' + o.lat ;
                  var param = {
                          svcId:svcId,
                          strUrl:url, 
                          pCall : this.searchAddrCallback, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                  ajaxExternalJsonData(param); 	  
              },
              searchAddrCallback: function(svcId, data) {
            	  
            	  if (isEmpty(data)) {
            		 customAlert("","","주소를 찾을 수 없습니다."); 
            	     return;
            	  }
            	  
            	 if (svcId == "searchMarkerStartAddr") {
            	     this.curItem.START_ADDR = data.addressInfo.fullAddress;
            	     this.$forceUpdate();
            	 }else if (svcId == "searchMarkerEndAddr") {
            	     this.curItem.END_ADDR = data.addressInfo.fullAddress;
            	     this.$forceUpdate();
            	 } else if (svcId == "searchMarkerPassAddr") {
            		 this.curItem_pass[this.curPassIndex].PASS_ADDR = data.addressInfo.fullAddress;
            	     $('#'+this.pgmid+'PassAddr'+this.curPassIndex).val(this.curItem_pass[this.curPassIndex].PASS_ADDR);
            	     forceUpdate
            	 } else if (svcId=="searchStartAddr_fu"){
                     this.startAddr = data.addressInfo.fullAddress;
                     this.curItem.START_ADDR = this.startAddr;
                     this.$forceUpdate();
                 } else if (svcId=="searchPassAddr_fu") {
	               	 this.passAddr[this.curPassIndex] = data.addressInfo.fullAddress;
	               	 this.curItem_pass[this.curPassIndex].PASS_ADDR = this.passAddr[this.curPassIndex];
	               	 $('#'+this.pgmid+'PassAddr'+this.curPassIndex).val(this.passAddr[this.curPassIndex]);
	               	 this.$forceUpdate();
                 } else if (svcId=="searchEndAddr_fu"){
                     this.endAddr = data.addressInfo.fullAddress;  
                     this.curItem.END_ADDR = this.endAddr;
                     this.$forceUpdate();
                 }
              },
              searchPathRequiredCheck  : function() {

                  var s_lat = $('#'+this.pgmid+'START_LAT').val(); // Y
                  var e_lat = $('#'+this.pgmid+'END_LAT').val(); // Y
                  
                  //경유지 추가
                  var p_lat;
                  var index;
               	  for(idx in this.curItem_pass) {
               		  p_lat = $('#'+this.pgmid+'PASS_LAT'+idx).val();
               		  index = idx;
               		  if (isEmpty(p_lat)) { break;}
               	  }
            	  
            	  if (isEmpty(s_lat)){ 
                      customAlert("","","<span class='f-s-15'><strong>출발지를 검색하세요.</strong></span>");
                      return false;
                  }
                  if (isEmpty(e_lat)){ 
                      customAlert("","","<span class='f-s-15'><strong>도착지를 검색하세요.</strong></span>");
                      return false;
                  }  
                  
                  if (this.curItem_pass.length > 0 && isEmpty(p_lat)){ 
                      customAlert("","","경유지를 검색하세요.");
                      return false;
                  }  
                  
                  return true;
                  
              },
              searchPath : function() {
            	  
            	  $('#'+this.pgmid+'DISTANCE').val(0);
            	  
            	  
            	  if ( !isEmpty(this.curItem.START_LAT) ) { // 기존 저장 건
            		  this.initMap();
            	  }
            	  
            	  var ref = this;
              	   setTimeout(function(){  
              		 ref.searchPathCallback()
                  }, 500);    
            	  
              }, 
              
              searchPathCallback : function() {
                  
            	  if ( !isEmpty(this.curItem.START_LAT) ) { // 기존 저장 건
            		  this.addMarker("llStart", this.curItem.START_LONG, this.curItem.START_LAT, false);
            		  this.addMarker("llEnd", this.curItem.END_LONG, this.curItem.END_LAT, false);
            		  
// 	                   var ref = this;
// 	                   if (!this.curItem_pass.forEach(
// 		                  	function (item, index){
// 		                  		if (isEmpty(item.LAT)) {        
// 		  	               		  customAlert("","","경유지를 검색하세요.(3)"+index);
// 			                      return false;		 
// 		                  		}
// 		                  		ref.curPassIndex = index;
// 		                  		ref.addMarker("llPass", item.LONG, item.LAT, false);
// 		                  	}
// 	                   )) { return false; }   
	                   
	                   for (const [index, item] of this.curItem_pass.entries()) {
	                	   
	                	   if (isEmpty(item.LAT)) {        
		  	               		  customAlert("","","경유지를 검색하세요.");
			                      return false;		 
		                  	}
		                  		this.curPassIndex = index;
		                  		this.addMarker("llPass", item.LONG, item.LAT, false);
		               }	   
	                	                
              }  
            	  
            	  
            	  if (isEmpty(this.marker_start.lat)){ 
                      customAlert("","","<span class='f-s-15'><strong>출발지를 검색하세요.</strong></span>");
                      return;
                  }
                  if (isEmpty(this.marker_end.lat)){ 
                      customAlert("","","<span class='f-s-15'><strong>도착지를 검색하세요.</strong></span>");
                      return;
                  }
                  
                  var passLeng = this.curItem_pass.length;
                  if(passLeng > 0) {
                	  var inputCheck = false
	                  for(idx in this.curItem_pass) {
	                	  if(isEmpty(this.marker_pass[idx])) {
	                		  inputCheck = true;
	                		  break;
	                	  }
	          		  }
                	  if(inputCheck) {
	               		  customAlert("","","경유지를 검색하세요.");
	                      return false;
                	  }
                  }
                  
                  showLoader();
                  
                  var distance = this.marker_start.getPosition().distanceTo(this.marker_end.getPosition());
                  
                  
                  var s_latlng = new Tmapv2.LatLng (this.marker_start.lat, this.marker_start.lon);
                  var e_latlng = new Tmapv2.LatLng (this.marker_end.lat, this.marker_end.lon);
                  this.curItem.START_LONG = this.marker_start.lon;
                  this.curItem.START_LAT = this.marker_start.lat;
                  this.curItem.END_LONG = this.marker_end.lon;
                  this.curItem.END_LAT = this.marker_end.lat;
                  
                  if(passLeng> 0) {
	               	  for(idx in this.marker_pass) {
	               		  this.curItem_pass[idx].LONG = this.marker_pass[idx].lon
	               		  this.curItem_pass[idx].LAT = this.marker_pass[idx].lat
	               		  $("#"+this.pgmid+"PASS_LONG"+idx).val(this.curItem_pass[idx].LONG)
	               		  $("#"+this.pgmid+"PASS_LAT"+idx).val(this.curItem_pass[idx].LAT)
	               	  }
                  }      
                  
                  this.curItem.PASS_ITEMS = this.curItem_pass;
                  
                  var optionObj = {
                      reqCoordType:"WGS84GEO", //요청 좌표계 옵셥 설정입니다.
                      resCoordType:"WGS84GEO",  //응답 좌표계 옵셥 설정입니다.
                      trafficInfo:"Y"
                  };
                  
                  if(passLeng > 0) {
                	  optionObj.passList = "";
                	  for(idx in this.marker_pass) {
                		  optionObj.passList = optionObj.passList + this.marker_pass[idx].lon + ", " +  this.marker_pass[idx].lat;
                	  	 if(idx < passLeng-1) optionObj.passList =  optionObj.passList + "_"
                	  }
                  }
                  
//                   this.searchAddr('searchStartAddr_fu',this.marker_start);
//                   if(passLeng > 0) {
//                 	  for(idx in this.marker_pass) {
//                 		  this.curPassIndex = idx;
//                 		  this.searchAddr('searchPassAddr_fu',this.marker_pass[idx]);
//                 	  }
//                   }
//                   this.searchAddr('searchEndAddr_fu',this.marker_end);                
                  
                  var params = {
                      onComplete:this.onComplete,
                      onProgress:this.onProgress,
                      onError:this.onError
                  };
                  
                  // TData 객체 생성
                  var tData = new Tmapv2.extension.TData();
              
                  // TData 객체의 경로요청 함수
                  tData.getRoutePlanJson(s_latlng, e_latlng, optionObj, params);     
              },
              
              onError : function () {
                  hideLoader();
                  customAlert("","","계산할 수 없습니다.");  
               },
               
               onProgress : function () {
//                    alert("onProgress");  
                },              
              onComplete : function (e) {
                    hideLoader();
                  
                    var jsonObject = new Tmapv2.extension.GeoJSON();
                    //var jsonForm = jsonObject.rpTrafficRead(e._responseData); //경유지가 있을 시 에러남
                    //var jsonForm = this.customedTrafficRead(e._responseData);
                    
                    // 총거리
                    var d = e._responseData.features[0].properties.totalDistance/1000;
                    
                    $('#'+this.pgmid+'DISTANCE').val(d)
                   //비용금액 재계산
                    this.changeGasRate();
                   
                   //교통정보 표출시 생성되는 LineColor 입니다.
//                     var trafficColors = {
//                         // 사용자가 임의로 색상을 설정할 수 있습니다.
//                         // 교통정보 옵션 - 라인색상
//                         trafficDefaultColor:"#000000", //교통 정보가 없을 때
//                         trafficType1Color:"#009900", //원할
//                         trafficType2Color:"#7A8E0A", //서행
//                         trafficType3Color:"#8E8111",  //정체
//                         trafficType4Color:"#FF0000"  //정체
//                     };

                   //this.initMap();
                    //drawingObject = new Tmapv2.extension.Drawing({map:this.mapOil});
                    //  drawingObject.clear();
                    
					//jsonObject.drawRoute(this.mapOil, jsonForm, trafficColors);
                    
                    var lat = (parseFloat(this.marker_start.lat)+parseFloat(this.marker_end.lat))/2;
                    var lon = (parseFloat(this.marker_start.lon)+parseFloat(this.marker_end.lon))/2;
                    
                   	this.mapOil.setCenter(new Tmapv2.LatLng(lat, lon));
                   	
                    this.drawData(e._responseData);
                    //this.mapOil.setZoom(14);
                    
                // 6. 경유지 최적화 결과 반경만큼 지도 레벨 조정
                   var newData = e._responseData.features;
                   PTbounds = new Tmapv2.LatLngBounds();
                   for (var i = 0; i < newData.length; i++) {
                       var mData = newData[i];
                       var type = mData.geometry.type;
                       var pointType = mData.properties.pointType;
                       if(type == "Point"){
                           var linePt = new Tmapv2.LatLng(mData.geometry.coordinates[1],mData.geometry.coordinates[0]);
                           PTbounds.extend(linePt);
                       } else {
                           var startPt,endPt;
                           for (var j = 0; j < mData.geometry.coordinates.length; j++) {
                               var linePt = new Tmapv2.LatLng(mData.geometry.coordinates[j][1],mData.geometry.coordinates[j][0]);
                               PTbounds.extend(linePt);
                           }
                       }
                   }
                   this.mapOil.fitBounds(PTbounds);                    
                   hideLoader();
                   
                   customAlert("","", "<h1 class='text-maintheme text-center f-s-20 f-w-600'>" + d +" km </h1>");
              }, // onComplete
              
              drawData : function (data){
            		//pin 찍기
            		//출발지
          			this.addMarker("llStart", this.curItem.START_LONG, this.curItem.START_LAT, false);
  
            		//경유지
            		if(this.marker_pass.length > 0) {
	            		for(idx in this.marker_pass) {
	            			this.curPassIndex = idx;
	            			this.addMarker("llPass", this.marker_pass[idx].lon, this.marker_pass[idx].lat, false);
	            		}
            		}
            		//도착지
            		this.addMarker("llEnd", this.curItem.END_LONG, this.curItem.END_LAT, false);
                    
            		var ar_line = [];
            		
            		for (var i = 0; i < data.features.length; i++) {
            			var feature = data.features[i];
            			//배열에 경로 좌표 저장
            			if(feature.geometry.type == "LineString"){
            				ar_line = [];
            				for (var j = 0; j < feature.geometry.coordinates.length; j++) {
            					var startPt = new Tmapv2.LatLng(feature.geometry.coordinates[j][1],feature.geometry.coordinates[j][0]);
            					ar_line.push(startPt);
            				}
            				var polyline = new Tmapv2.Polyline({
            			        path: ar_line,
            			        strokeColor: "#ff0000", 
            			        strokeWeight: 6,
            			        trafficDefaultColor:"#000000", //교통 정보가 없을 때
	                            trafficType1Color:"#009900", //원할
	                            trafficType2Color:"#7A8E0A", //서행
	                            trafficType3Color:"#8E8111",  //정체
	                            trafficType4Color:"#FF0000",  //정체
            			        map: this.mapOil
            			    });
            			}
            		}
            	},
              
              
              
              customedTrafficRead : function(t) {
	          		var e = [];
	          		var a = {};
	          		var i = {};
	          		var s = {};
	          		var jsonForm = [];
	          		
	          		for (var n = 0; n < t.features.length; n++) {
	          		    e = [];
	          		    a = {};
	          		    i = {};
	          		    s = {};
	          		    var r = t.features[n];
	          		    var o = r.geometry.coordinates;
	          		    var l = r.geometry.traffic;
	          		    i.nodeType = r.geometry.type;
	          		    i.pointType = r.properties.pointType;
	          		    if (i.nodeType == "Point") {
	          		        s.x = o[0];
	          		        s.y = o[1];
	          		        e.push(s)
	          		    } else {
	          		        var h = [];
	          		      	if(typeof l != 'undefined') {
		          		        for (var p = 0; p < l.length; p++) {
		          		            var d = parseInt(l[p][0]);
		          		            var u = parseInt(l[p][1]);
		          		            var m = l[p][2];
		          		            for (var c = d; c < u; c++) {
		          		                h.push(m)
		          		            }
		          		        }
	          		      	}
	          		        for (var p = 0; p < o.length; p++) {
	          		            s = [];
	          		            s.x = o[p][0];
	          		            s.y = o[p][1];
	          		            if (o.length - 1 == p) {
	          		                s.t = h[p - 1]
	          		            } else {
	          		                s.t = h[p]
	          		            } e.push(s)
	          		        }
	          		    } a.attributes = i;
	          		    a.geometry = e;
	          		    jsonForm.push(a)
	       			}
	          		return jsonForm
          	  },
          	  
          	  
          	  
//************************** ------------------ 유류비 - 경유지 추가 ------------------------ *******************************

			addPassLoc : function() {
            	
//               	if (isEmpty(this.marker_start.lat)){ 
//                       customAlert("","","<span class='f-s-15'><strong>출발지를 검색하세요.</strong></span>");
//                       return;
//                  }
              	
              	if(this.curItem_pass.length > 4) {
              		customAlert("","","경유지는 5개까지만 가능합니다.");
                    return;
              	}
              	
//               	if(this.curItem_pass.length > 0) {
//               		for(idx in this.curItem_pass) {
// 		              	if(isEmpty(this.curItem_pass[idx].PASS_ADDR)) {
// 		              		customAlert("","","<span class='f-s-15'><strong>경유지를 검색하세요.</strong></span>");
// 		                    return;
// 		              	}
//               		}
//               	}
              	
              	var o = {};
              	o.on = '';
              	this.curItem_pass.push(o);
            },
              
            deletePassLoc : function(delIndex) {
            	this.curItem_pass.splice(delIndex, 1);
            	this.marker_pass.splice(delIndex, 1);
            	this.initMap();
            },
              
            setPassLoc : function (index) {
               
//                if (isEmpty(this.marker_start.lat)){ 
//                    customAlert("","","<span class='f-s-15'><strong>출발지를 검색하세요.</strong></span>");
//                    return;
//                }
               
               var passAddr = $("#"+this.pgmid+'passAddr'+index).val();
               if (isEmpty(passAddr)) {
                   customAlert("","","경유지를 입력해주세요.");
                   return false;
               }
                
            	this.curPassIndex = index;  
                
                
                var optionPoi = {
                          "searchKeyword" : passAddr,
                          "resCoordType" : "WGS84GEO",
                          "reqCoordType" : "WGS84GEO",
                          "count" : 1
                }
                var param = {
                        method : "GET",
                        svcId:"setStopoverLoc",
                        strUrl:"https://apis.openapi.sk.com/tmap/pois?version=1&format=json", 
                        param : optionPoi, 
                        pCall : this.setPassLocCallback, 
                        pLoad : true   ,
                    };
                
                  ajax_tmap(param);                 
            },
            
            setPassLocCallback : function (svcId, data, errCd, msgTp, msgCd, msgText){
                
                if (isEmpty(data) == true){
                    customAlert("","","검색 결과가 없습니다.. 상세 주소를 입력하세요.");
                    return;
                }
                this.initMap();
                 var lat = data.searchPoiInfo.pois.poi[0].frontLat;
                 var lon = data.searchPoiInfo.pois.poi[0].frontLon;
                 var addr = data.searchPoiInfo.pois.poi[0];
                 
	             this.curItem_pass[this.curPassIndex].PASS_ADDR = "("+ addr.name + ")" + addr.upperAddrName + ' ' +addr.middleAddrName + ' '+addr.roadName + ' ' + addr.firstBuildNo + ((addr.secondBuildNo=="") ? "" : ((addr.secondBuildNo=="0") ? "" : ('-'+ addr.secondBuildNo)));

//                  this.curItem_pass[this.curPassIndex].PASS_ADDR = addrDtl;
//                  $("#"+this.pgmid+"PASS_LAT"+this.curPassIndex).val(lat);
//                  $("#"+this.pgmid+"PASS_LONG"+this.curPassIndex).val(lon);

			 	 this.curItem_pass[this.curPassIndex].LONG = lon;
				 this.curItem_pass[this.curPassIndex].LAT = lat;

                 $("#"+this.pgmid+"PASS_ADDR"+this.curPassIndex).val(this.curItem_pass[this.curPassIndex].PASS_ADDR);
                 
                 this.addMarker("llPass", lon, lat);
                 this.mapOil.setCenter(new Tmapv2.LatLng(lat,lon));
                 
                 var ref = this;
                 this.marker_pass[this.curPassIndex].addListener("dragend", function (evt) {
                     ref.marker_pass[this.curPassIndex].lat = evt.latLng._lat;
                     ref.marker_pass[this.curPassIndex].lon = evt.latLng._lng;//lon;
                     ref.searchAddr('searchMarkerPassAddr',ref.marker_pass[ref.curPassIndex]);
                 });        
            },
            
//             Tmap URL 저장
            getTmapApiUrls : function() {
       		  log('getTmapApiUrls');
       		  var o = localStorage.location
    			  var param = {
                         svcId: 'getTmapApiUrls',
                         strUrl: "/map/tmap/getTmapApiUrls", 
                         pCall : this.getTmapApiUrlsCallback, 
                         param : {},
                         pLoad : true          
                 };
                 //트랜젝션 실행
                 ajaxReadJsonData(param); 
        	  },
        	  
        	getTmapApiUrlsCallback : function(svcId, data) {
 				if(svcId == 'getTmapApiUrls') {
 					var urls = data.ds_master.data;
 					for(idx in urls) {
 						this.tmapApiUrls[urls[idx].URL_KEY] = urls[idx].URL_VALUE;
 					}
 				}	
 			  },
 			  
 			  
              
              
//************************** ------------------ 유류비 - 경유지 추가 END ------------------------ *******************************              

           
              auiOpenDetail : function (rowIndex, columnIndex, value, headerText, item) {

            	  var idx = this.receiptList.findIndex(i => i.ID == item.ID);
                  var template = '<a class="font-weight-bold icon-note" onclick="[[${param.pgm_id}]].(null,'   + idx + '); $(\'#[[${param.pgm_id}]]modal-detail\').modal(\'show\');" ></a>';     // '+ 'onclick="[[${param.pgm_id}]].openDetail('',' + rowIndex + ');"></a>';
                  return template; // HTML 형식의 스트
                  }, // auiPopupCode
              auiDeleteItem : function (rowIndex, columnIndex, value, headerText, item) {
            	  
            	  var idx = this.receiptList.findIndex(i => i.ID == item.ID);
            	  var template = '<a class="font-weight-bold icon-trash" onclick="[[${param.pgm_id}]].deleteDetail('   +  idx + '); " ></a>';     // '+ 'onclick="[[${param.pgm_id}]].openDetail('',' + rowIndex + ');"></a>';
                  return template; // HTML 형식의 스트
              }, // auiDeleteItem              
              deleteDetail : function (rowIndex){
              
                 this.deleteExpMst(this.receiptList[rowIndex],rowIndex );
              
              },
              setAuiDetail : function (rowIndex, columnIndex, value, headerText, item) {
                  
                    var template = "";
                      if (item.SOURCE_TP =="1" && (item.FILE_CNT > 0 || item.OCR_CNT > 0) ) { // 법인카드   v-if="item.FILE_CNT > 0 ||  (item.OCR_CNT > 0 && item.EXPENSE_NO == '')
                          template = "<i class='icon-picture text-center'></i>";
                      }else if (item.SOURCE_TP =="2"){ // 영수증
                         // item.DETAILS = "<i class='icon-picture icon-2x'></i>";
                          template = "<i class='icon-picture text-center'></i>";
                      }else if (item.SOURCE_TP =="3"){ // 일당
                         // template = this.$options.filters.dateformat(item.BIZTRIP_START,'card-week')+' ~ '+ this.$options.filters.dateformat(item.BIZTRIP_END,'card-week'); 
                      }else if (item.SOURCE_TP =="4"){ // 유류비
                         // template = this.$options.filters.numberformat(item.DISTANCE,'0,000')+'km';  
                          
                      }
                    return template;
                    
              }, // setAuiDetail
              
              setAuiDate : function (rowIndex, columnIndex, value, headerText, item) {
                  
                  return this.$options.filters.dateformat(item.RECEIPT_DT,'card-week')
                  
            }, // setAuiDetail
            
            setAuiTime : function (rowIndex, columnIndex, value, headerText, item) {
                
                 if (item.SOURCE_TP =="1") { // 법인카드
                    return this.$options.filters.dateformat(item.RECEIPT_DT,'card-time');
                 }else{
                     
                    return "";
                 }
                
          }, // setAuiDetailTime   
          expCheckboxRenderer : function () {
              
              var renderer = {
                      type : "CheckBoxEditRenderer",
//                       showLabel : false, // 참, 거짓 텍스트 출력여부( 기본값 false )
                      editable : true, // 체크박스 편집 활성화 여부(기본값 : false)
                      checkValue : "1", // true, false 인 경우가 기본
                      unCheckValue : "0",
//                       checkableFunction :  function(rowIndex, columnIndex, value, isChecked, item, dataField ) {

//                           if (item.EXPENSE_NO == ""){
//                               customAlert('','','비용등록 전 입니다.');
//                               return false;
//                           };
                          
//                          if (item.APPROVE_STATUS == "2" || item.APPROVE_STATUS == "4"){
//                                customAlert('','','결재 진행 중입니다.');
//                                return false;
//                          }else{
//                                return true;
//                          }; 
//                      },
        	            disabledFunction :  function(rowIndex, columnIndex, value, isChecked, item, dataField ) {
        	            	
        	            	if (isEmpty(item.EXPENSE_NO) || (item.APPROVE_STATUS == "2" || item.APPROVE_STATUS == "4")  ){
                          	return true;
                          };
                          
                          
      	           }     
              }    
              return renderer;
              
     }, // checkboxRenderer    
          
          
              detailTootip : function (rowIndex, columnIndex, value, headerText, item, dataField) { // :src="'/ec/common/syscommon/fileupload/downloadFile/'+item.FILE_NO" >
                       if (item.SOURCE_TP =="2") {
                           var str = "<img width='200' src='/ec/common/syscommon/fileupload/downloadFile/"+ item.FILE_NO +  "' >";
                       }else{
                            var str = value;
                       }
                    return str;
              },
              empNoChange : function (isvalid, codeId, item) {
                  
                  if (typeof item == 'undefined'){ 
                      this.tempCurItem.EXPENSE_EMP_NO = "";
                      this.tempCurItem.EXPENSE_EMP_NM = "";
                  }else{
                      this.tempCurItem.EXPENSE_EMP_NO = item.CODE;
                      this.tempCurItem.EXPENSE_EMP_NM = item.NAME;
                  }
               },//cardCostCenterCdChange
              costCenterCdChange : function (isvalid, codeId, item) {
                
                  if (typeof item == 'undefined'){ 
                     this.tempCurItem.CCTR_CD = "";
                     this.tempCurItem.CCTR_NM = "";
                 }else{
                     this.tempCurItem.CCTR_CD = item.CODE;
                     this.tempCurItem.CCTR_NM = item.NAME;
//                      this.tempCurItem.PS_CD = "";
//                      this.tempCurItem.PS_NM = "";                     
                 }

              },
              projectCdChange : function (isvalid, codeId, item) {
                   if (typeof item == 'undefined'){ 
                       this.tempCurItem.PS_CD = "";
                       this.tempCurItem.PS_NM = "";
                   }else{
                       this.tempCurItem.PS_CD = item.CODE;
                       this.tempCurItem.PS_NM = item.NAME;
//                        this.tempCurItem.CCTR_CD = "";
//                        this.tempCurItem.CCTR_NM = "";                     
                   }                   
                   
               },//c
              cardExpCdChange : function (isvalid, codeId, item) {
                  if (typeof item == "undefined") return ;
                  if (item.REF3 == '1') { //공제
                      this.tempCurItem.EXPENSE_AMT = String(Number(nvl(this.curItem.SUPPLY_AMT,0))+Number(nvl(this.curItem.ETC_AMT,0)));
                      this.tempCurItem.EXPENSE_VAT_AMT = String(Number(nvl(this.curItem.VAT_AMT,0)));
                      
                  }else{ // 2:무관, 3: 불공제
                      this.tempCurItem.EXPENSE_AMT = String(Number(nvl(this.curItem.SUPPLY_AMT,0))+Number(nvl(this.curItem.ETC_AMT,0))+Number(nvl(this.curItem.VAT_AMT,0)));
                      this.tempCurItem.EXPENSE_VAT_AMT = '0';
                  }
                  
                  $('#'+this.pgmid+'EXPENSE_AMT_CARD').val(this.$options.filters.numberformat( this.tempCurItem.EXPENSE_AMT ,'0,000'));
                  $('#'+this.pgmid+'EXPENSE_VAT_AMT_CARD').val(this.$options.filters.numberformat(this.tempCurItem.EXPENSE_VAT_AMT,'0,000') );
                  
                 this.tempCurItem.EXPENSE_CD = item.CODE;
                 this.tempCurItem.EXPENSE_NM = item.NAME;
              },
              expCdChange : function (isvalid, codeId, item) {
                 
                 if (typeof item == "undefined") return ;
                 this.tempCurItem.EXPENSE_CD = item.CODE;
                 this.tempCurItem.EXPENSE_NM = item.NAME;
                 this.tempCurItem.REPORT_TP = item.REF11;
                 this.tempCurItem.REPORT_TP_NM = item.REF15;
                 this.tempCurItem.APPROVE_LINE_TP = item.REF12;
                 this.tempCurItem.LIMIT_AMT_YN = item.REF13; 
                 this.tempCurItem.LIMIT_AMT = item.REF14; 
                 
              },
              
              receiptExpCdChange : function (isvalid, codeId, item) {
                  
                  this.expCdChange(isvalid, codeId, item);
                  
                  if (typeof item == "undefined") {
                      return false;
                  }
                  
                  if (this.curItem.SOURCE_TP == '1'){
                     this.cardExpCdChange(isvalid, codeId, item);
                  }
                  
                  this.setReceiptMng(item);
                  this.setReceiptAmt(item);
                  this.setReceiptAmtInput(item);
                  this.setReceiptCostCenter(item);
                  this.tempCurItem.EVID_YN = item.REF10;
              },
              
              setReceiptAmtInput : function (item) {
                  
                  if (item.REF5 == '1'){
//                       $("#"+this.pgmid+"CURRENCY_AMT").prop("disabled",true);
                      this.$refs.CURRENCY_AMT.setDisabled(true);
                      this.$refs.CURRENCY_AMT_PREPAY.setDisabled(true);
                      $("#"+this.pgmid+"RECEIPT_CURRENCY").prop("disabled",true);
                      $("#"+this.pgmid+"PREPAY_CURRENCY").prop("disabled",true);
                      
                  }else{
//                       $("#"+this.pgmid+"CURRENCY_AMT").prop("disabled",false);
                      this.$refs.CURRENCY_AMT.setDisabled(false);
                      this.$refs.CURRENCY_AMT_PREPAY.setDisabled(false);
                      $("#"+this.pgmid+"RECEIPT_CURRENCY").prop("disabled",false);
                      $("#"+this.pgmid+"PREPAY_CURRENCY").prop("disabled",false);
                  }
              },              
              setReceiptAmt : function (item) {
                 
                  if (item.REF5 == '1'){
//                       $("#"+this.pgmid+"CURRENCY_AMT").val(parseFloat(item.REF6));
                      this.$refs.CURRENCY_AMT.setData(parseFloat(item.REF6));
                      $("#"+this.pgmid+"RECEIPT_CURRENCY").val('[[${session.g_baseCurrencyCd}]]');
                      this.currencyCd = '[[${session.g_baseCurrencyCd}]]';
                      this.setAmt(); // 환율재계산 expense_amt
                  }
              },
              setReceiptCostCenter : function (item) {
                    // receiptbelongtype
                    // 0:없음
					// 1:코스트센터만가능
					// 2:프로젝트만가능
					// 3:코스트센터,프로젝트 둘중선택
					
					// receiptcosttype : 선택된 값(active) costcenter or project 
                  
                  this.receiptbelongtype = item.REF4;
                  this.curItem.BELONGING_TYPE = item.REF4;
                  $('#'+this.pgmid+'RECEIPT_CCENTER_TP').val(this.receiptbelongtype);  
                  $('#'+this.pgmid+'CARD_CCENTER_TP').val(this.receiptbelongtype);  
                  $('#'+this.pgmid+'GAS_CCENTER_TP').val(this.receiptbelongtype); 
                  $('#'+this.pgmid+'TRAVEL_CCENTER_TP').val(this.receiptbelongtype); 
                  $('#'+this.pgmid+'TOLL_CCENTER_TP').val(this.receiptbelongtype); 
                  $('#'+this.pgmid+'PREPAY_CCENTER_TP').val(this.receiptbelongtype); 
                  
                  if (this.receiptbelongtype == '1' || this.receiptbelongtype == '2' ){ 
                      $('#'+this.pgmid+'RECEIPT_CCENTER_TP').prop('disabled',true);
                      $('#'+this.pgmid+'CARD_CCENTER_TP').prop('disabled',true);
                      $('#'+this.pgmid+'GAS_CCENTER_TP').prop('disabled',true);
                      $('#'+this.pgmid+'TRAVEL_CCENTER_TP').prop('disabled',true);
                      $('#'+this.pgmid+'TOLL_CCENTER_TP').prop('disabled',true);
                      $('#'+this.pgmid+'PREPAY_CCENTER_TP').prop('disabled',true);                   
                      this.receiptcosttype = this.receiptbelongtype ;
                      
                  }else if(this.receiptbelongtype == '3'){
                     $('#'+this.pgmid+'RECEIPT_CCENTER_TP').prop('disabled',false);                     
                     $('#'+this.pgmid+"RECEIPT_CCENTER_TP").prop('selectedIndex', 0);
                     $('#'+this.pgmid+'CARD_CCENTER_TP').prop('disabled',false);                     
                     $('#'+this.pgmid+"CARD_CCENTER_TP").prop('selectedIndex', 0);   
                     $('#'+this.pgmid+'GAS_CCENTER_TP').prop('disabled',false);                     
                     $('#'+this.pgmid+"GAS_CCENTER_TP").prop('selectedIndex', 0);                         
                     $('#'+this.pgmid+'TRAVEL_CCENTER_TP').prop('disabled',false);                     
                     $('#'+this.pgmid+"TRAVEL_CCENTER_TP").prop('selectedIndex', 0);       
                     $('#'+this.pgmid+'TOLL_CCENTER_TP').prop('disabled',false);                     
                     $('#'+this.pgmid+"TOLL_CCENTER_TP").prop('selectedIndex', 0);                         
                     $('#'+this.pgmid+'PREPAY_CCENTER_TP').prop('disabled',false);                     
                     $('#'+this.pgmid+"PREPAY_CCENTER_TP").prop('selectedIndex', 0);                       
                     this.receiptcosttype = 1;
                  }
                  
                  if (item.REF7 == '1'){ // default costcenter
                      this.$refs.popupcostcenterreceipt.setData(item.REF8,item.REF9 );
                      this.$refs.popupcostcentercard.setData(item.REF8,item.REF9 );
                      this.$refs.popupcostcentergas.setData(item.REF8,item.REF9 );
                      this.$refs.popupcostcentertravel.setData(item.REF8,item.REF9 );
                      this.$refs.popupcostcentertoll.setData(item.REF8,item.REF9 );
                      this.$refs.popupcostcenterprepay.setData(item.REF8,item.REF9 );
                      this.costCenterCdChange(null,null,{CODE:item.REF8 , NAME:item.REF9})
                  }
                  
                  //receiptcosttype
              },              
              
              //관리항목 set
              setReceiptMng : function (item) {
 
                  if (typeof item == "undefined" || isEmpty(item.CODE) ) {
                      return false;
                  }

                  var p = {SOURCE_TP : this.curItem.SOURCE_TP , EXPENSE_CD : item.CODE, EXPENSE_NO : this.curItem.EXPENSE_NO};
                  var param = {
                          svcId:"getMngList",
                          strUrl:"/ex/expense/expensemst/getExpMngList", 
                          inDs :  "" ,  
                          param : p, 
                          pCall : this.getMngListCallback, 
                          pLoad : true,
                          async : false,
                      };
                      //트랜젝션 실행
                     ajaxReadJsonData(param);             
              },
              
              getMngListCallback : function (svcId, data, errCd) {
                  
                      this.receiptMngList = data.ds_master.data;
                      //  관리항목
                      var ref = this;
                      
                      this.$nextTick(function () {
                      
                      if (ref.receiptMngList.length > 0){
                             if (ref.curItem.SOURCE_TP == "1"){ // card
                                 ref.receiptMngList.forEach(item => {  
                                          if (item.INPUT_FORMAT_CD == '01') { 
                                              ref.$refs['popupcardmng'+item.MNG_CD][0].setData(item.MNGVAL_CD,item.MNGVAL_NM);
                                          }else if (item.INPUT_FORMAT_CD == '05' || item.INPUT_FORMAT_CD == '02' ){ // date , number
                                        	  ref.$refs['popupcardmng'+item.MNG_CD][0].setData(item.MNGVAL_NM);
                                          }else{
                                              $('#'+ref.pgmid+'popupcardmng'+item.MNG_CD).val(item.MNGVAL_NM); 
                                          }
                                      }); 
                             }else if (ref.curItem.SOURCE_TP == "2"){ //receipt
                                 ref.receiptMngList.forEach(item => {  
                                         if (item.INPUT_FORMAT_CD == '01') { 
                                             ref.$refs['popupreceiptmng'+item.MNG_CD][0].setData(item.MNGVAL_CD, item.MNGVAL_NM);
                                         }else if (item.INPUT_FORMAT_CD == '05' || item.INPUT_FORMAT_CD == '02' ){ // date , number
                                        	 ref.$refs['popupreceiptmng'+item.MNG_CD][0].setData(item.MNGVAL_NM);
                                         }else{
                                             $('#'+ref.pgmid+'popupreceiptmng'+item.MNG_CD).val(item.MNGVAL_NM); 
                                         }
                                 });     
                             }else if (ref.curItem.SOURCE_TP == "8"){ //prepay
                                 ref.receiptMngList.forEach(item => {  
                                         if (item.INPUT_FORMAT_CD == '01') { 
                                             ref.$refs['popupprepaymng'+item.MNG_CD][0].setData(item.MNGVAL_CD, item.MNGVAL_NM);
                                         }else if (item.INPUT_FORMAT_CD == '05' || item.INPUT_FORMAT_CD == '02' ){ // date , number
                                             ref.$refs['popupprepaymng'+item.MNG_CD][0].setData(item.MNGVAL_NM);   
                                         }else{
                                             $('#'+ref.pgmid+'popupprepaymng'+item.MNG_CD).val(item.MNGVAL_NM); 
                                         }
                                 });
                             }else if (ref.curItem.SOURCE_TP == "7"){ //atm
                                 ref.receiptMngList.forEach(item => {  
                                         if (item.INPUT_FORMAT_CD == '01') { 
                                             ref.$refs['popupatmmng'+item.MNG_CD][0].setData(item.MNGVAL_CD, item.MNGVAL_NM);
                                         }else if (item.INPUT_FORMAT_CD == '05' || item.INPUT_FORMAT_CD == '02' ){ // date , number
                                             ref.$refs['popupatmmng'+item.MNG_CD][0].setData(item.MNGVAL_NM);   
                                         }else{
                                             $('#'+ref.pgmid+'popupatmmng'+item.MNG_CD).val(item.MNGVAL_NM); 
                                         }
                                 });  
                             }else if (ref.curItem.SOURCE_TP == "5"){ //con
                                 ref.receiptMngList.forEach(item => {  
                                         if (item.INPUT_FORMAT_CD == '01') { 
                                             ref.$refs['popupconmng'+item.MNG_CD][0].setData(item.MNGVAL_CD, item.MNGVAL_NM);
                                         }else if (item.INPUT_FORMAT_CD == '05' || item.INPUT_FORMAT_CD == '02' ){ // date , number
                                             ref.$refs['popupconmng'+item.MNG_CD][0].setData(item.MNGVAL_NM);   
                                         }else{
                                             $('#'+ref.pgmid+'popupconmng'+item.MNG_CD).val(item.MNGVAL_NM); 
                                         }
                                 });  
                             }else if (ref.curItem.SOURCE_TP == "9"){ //gen
                                 ref.receiptMngList.forEach(item => {  
                                         if (item.INPUT_FORMAT_CD == '01') { 
                                             ref.$refs['popupgenmng'+item.MNG_CD][0].setData(item.MNGVAL_CD, item.MNGVAL_NM);
                                         }else if (item.INPUT_FORMAT_CD == '05' || item.INPUT_FORMAT_CD == '02' ){ // date , number
                                             ref.$refs['popupgenmng'+item.MNG_CD][0].setData(item.MNGVAL_NM);   
                                         }else{
                                             $('#'+ref.pgmid+'popupgenmng'+item.MNG_CD).val(item.MNGVAL_NM); 
                                         }
                                 });  
                             }
                             
                             // if
                      } // if
                  }); // nextTick
              },              
              
              previousItem : function () {
                  if (this.curItem.INDEX == 0) return;
                  this.openDetail(this.curItem, this.curItem.INDEX-1 );
              },
              
              nextItem : function () {
                  if (this.curItem.INDEX + 1 == this.receiptList.length) return;
                  this.openDetail(this.curItem, this.curItem.INDEX+1 );
              },
              
              deleteCardExpMst : function (item, index) { // 사적사용
            	  
              },
              deleteExpMst : function (item, index) { // click delete button
            	  
                  if (item.APPROVE_STATUS == "2" || item.APPROVE_STATUS == "4"  ){
                      customAlert('','알림', item.APPROVE_STATUS_NM +'(제목:'+ item.REPORT_TITLE +') 중입니다. 삭제할 수 없습니다.');
                      return false; 
                  }                
                   var o = {};
                   o.item = item;
                   o.index = index;
                   
                   customConfirm("삭제 하시겠습니까?", this.deleteExpMstCallBack, null ,o );
              },

              deleteMobileExpMst : function (item, index) { // click delete button
              
                  if (item.APPROVE_STATUS == "2" || item.APPROVE_STATUS == "4"  ){
                      customAlert('','알림', item.APPROVE_STATUS_NM +'(제목:'+ item.REPORT_TITLE +') 중입니다. 삭제할 수 없습니다.');
                      return false;                   
                  }                
                   var o = {};
                   o.item = item;
                   o.index = index;
                   
                   customConfirm("삭제 하시겠습니까?", this.deleteMobileExpMstCallBack, null ,o );
              },
              
              deleteExpMstCallBack : function (o) { //
            	  
                  var item = o.item;
                  var index = o.index;
                  item.INDEX = index;
                  
                  var param = {
                          svcId:"deleteExpenseItem",
                          strUrl:"/ex/expense/expensemst/deleteExpenseItem", 
                          inDs :  "" ,  
                          param : item, 
                          pCall : this.tranCallBack, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                     ajaxReadJsonData(param);
                  
              }, // deleteItem  
              deleteMobileExpMstCallBack : function (o) { //
            	  
                  var item = o.item;
                  var index = o.index;
                  item.INDEX = index;
                  
//                   if ( isEmpty(item.EXPENSE_NO)   ){
//                   	  if (!isEmpty(item.FILE_NO)) {
//                   		  deleteServerFile(item.FILE_NO, this.deleteExpenseItemCallback , false); // false : admin_file.use_yn = 0 으로 update
//                   	      this.curItem.FILE_NO = "";
//                   	      this.curItem.INDEX = index;
//                   	      customAlert('','','삭제되었습니다.');
//                   	  }
//                   	  return false;
//                     }        
                 
                  // 파일 업로드 등에서 에러발생 후 삭제버튼을 눌렀을 때,
                  if (typeof item.INDEX == 'undefined')
                  {
                	  $('#'+ this.pgmid+'modal-detail').modal('hide');
                	  return false;
                  };
                  
//                   logJ(item);
                  
                  var param = {
                          svcId:"deleteMobileExpMstCallBack",
                          strUrl:"/ex/expense/expensemst/deleteExpenseItem", 
                          inDs :  "" ,  
                          param : item, 
                          pCall : this.tranCallBack, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                     ajaxReadJsonData(param);
                  
              }, // deleteItem                 
              setReport : function (){
                  
                  $('.'+this.pgmid+'boxCheckbox:checked').attr("checked",true).each(function(index, item){ 
                  })
              },
              
              getReportList : function () {
            	  
                   var param = {
                              svcId:"getReportList",
                              strUrl:"/ex/expense/report/getReportList", 
                              inDs :  "" ,  
                              param : serializeObjectX($('#[[${param.pgm_id}]]')), 
                              pCall : this.tranCallBack, 
                              pLoad : true          
                          };
                          //트랜젝션 실행
                          ajaxReadJsonData(param);                
              },
              
              
              uploadFile : function(pCall){  // savedt
            	 

            	  
              },
              
              
              setReceiptMngList:  function(refName){ 
            	  
                  // 관리항목
                  if (this.receiptMngList.length > 0){
                     var ref = this;
                      this.receiptMngList.forEach(item => {  
                                  if (item.INPUT_FORMAT_CD == '01') { //  코드성 ref="popupreceiptmng+item.MNG_CD" 
                                      item.MNGVAL_CD = ref.$refs[refName+item.MNG_CD][0].getCode();
                                      item.MNGVAL_NM = ref.$refs[refName+item.MNG_CD][0].getCodeName();
                                  }else if (item.INPUT_FORMAT_CD == '02' ) { // 
                                      item.MNGVAL_NM = ref.$refs[refName+item.MNG_CD][0].getData();
                                  }else if (item.INPUT_FORMAT_CD == '05'  ) { // 
                                      item.MNGVAL_NM = ref.$refs[refName+item.MNG_CD][0].getDate();
                                  }else{
                                      item.MNGVAL_NM = $('#'+ref.pgmid+refName+item.MNG_CD).val();                                           
                                  }
                      }); //
                      this.tempCurItem.mngs = this.receiptMngList;
                  }
            	  
              },
              
              
              saveCurItem :  function(response){  // savedt
            	  
                  if (this.curItem.TYPE == 'CARD'){
                       if (checkRequiredInput(this.pgmid+"cardmodalbody") == false){
                           customAlert("필수항목","","필수항목 입력하세요.");
                           return false;
                       };
                       
                       // 이미지(파일)추가 증빙 배열
                   //    this.tempCurItem.FILE_LIST = this.$refs.cardimg.getUrls();                       
                       this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_CARD').val();
                      
                    //코스트센터 or 프로젝트 코드
                       this.tempCurItem.CCTR_CD = this.$refs.popupcostcentercard.getCode();
                       this.tempCurItem.PS_CD = this.$refs.popupprojectcard.getCode();
                       this.tempCurItem.BELONGING_TP = this.$refs.CARD_CCENTER_TP.getValue();
                       
                       
                      if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
                          if (isEmpty(this.tempCurItem.CCTR_CD) ) {
                              customAlert("","","코스트센터를 입력하세요.");
                              return false;
                          }
                      }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
                          if (isEmpty(this.tempCurItem.PS_CD) ) {
                              customAlert("","","프로젝트를 입력하세요.");
                              return false;
                          }                       
                      }                
                      
                      // 관리항목
                      this.setReceiptMngList('popupcardmng');                   
                      
                      
                  }else if (this.curItem.TYPE == 'RECEIPT'){
                      
                	  
                	  if ( this.$refs.receiptimg.getUrls().length == 0  ) {
                          customAlert("","","증빙을 입력하세요.");
                          return false;
                      }
                      
                      if (checkRequiredInput(this.pgmid+"receiptmodalbody") == false){
                          customAlert("","","입력값을 확인하세요.");
                          return false;
                      };
                      
                       this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_RECEIPT').val();
                       this.tempCurItem.CURRENCY_CD = this.$refs.RECEIPT_CURRENCY.getData() ;
                       this.tempCurItem.CURRENCY_RATE = this.currencyRate;
                       this.tempCurItem.CURRENCY_DT = this.currencyDt;                       
                       this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
                       this.tempCurItem.CURRENCY_AMT = this.$refs.CURRENCY_AMT.getData(); //$('#'+this.pgmid+'CURRENCY_AMT').val().replace(/\,/gi,'');
                       this.tempCurItem.CURRENCY_AMT = to_number(this.tempCurItem.CURRENCY_AMT).toFixed(this.curItem.CURRENCY_DEC_NUM);
                       
                       this.tempCurItem.RECEIPT_DT =  this.$refs.RECEIPT_DT_RECEIPT.getDate();  
                       
                       //코스트센터 or 프로젝트 코드
                       this.tempCurItem.CCTR_CD = this.$refs.popupcostcenterreceipt.getCode();
                       this.tempCurItem.PS_CD = this.$refs.popupprojectreceipt.getCode();
                       this.tempCurItem.BELONGING_TP = this.$refs.RECEIPT_CCENTER_TP.getValue();                 
                       if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
                         //  this.tempCurItem.CCTR_CD   = this.$refs.popupcostcenterreceipt.getCode();
                           if (isEmpty(this.tempCurItem.CCTR_CD) ) {
                               customAlert("","","코스트센터를 입력하세요.");
                               return false;
                           }
                        //   this.tempCurItem.PS_CD = "";
                       }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
                         //  this.tempCurItem.PS_CD   = this.$refs.popupprojectreceipt.getCode();
                           if (isEmpty(this.tempCurItem.PS_CD) ) {
                               customAlert("","","프로젝트를 입력하세요.");
                               return false;
                           }                       
                         //  this.tempCurItem.CCTR_CD   = "";
                       }
                       
                       // 관리항목
                       this.setReceiptMngList('popupreceiptmng'); 
                       
                       
                  }else if (this.curItem.TYPE == 'TOLL'){
                     // if (isEmpty(this.curItem.FILE_NO)) { customAlert("필수항목","","통행료 영수증 파일을 업로드하세요.");  return; }
                      if (this.tollOcrList == 0) {
                    	  customAlert("필수항목","","통행료 데이터가 없습니다.");  return;
                      }else{
                    	  this.tempCurItem.TOLL_DATA = this.tollOcrList;
                    	  this.tempCurItem.TOLL_CNT = this.tollOcrList.length;
                      }
                      if (checkRequiredInput(this.pgmid+"tollmodalbody") == false){
                          customAlert("","","입력값을 확인하세요.");
                          return false;
                      };
                      
                       this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_TOLL').val();
                       this.tempCurItem.EXPENSE_AMT = to_number($('#'+this.pgmid+'EXPENSE_AMT_TOLL').val());
                       
                       this.tempCurItem.RECEIPT_DT =  this.$refs.RECEIPT_DT_TOLL.getDate();  
                       
                       //코스트센터 or 프로젝트 코드
                       this.tempCurItem.CCTR_CD = this.$refs.popupcostcentertoll.getCode();
                       this.tempCurItem.PS_CD = this.$refs.popupprojecttoll.getCode();
                       this.tempCurItem.BELONGING_TP = this.$refs.TOLL_CCENTER_TP.getValue();                 
                       if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
                           if (isEmpty(this.tempCurItem.CCTR_CD) ) {
                               customAlert("","","코스트센터를 입력하세요.");
                               return false;
                           }
                       }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
                           if (isEmpty(this.tempCurItem.PS_CD) ) {
                               customAlert("","","프로젝트를 입력하세요.");
                               return false;
                           }                       
                       }
                       
                  }else if (this.curItem.TYPE == 'PREPAY'){
                      
                      if (checkRequiredInput(this.pgmid+"prepaymodalbody") == false){
                          customAlert("","","입력값을 확인하세요.");
                          return false;
                      };
                      if (this.tempCurItem.EVID_YN == '1'  && this.$refs.prepayimg.getUrls().length == 0  ) {
                          customAlert("","","증빙을 입력하세요.");
                          return false;
                      }

                       this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_PREPAY').val();
                       this.tempCurItem.CURRENCY_CD = this.$refs.PREPAY_CURRENCY.getData() ;
                       this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
                       this.tempCurItem.CURRENCY_AMT = to_number(this.$refs.CURRENCY_AMT_PREPAY.getData());
                       this.tempCurItem.CURRENCY_AMT = to_number(this.tempCurItem.CURRENCY_AMT).toFixed(this.curItem.CURRENCY_DEC_NUM);
                       
                       this.tempCurItem.CURRENCY_RATE = this.currencyRate;
                       this.tempCurItem.CURRENCY_DT = this.currencyDt;
                       
                       this.tempCurItem.RECEIPT_DT =  this.$refs.RECEIPT_DT_PREPAY.getDate();  
                       
                       //코스트센터 or 프로젝트 코드
                       this.tempCurItem.CCTR_CD = this.$refs.popupcostcenterprepay.getCode();
                       this.tempCurItem.PS_CD = this.$refs.popupprojectprepay.getCode();
                       this.tempCurItem.BELONGING_TP = this.$refs.PREPAY_CCENTER_TP.getValue();                 
                       if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
                           if (isEmpty(this.tempCurItem.CCTR_CD) ) {
                               customAlert("","","코스트센터를 입력하세요.");
                               return false;
                           }
                       }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
                           if (isEmpty(this.tempCurItem.PS_CD) ) {
                               customAlert("","","프로젝트를 입력하세요.");
                               return false;
                           }                       
                       }
                       
                       // 관리항목
                       this.setReceiptMngList("popupprepaymng");
                   
				}else if (this.curItem.TYPE == 'ATM'){
                      
                      if (checkRequiredInput(this.pgmid+"atmmodalbody") == false){
                          customAlert("","","입력값을 확인하세요.");
                          return false;
                      };
                      if (this.tempCurItem.EVID_YN == '1'  && this.$refs.atmimg.getUrls().length == 0  ) {
                          customAlert("","","증빙을 입력하세요.");
                          return false;
                      }

                       this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_ATM').val();
                       this.tempCurItem.CURRENCY_CD = this.$refs.ATM_CURRENCY.getData();
                       this.tempCurItem.EXPENSE_CD = this.$refs.popupexpatm.getCode();
                       
                       this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
                       this.tempCurItem.CURRENCY_AMT = to_number(this.$refs.CURRENCY_AMT_ATM.getData());
                       this.tempCurItem.CURRENCY_AMT = to_number(this.tempCurItem.CURRENCY_AMT).toFixed(this.curItem.CURRENCY_DEC_NUM);
                       
                       this.tempCurItem.CURRENCY_RATE = this.currencyRate;
                       this.tempCurItem.CURRENCY_DT = this.currencyDt;
                       
                       this.tempCurItem.RECEIPT_DT =  this.$refs.RECEIPT_DT_ATM.getDate();  
                       
                       //코스트센터 or 프로젝트 코드
                       this.tempCurItem.CCTR_CD = this.$refs.popupcostcenteratm.getCode();
                       this.tempCurItem.PS_CD = this.$refs.popupprojectatm.getCode();
                       this.tempCurItem.BELONGING_TP = this.$refs.ATM_CCENTER_TP.getValue();                 
                       if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
                           if (isEmpty(this.tempCurItem.CCTR_CD) ) {
                               customAlert("","","코스트센터를 입력하세요.");
                               return false;
                           }
                       }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
                           if (isEmpty(this.tempCurItem.PS_CD) ) {
                               customAlert("","","프로젝트를 입력하세요.");
                               return false;
                           }                       
                       }
                       
                       // 관리항목
                       this.setReceiptMngList("popupatmmng");
					
				}else if (this.curItem.TYPE == 'CON'){
				    
				    if (checkRequiredInput(this.pgmid+"conmodalbody") == false){
				        customAlert("","","입력값을 확인하세요.");
				        return false;
				    };
				    if (this.tempCurItem.EVID_YN == '1'  && this.$refs.conimg.getUrls().length == 0  ) {
				        customAlert("","","증빙을 입력하세요.");
				        return false;
				    }
				
				     this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_CON').val();
				     this.tempCurItem.CURRENCY_CD = this.$refs.CON_CURRENCY.getData() ;
				     this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
				     this.tempCurItem.CURRENCY_AMT = to_number(this.$refs.CURRENCY_AMT_CON.getData());
				     this.tempCurItem.CURRENCY_AMT = to_number(this.tempCurItem.CURRENCY_AMT).toFixed(this.curItem.CURRENCY_DEC_NUM);
				     
				     this.tempCurItem.CURRENCY_RATE = this.currencyRate;
				     this.tempCurItem.CURRENCY_DT = this.currencyDt;
				     
				     this.tempCurItem.RECEIPT_DT =  this.$refs.RECEIPT_DT_CON.getDate();  
				     
				     //코스트센터 or 프로젝트 코드
				     this.tempCurItem.CCTR_CD = this.$refs.popupcostcentercon.getCode();
				     this.tempCurItem.PS_CD = this.$refs.popupprojectcon.getCode();
				     this.tempCurItem.BELONGING_TP = this.$refs.CON_CCENTER_TP.getValue();                 
				     if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
				         if (isEmpty(this.tempCurItem.CCTR_CD) ) {
				             customAlert("","","코스트센터를 입력하세요.");
				             return false;
				         }
				     }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
				         if (isEmpty(this.tempCurItem.PS_CD) ) {
				             customAlert("","","프로젝트를 입력하세요.");
				             return false;
				         }                       
				     }
				     
				     // 관리항목
				     this.setReceiptMngList("popupconmng");
					     
				}else if (this.curItem.TYPE == 'GEN'){
				    
				    if (checkRequiredInput(this.pgmid+"genmodalbody") == false){
				        customAlert("","","입력값을 확인하세요.");
				        return false;
				    };
				    if (this.tempCurItem.EVID_YN == '1'  && this.$refs.genimg.getUrls().length == 0  ) {
				        customAlert("","","증빙을 입력하세요.");
				        return false;
				    }
				
				     this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_GEN').val();
				     this.tempCurItem.CURRENCY_CD = this.$refs.GEN_CURRENCY.getData() ;
				     this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
				     this.tempCurItem.CURRENCY_AMT = to_number(this.$refs.CURRENCY_AMT_GEN.getData());
				     this.tempCurItem.CURRENCY_AMT = to_number(this.tempCurItem.CURRENCY_AMT).toFixed(this.curItem.CURRENCY_DEC_NUM);
				     
				     this.tempCurItem.CURRENCY_RATE = this.currencyRate;
				     this.tempCurItem.CURRENCY_DT = this.currencyDt;
				     
				     this.tempCurItem.RECEIPT_DT =  this.$refs.RECEIPT_DT_GEN.getDate();  
				     
				     //코스트센터 or 프로젝트 코드
				     this.tempCurItem.CCTR_CD = this.$refs.popupcostcentergen.getCode();
				     this.tempCurItem.PS_CD = this.$refs.popupprojectgen.getCode();
				     this.tempCurItem.BELONGING_TP = this.$refs.GEN_CCENTER_TP.getValue();                 
				     if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
				         if (isEmpty(this.tempCurItem.CCTR_CD) ) {
				             customAlert("","","코스트센터를 입력하세요.");
				             return false;
				         }
				     }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
				         if (isEmpty(this.tempCurItem.PS_CD) ) {
				             customAlert("","","프로젝트를 입력하세요.");
				             return false;
				         }                       
				     }
				     
				     // 관리항목
				     this.setReceiptMngList("popupgenmng"); 
				     
				     
                  }else if (this.curItem.TYPE == 'GAS'){
                       
                       if (checkRequiredInput(this.pgmid+"gasmodalbody") == false){
                           customAlert("필수항목","","필수항목 입력하세요.");
                           return false;
                       };
                       if ( $('#'+this.pgmid+'DISTANCE').val() == '0' ) { customAlert("필수항목","","거리를 입력하세요.");  return; }
                       
                       // gps 위치 필수 체크
                       if ( this.distanceCalcType == '2' &&  !this.searchPathRequiredCheck()) { return false;  }
                       
                       //코스트센터 or 프로젝트 코드
                       this.tempCurItem.CCTR_CD = this.$refs.popupcostcentergas.getCode();
                       this.tempCurItem.PS_CD = this.$refs.popupprojectgas.getCode();
                       this.tempCurItem.BELONGING_TP = this.$refs.GAS_CCENTER_TP.getValue();
                       if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
                           if (isEmpty(this.tempCurItem.CCTR_CD) ) {
                               customAlert("","","코스트센터를 입력하세요.");
                               return false;
                           }
                       }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
                           if (isEmpty(this.tempCurItem.PS_CD) ) {
                               customAlert("","","프로젝트를 입력하세요.");
                               return false;
                           }                       
                       }                                   
                       
                      this.tempCurItem.SOURCE_TP = "4";
                      this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_GAS').val();
                      this.tempCurItem.RECEIPT_DT = this.$refs.RECEIPT_DT_GAS.getDate();  
                      this.tempCurItem.DISTANCE = $('#'+this.pgmid+'DISTANCE').val();
                      this.tempCurItem.DISTANCE_TP = this.$refs.EX_DISTANCE_CALC_TP.getValue();
                      
                      this.tempCurItem.ODOMETER_START = $('#'+this.pgmid+'ODOMETER_START').val().replace(/\,/gi,'');
                      this.tempCurItem.ODOMETER_END = $('#'+this.pgmid+'ODOMETER_END').val().replace(/\,/gi,'');
                      
                      this.tempCurItem.ODOMETER_START_FILE = this.odometerStartFile;
                      this.tempCurItem.ODOMETER_END_FILE = this.odometerEndFile;
                      
                      this.tempCurItem.GASRATE = $('#'+this.pgmid+'GASRATE').val();
                      this.tempCurItem.EXPENSE_AMT = $('#'+this.pgmid+'EXPENSE_AMT_GAS').val().replace(/\,/gi,'');
                      this.tempCurItem.MILEAGE_RATE_CD = $("#"+this.pgmid+"getGasRate option:selected").val(); 
                      
                      
                      
                   // gps정보 저장   
//                    if (this.distanceCalcType == '2' || this.distanceCalcType == '4'  ) {
                      
                      this.tempCurItem.START_LAT = (this.distanceCalcType == '2') ? $('#'+this.pgmid+'START_LAT').val() : ''; 
                      this.tempCurItem.START_LONG =  (this.distanceCalcType == '2') ? $('#'+this.pgmid+'START_LONG').val(): ''; 
                      this.tempCurItem.START_ADDR = (this.distanceCalcType == '2') ? $('#'+this.pgmid+'START_ADDR').val(): ''; 
                      this.tempCurItem.START_DH = (this.distanceCalcType == '2') ? $('#'+this.pgmid+'START_DH').val(): ''; 
                      
                      //경유지 추가
                      var passItemLen = this.curItem_pass.length;
                      this.tempCurItem.PASS_ITEMS = []; // 초기화
                      if(passItemLen > 0) {
                    	  for(idx in this.curItem_pass) {
                          	  var o = {};
	                          o.PASS_LAT = this.curItem_pass[idx].LAT;
	                		  o.PASS_LONG = this.curItem_pass[idx].LONG;
	                		  o.PASS_ADDR = $('#'+this.pgmid+'PASS_ADDR'+idx).val();
	                		  o.PASS_DH = $('#'+this.pgmid+'PASS_DH'+idx).val(); 
                    		  this.tempCurItem.PASS_ITEMS.push(o)
                    	  }
                      }

                      this.tempCurItem.END_LAT = (this.distanceCalcType == '2') ? $('#'+this.pgmid+'END_LAT').val(): ''; 
                      this.tempCurItem.END_LONG = (this.distanceCalcType == '2') ? $('#'+this.pgmid+'END_LONG').val(): ''; 
                      this.tempCurItem.END_ADDR = (this.distanceCalcType == '2') ? $('#'+this.pgmid+'END_ADDR').val(): ''; 
                      this.tempCurItem.END_DH = (this.distanceCalcType == '2') ? $('#'+this.pgmid+'END_DH').val(): ''; 
                      
                      var s = '&startX='+this.tempCurItem.START_LONG;
                      s = s + '&startY='+this.tempCurItem.START_LAT;
                      s = s + '&endX='+this.tempCurItem.END_LONG;
                      s = s + '&endY='+this.tempCurItem.END_LAT;
                      
                      
                      
                      //경유지 추가
                      //'&passList=126.94109937303911,37.19253008226004,1000560149,G,0_127.17359995597536,37.33918196567211,160886,G,0'
                      if(passItemLen > 0) {
                      	  s = s + '&passList=';
                    	  for(idx in this.tempCurItem.PASS_ITEMS) {
                    		  s = s + this.tempCurItem.PASS_ITEMS[idx].PASS_LONG + ',' + this.tempCurItem.PASS_ITEMS[idx].PASS_LAT;
                    		  s = s + ',G,0';
                    		  if(idx != passItemLen-1) s = s + "_";
                    	  }
                      }
                      
//                    } // if distanceCalcType == '2'
                      // &endX=127.25550657265403&endY=37.24556605178439&startX=126.64283016&startY=37.54022905
                      this.tempCurItem.FILE_NO = (this.distanceCalcType == '2' || this.distanceCalcType == '4' ) ?  this.tmapApiUrls.ROUTE_STATIC_MAP+'?appKey='+tmap_apikey+'&reqCoordType=WGS84GEO'+ s : '';
                      this.tempCurItem.URL = this.tempCurItem.FILE_NO ;
                  
                  } // GAS
                  
                  if (this.curItem.TYPE == 'TRAVEL'){
//                     if (checkRequiredInput(this.pgmid+"travelmodalbody") == false){
//                         customAlert("필수항목","","필수항목 입력하세요.");  
//                         return false;
//                     };

                    var EXPENSE_AMT_TRAVEL = $('#'+this.pgmid+'EXPENSE_AMT_TRAVEL').val()
                    if(EXPENSE_AMT_TRAVEL <= 0) {
                    	customAlert("","","금액을 입력하세요.");  
                    	return false;
                    }
                    
                    var biztripDays = $('#'+this.pgmid+'BIZTRIP_DAYS').val();
                    if(biztripDays <= 0){
                    	customAlert("","","출장기간을 제대로 입력해주세요.");
                        return false;
                    }
                    
                    //코스트센터 or 프로젝트 코드
                        this.tempCurItem.CCTR_CD = this.$refs.popupcostcentertravel.getCode();
                        this.tempCurItem.PS_CD = this.$refs.popupprojecttravel.getCode();
                        this.tempCurItem.BELONGING_TP = this.$refs.TRAVEL_CCENTER_TP.getValue();
                    if (this.tempCurItem.BELONGING_TP == '1')  { // 코스트센터
                        if (isEmpty(this.tempCurItem.CCTR_CD) ) {
                            customAlert("","","코스트센터를 입력하세요.");
                            return false;
                        }
                    }else if(this.tempCurItem.BELONGING_TP == '2' ){ // project
                        if (isEmpty(this.tempCurItem.PS_CD) ) {
                            customAlert("","","프로젝트를 입력하세요.");
                            return false;
                        }                       
                    }           
                    
                      this.tempCurItem.CURRENCY_CD = this.currencyCd;
                      this.tempCurItem.CURRENCY_RATE = this.currencyRate;
                      this.tempCurItem.CURRENCY_DT = this.currencyDt;
                      this.tempCurItem.TRAVEL_RATE = dropdownRenderer['getBizTripType'][this.$refs.BizTripType.getIndex()].REF1;  // 일당
                    
                      this.tempCurItem.RMK = $('#'+this.pgmid+'RMK_TRAVEL').val();
                      this.tempCurItem.EXPENSE_AMT = to_number(EXPENSE_AMT_TRAVEL);
                      this.tempCurItem.BIZTRIP_DAYS = to_number($('#'+this.pgmid+'BIZTRIP_DAYS').val());
                      
                      this.tempCurItem.SOURCE_TP = "3";
                      this.tempCurItem.BIZTRIP_TP = $("#"+this.pgmid+"getBizTripType option:selected").val(); 
                      this.tempCurItem.BIZTRIP_DAYS = biztripDays; // $('#'+this.pgmid+'BIZTRIP_DAYS').val();
                      this.tempCurItem.BIZTRIP_START = this.$refs.biztriprange.getFrDate();
                      this.tempCurItem.BIZTRIP_END = this.$refs.biztriprange.getToDate();
                      this.tempCurItem.RECEIPT_DT = this.$refs.biztriprange.getToDate(); //$('#'+this.pgmid+'BIZTRIP_END').val().replace(/\-/gi,'').replace(/\./gi,''); // "2020-05-12".replace(/-/gi,'')
                      
                      this.tempCurItem.BIZTRIP_CAL_MTHD = $("input[name='"+ this.biztripCalTypeName + "']:checked").val();
                      
                      var officeLoc = $('#'+this.pgmid+'officeLoc').val()
					  if(officeLoc == '' || officeLoc == null) {
						  this.curItem.START_LAT = '';
						  this.curItem.START_LONG = '';
						  this.curItem.START_ADDR = '';
						  $('#'+this.pgmid+'TRAVELDIST').val('')
                      }
                      
                      this.tempCurItem.START_LAT = this.curItem.START_LAT; 
                      this.tempCurItem.START_LONG = this.curItem.START_LONG; 
                      this.tempCurItem.START_ADDR = this.curItem.START_ADDR; 
                      this.tempCurItem.START_DH = $('#'+this.pgmid+'OFFICE_DH').val(); 
                      
                      var travelLoc = $('#'+this.pgmid+'travelLoc').val()
					  if(travelLoc == '' || travelLoc == null) {
						  this.curItem.END_LAT = '';
						  this.curItem.END_LONG = '';
						  this.curItem.END_ADDR = '';
						  $('#'+this.pgmid+'TRAVELDIST').val('')
					  }
                    	  
                      this.tempCurItem.END_LAT = this.curItem.END_LAT; 
                      this.tempCurItem.END_LONG = this.curItem.END_LONG; 
                      this.tempCurItem.END_ADDR = this.curItem.END_ADDR; 
                      this.tempCurItem.END_DH = $('#'+this.pgmid+'TRAVEL_DH').val(); 
                      
                      var distance = $('#'+this.pgmid+'TRAVELDIST').val()
                      if(distance != "") {
	                      this.tempCurItem.DISTANCE = distance;
	                    	  
	                      var s = '&startX='+this.tempCurItem.START_LONG;
	                      s = s + '&startY='+this.tempCurItem.START_LAT;
	                      s = s + '&endX='+this.tempCurItem.END_LONG;
	                      s = s + '&endY='+this.tempCurItem.END_LAT;                      
	                      this.tempCurItem.FILE_NO = this.tmapApiUrls.ROUTE_STATIC_MAP+'?appKey='+tmap_apikey+'&reqCoordType=WGS84GEO'+ s;
	                      this.tempCurItem.URL = this.tempCurItem.FILE_NO ;
                      } else {
                    	  this.tempCurItem.DISTANCE = 0;
                    	  this.tempCurItem.URL = ''
                      }
                      
                  }  // end of 일당    
                  
                  
                  
                  // 금액한도 체크
                  
                  if ( this.tempCurItem.LIMIT_AMT_YN == '1' &&  to_number(this.tempCurItem.LIMIT_AMT) < to_number(this.tempCurItem.EXPENSE_AMT) ) {
                	    customAlert("","","금액 한도 초과");
                        return false;
                  }
                  
                     if (isEmpty(this.curItem.EXPENSE_NO)) {  
                         // null일 때, substr 오류 방지
                         this.curItem.REPORT_TITLE = "";
                     }
                  
                     if (this.tempCurItem.BELONGING_TP == '0')  { //귀속 없음
                         this.tempCurItem.CCTR_CD = "";
                         this.tempCurItem.CCTR_NM = "";
                         this.tempCurItem.PS_CD = "";
                         this.tempCurItem.PS_NM = "";
                     }
                     
                     if (!isEmpty(this.curItem.SOURCE_TP)) {
                         this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
                     }else if    (!isEmpty(this.tempCurItem.SOURCE_TP)) {
                    	 this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.tempCurItem.SOURCE_TP );
                     }
              ////////////////////////////////////////////////////////////////////////
               	  //파일 첨부가 필수인 경우에만
                  if (this.curItem.TYPE == 'TOLL' &&  this.$refs.tollimg.getQueuedFiles().length > 0 ){
                      // 파일저장
                       this.$refs.tollimg.uploadFile();
                       return;
            	  }else if (this.curItem.TYPE == 'CARD' && this.$refs.cardimg.getQueuedFiles().length > 0 && this.$refs.cardimg.autoprocess == "false" ){
           		   this.$refs.cardimg.uploadFile();
                      return;  
            	  }else if (this.curItem.TYPE == 'RECEIPT' && this.$refs.receiptimg.getQueuedFiles().length > 0 && this.$refs.receiptimg.autoprocess == "false" ){
           		   this.$refs.receiptimg.uploadFile();
                      return;                        
            	  }else if (this.curItem.TYPE == 'PREPAY' &&  (this.$refs.prepayimg.getQueuedFiles().length > 0) ){
            		  this.$refs.prepayimg.uploadFile();
                      return;           
            	  }else if (this.curItem.TYPE == 'ATM' &&  (this.$refs.atmimg.getQueuedFiles().length > 0) ){
            		  this.$refs.atmimg.uploadFile();
                      return;           
            	  }else if (this.curItem.TYPE == 'CON' &&  (this.$refs.conimg.getQueuedFiles().length > 0) ){
            		  this.$refs.conimg.uploadFile();
                      return;           
            	  }else if (this.curItem.TYPE == 'GEN' &&  (this.$refs.genimg.getQueuedFiles().length > 0) ){
            		  this.$refs.genimg.uploadFile();
                      return;           
            	  }else if (this.curItem.TYPE == 'GAS'  && this.tempCurItem.DISTANCE_TP == 3  && (this.$refs.odoimg.getQueuedFiles().length > 0)  ){
                      this.$refs.odoimg.uploadFile();
                      return;           
            	  }
              ////////////////////////////////////////////////////////////////////////     
            	  this.saveServer();
                     

              }, //saveCurItem
              
              
              
              getImgFilesNo : function(response, urls ){
                  
              },
              checkRequiredImg : function(urls){
                  if ( urls.length == 0) { customAlert("필수항목","","영수증 이미지를 등록하세요.");  return false; }
                  return true;
              },
              saveServer : function(response, urls){
            	  
                   // response가 있는 경우=======================================================
                  if (!isEmpty(response)){	  
	            		  this.curItem.FILE_NO = urls[0].FILE_NO;
	            		  this.curItem.FILE_KIND = urls[0].FILE_KIND;                	  
		            	  
            		      if (this.curItem.TYPE == 'TOLL' && isEmpty(this.curItem.EXPENSE_NO) ){
		                      // 이미지(파일) 배열
		                      if (this.checkRequiredImg(urls) == false) {
		                    	  return false;
		                      }
		            	  }else if (this.curItem.TYPE == 'RECEIPT' && isEmpty(this.curItem.EXPENSE_NO) && this.tempCurItem.EVID_YN == '1' ){
		                      // 이미지(파일) 배열
		                      if (this.checkRequiredImg(urls) == false) {
		                    	  return false;
		                      }
		            	  }else if (this.curItem.TYPE == 'PREPAY' && isEmpty(this.curItem.EXPENSE_NO) && this.tempCurItem.EVID_YN == '1' ){
		                      // 이미지(파일) 배열
		                      if (this.checkRequiredImg(urls) == false) {
		                    	  return false;
		                      }         
		            	  }else if (this.curItem.TYPE == 'ATM' && isEmpty(this.curItem.EXPENSE_NO) && this.tempCurItem.EVID_YN == '1' ){
		                      // 이미지(파일) 배열
		                      if (this.checkRequiredImg(urls) == false) {
		                    	  return false;
		                      }    
		            	  }else if (this.curItem.TYPE == 'CON' && isEmpty(this.curItem.EXPENSE_NO) && this.tempCurItem.EVID_YN == '1' ){
		                      // 이미지(파일) 배열
		                      if (this.checkRequiredImg(urls) == false) {
		                    	  return false;
		                      }    
		            	  }else if (this.curItem.TYPE == 'GEN' && isEmpty(this.curItem.EXPENSE_NO) && this.tempCurItem.EVID_YN == '1' ){
		                      // 이미지(파일) 배열
		                      if (this.checkRequiredImg(urls) == false) {
		                    	  return false;
		                      }    
		            	  }else if (this.curItem.TYPE == 'GAS' && this.tempCurItem.DISTANCE_TP == '3' && isEmpty(this.curItem.EXPENSE_NO) ){
		                      // 이미지(파일) 배열
		                      if (this.checkRequiredImg(urls) == false) {
		                    	  return false;
		                      }                    
		            	  }else if (this.curItem.TYPE == 'CARD' && isEmpty(this.curItem.EXPENSE_NO) ){
		                      // 이미지(파일) 배열
		                      if (this.checkRequiredImg(urls) == false) {
		                    	  return false;
		                      }   
		            	  }
                  } // if
                   
                   if (this.curItem.TYPE == 'RECEIPT' ){
                	   this.curItem.FILE_LIST = this.$refs.receiptimg.getUrls();
                   }else if (this.curItem.TYPE == 'CARD') {
                	   this.curItem.FILE_LIST = this.$refs.cardimg.getUrls();
                   }else if (this.curItem.TYPE == 'TOLL') {
                	   this.curItem.FILE_LIST = this.$refs.tollimg.getUrls();
                   }else if (this.curItem.TYPE == 'GAS') {
                	  // this.curItem.FILE_LIST = this.$refs.gasimg.getUrls();
                   }else if (this.curItem.TYPE == 'PREPAY') {
                	   this.curItem.FILE_LIST = this.$refs.prepayimg.getUrls();
                   }else if (this.curItem.TYPE == 'ATM') {
                	   this.curItem.FILE_LIST = this.$refs.atmimg.getUrls();
                   }else if (this.curItem.TYPE == 'CON') {
                	   this.curItem.FILE_LIST = this.$refs.conimg.getUrls();
                   }else if (this.curItem.TYPE == 'GEN') {
                	   this.curItem.FILE_LIST = this.$refs.genimg.getUrls();
                   }
                  
                  var sObj =  {};
                  Object.assign(sObj, this.curItem); 
                  Object.assign(sObj, this.tempCurItem);
                  Object.assign(sObj, this.tempCurItem.mngs);
                  if(this.tempCurItem.BIZTRIP_CAL_MTHD == '20') {
                	  this.bizTripCalSum = AUIGrid.getFooterData(this.bizTripCalGridView)[1].value;
                	  
					  sObj.ds_master = getCRUDdata(this.bizTripCalGridView);
			        	
					  if(!sObj.ds_master){ return; }
                  }
                 var param = {
                         svcId:"saveExpenseItem",
                         strUrl:"/ex/expense/expensemst/saveExpenseItem", 
                         inDs :  "" ,  
                         param : sObj, 
                         pCall : this.saveExpenseItemCallback, 
                         pLoad : true,
                         pData : sObj,
                     };
                     //트랜젝션 실행
                    ajaxReadJsonData(param);  
              },
              
              saveExpenseItemCallback : function (svcid, d, pData) { //
            	 if(d.BIZTRIP_CAL_MTHD == '20') {
            		 this.curItem.EXPENSE_NO = d.EXPENSE_NO
//          		 this.bizTripCalSum = AUIGrid.getFooterData(this.bizTripCalGridView)[1].value;
//          	  	 this.saveExpBizTripCal();
					 this.saveExpBizTripCalCallBack();
         	 }    	  
                  //신규
                  saveGritter();
                  
                  if (isEmpty(String(this.curItem.INDEX)) == true || typeof this.curItem.INDEX == 'undefined'  ){
                      d.CHECKED = "0";
                      this.receiptList.splice(0,0,d);
                      this.curItem = this.receiptList[0];
                      this.curItem.INDEX = 0;
                  }else{ //기존제거, 변경건 삽입(대체)
                      this.receiptList.splice(this.curItem.INDEX,1,d);
                      this.curItem = this.receiptList[this.curItem.INDEX];
                  }
                  
                  // 저장 후 재조회 부분
                     // 1. 파일
                    var imgcom = "";
                    if (pData.TYPE == "RECEIPT"){
                    	imgcom = "receiptimg";
                    }else if (pData.TYPE == "CARD"){
                    	imgcom = "cardimg";
                    }else if (pData.TYPE == "PREPAY"){
                    	imgcom = "prepayimg";
                    }else if (pData.TYPE == "ATM"){
                    	imgcom = "atmimg";
                    }else if (pData.TYPE == "CON"){
                    	imgcom = "conimg";
                    }else if (pData.TYPE == "GEN"){
                    	imgcom = "genimg";
                    }else if (pData.TYPE == "TOLL"){
                    	//imgcom = "tollimg"; //pdf의 경우 reload필요 없음
                    }
                    if (!isEmpty(imgcom)) {
                        this.$refs[imgcom].getFiles('/ex/expense/expensemst/getExpenseFilesByNo', {EXPENSE_NO : d.EXPENSE_NO, GROUP_NO : pData.GROUP_NO} ); 
                    }
                    
                    // 선택된 item일 때, 변경내역 반영
                    this.resetSelectedReportBtn();
              
              }, // saveExpenseItemCallback
              
              saveReport : function(){
                  var param = {
                          svcId:"saveReport",
                          strUrl:"/ex/expense/report/saveReport", 
                          inDs :  "" ,  
                          param : serializeObjectX($('#[[${param.pgm_id}]]')), 
                          pCall : this.tranCallBack, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                      ajaxReadJsonData(param);
              },
              addReport : function (item) {
                  if (this.selectReportType == "ONE") {
                          this.tempCurItem.REPORT_NO = item.REPORT_NO;
                          this.tempCurItem.REPORT_TITLE = item.REPORT_TITLE;
                          if (this.curItem.TYPE == 'CARD') { // card
                                  $('#'+this.pgmid+'REPORT_NO_CARD').val(this.tempCurItem.REPORT_NO);
                                  $('#'+this.pgmid+'REPORT_TITLE_CARD').val(this.tempCurItem.REPORT_TITLE); 
                          }// card
                          else if (this.curItem.TYPE == 'RECEIPT'){
                              $('#'+this.pgmid+'REPORT_NO_RECEIPT').val(this.tempCurItem.REPORT_NO);
                              $('#'+this.pgmid+'REPORT_TITLE_RECEIPT').val(this.tempCurItem.REPORT_TITLE);                            
                          }// scan
                  
                  } else if (this.selectReportType == "MULTI") {
                          var checkedList = this.receiptList.filter(function (item, index, array) { return item.CHECKED == '1' });
                          this.saveReportToExpense(checkedList, item);
                  } // MULTI
                  
                  $('#'+this.pgmid+'report').modal('hide');
              },
              saveApprove: function() {
                   
                  var checkedList = this.selectedReceiptList;
                  
                  checkedList = setArrChangeFlag(checkedList,'U');
                   var o = {ds_detail : {data:checkedList}};
                   o.TABLE_NAME = "EXPS" // 중요 mybatis에서 이 값으로 체크해서 특정 sql실행
                   // report
                   var reportTitle = $('#'+this.pgmid+"REPORT_TITLE").val();
                   var reportRmk = $('#'+this.pgmid+"REPORT_RMK").val();
                   
                   var urgency_yn;
                   if ($('#'+this.pgmid+'URGENCY_YN').is(":checked") ) {
                	   urgency_yn = '1';
                   }else{
                	   urgency_yn = '0';
                   }
                   
                   
                   // 리포트 관리항목
                   if (this.reportMngList.length > 0){
                      var ref = this;
                       this.reportMngList.forEach(item => {  
                                   if (item.INPUT_FORMAT_CD == '01') { //  코드성 ref="popupreceiptmng+item.MNG_CD" 
                                       item.MNGVAL_CD = ref.$refs['popupreportmng'+item.MNG_CD][0].getCode();
                                       item.MNGVAL_NM = ref.$refs['popupreportmng'+item.MNG_CD][0].getCodeName();
                                   }else if (item.INPUT_FORMAT_CD == '02' ) { // number 'inputnumber-component
                                       item.MNGVAL_NM = ref.$refs['popupreportmng'+item.MNG_CD][0].getData();
                                   }else if (item.INPUT_FORMAT_CD == '05') { // date 'date-new-component-v1
                                       item.MNGVAL_NM = ref.$refs['popupreportmng'+item.MNG_CD][0].getDate();                                   
                                   }else{ // 3 , 6 
                                       item.MNGVAL_NM = $('#'+ref.pgmid+'reportmng'+item.MNG_CD).val();                                           
                                   }
                       }); //
                      // this.tempCurItem.mngs = this.receiptMngList;
                       o.ds_reportmngs = this.reportMngList;
                       
                   }
  
                   
                   var report = {REPORT_NO : "",  REPORT_TITLE :reportTitle,REPORT_RMK: reportRmk, URGENCY_YN : urgency_yn };
                   o.ds_report = {data : report}
                   
                   // 임시 : 1차 결재선만..
                   this.approveLine = setArrChangeFlag(this.approveLines[0].APPROVE_LIST,'I');
                   o.ds_appvline = {data : this.approveLine };
                   
                   // added files
                   this.reportFiles = setArrChangeFlag(this.reportFiles,'I');
                   o.ds_reportfiles = {data : this.reportFiles };
                   
                   
                  var param = {
                          svcId:"saveApprove",
                          strUrl:"/ex/expense/expensemst/saveApprove", 
                          param : o, 
                          pCall : this.saveApproveCallback, 
                          pLoad : true
                      };
                      //트랜젝션 실행
                     ajaxReadJsonData(param);  
              },
              saveApproveCallback : function(svc, data) {
            	  
            	  if (data.ErrorCode != 0 ) return;
            	  
           	      $('#'+this.pgmid+'reportAddedFile').val(''); // reset
                   //  this.getReceiptList('all');
                     $('#'+this.pgmid+ 'report').modal('hide');
                     saveGritter();
                     
                  //재조회 대신, 결과 개별처리 
                  //this.receiptList, this.selectedReceiptList
                     
                  var ref = this;   
                  this.receiptList.forEach( function (item, index) {
                    	 var i = ref.selectedReceiptList.findIndex( function(i) { return i.EXPENSE_NO == item.EXPENSE_NO  }    )
                    	 if (i != -1) {
                    	       //	 
                    		 item.CHECKED = '0';
                    	     item.APPROVE_STATUS = '2';
                    		 item.APPROVE_STATUS_NM = '진행중';
                    		 item.REPORT_TITLE = $('#'+ref.pgmid+"REPORT_TITLE").val();
                    		 ref.getSelectedReportTypes(item);
                    	 }
                     });
                     //this.selectedReceiptList = [];
                 },
              
              boxCheckboxChange : function(o,item,event) {
                  $(event.target).prop('checked', false);
              },
              getTollList : function(expNo) {
                  
                  var param = {
                          svcId:"getTollList",
                          strUrl:"/ex/expense/expensemst/getTollList", 
                          param : {EXPENSE_NO : expNo}, 
                          pCall : this.getTollListCallback, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                     ajaxReadJsonData(param);  
              },    
              getTollListCallback : function(svcId, data, errCd, msgTp, msgCd, msgText) {
                  //초기화 : 그리드, pdf, dropzone, img, canvas
                  this.tollOcrList = data.ds_master.data;
                  this.$refs.gridtoll.setGridData(this.tollOcrList);          
              },            
              getGpsList : function(expNo) {
                  
                  var param = {
                          svcId:"getGpsList",
                          strUrl:"/ex/expense/expensemst/getGpsList", 
                          param : {EXPENSE_NO : expNo}, 
                          pCall : this.getGpsListCallback, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                     ajaxReadJsonData(param);  
              },    
              getGpsListCallback : function(svcId, data) {
                 this.curItem_pass = data.ds_master.data;
                 
              },          
              openDetail : async function(item, index) { // openDt
              
            	      checkRequiredInput(this.pgmid , false);
//             	      this.receiptbelongtype == '3';
            	      
                      this.curItem = {};
                      this.curItem = this.receiptList[index];
                      if (!isEmpty(this.curItem.EXPENSE_NO) && isEmpty(this.curItem.APPROVE_STATUS)) this.curItem.APPROVE_STATUS = '1'; //저장
                      this.curItem.INDEX= index * 1;
                      this.tempCurItem = {};
                      this.receiptMngList = {};
                      this.tollOcrList = [];
                      if (typeof this.curItem.RECEIPT_DT == 'undefined'){
                    	  this.curItem.RECEIPT_DT = moment().format('YYYYMMDD');
                      }
                
                      if (typeof this.curItem.CURRENCY_AMT== 'undefined' || isEmpty(this.curItem.CURRENCY_AMT)){
                          this.curItem.CURRENCY_AMT = 0;
                      }      
                      this.tempCurItem.LIMIT_AMT_YN = this.curItem.LIMIT_AMT_YN;
                      this.tempCurItem.LIMIT_AMT = this.curItem.LIMIT_AMT;                
                      this.tempCurItem.EVID_YN = this.curItem.EVID_YN;
                      
                      
                      if (this.curItem.TYPE=="RECEIPT") { // RECEIPT ==================================================================
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              this.$refs.receiptimg.getFiles('/ex/expense/expensemst/getFilesByGroupNo', {GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                            }else{
                           	 this.$refs.receiptimg.getFiles('/ex/expense/expensemst/getExpenseFilesByNo', {EXPENSE_NO : this.curItem.EXPENSE_NO, GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                            }	  
                    	 
                    	  
                    	  
                          if (isEmpty(this.curItem.EXPENSE_EMP_NO) == true) {
                              //비용사용자
                              this.$refs.popupreceiptemp.setData('[[${session.g_empNo}]]','[[${session.g_empNm}]]'); // 비용청구인
                              this.curItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;   
                              this.curItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;   
                              
                          }else{
                              //비용사용자
                              this.$refs.popupreceiptemp.setData(this.curItem.EXPENSE_EMP_NO,this.curItem.EXPENSE_EMP_NM); // 비용청구인
                          } 
                          
                          this.$refs.RECEIPT_DT_RECEIPT.setData(this.curItem.RECEIPT_DT);  

                          //popup code
                          this.$refs.popupexpreceipt.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                          this.$refs.popupcostcenterreceipt.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                          this.$refs.popupprojectreceipt.setData(this.curItem.PS_CD,this.curItem.PS_NM);
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              $('#'+this.pgmid+'RECEIPT_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                              this.currencyRate = 1;
                          }else{
                              $('#'+this.pgmid+'RECEIPT_CURRENCY').val(this.curItem.CURRENCY_CD);
                              this.currencyRate = parseFloat(this.curItem.CURRENCY_RATE).toFixed(4);
                          }
                          
                          this.$refs.CURRENCY_AMT.setData(parseFloat(this.curItem.CURRENCY_AMT));
                          
                          this.currencyDt = this.curItem.CURRENCY_DT
                          this.expenseAmt = parseFloat(this.curItem.EXPENSE_AMT);
                          $('#'+this.pgmid+'RMK_RECEIPT').val(this.curItem.RMK);
                          
                          this.currencyCd =  this.curItem.CURRENCY_CD;
                          this.receiptcosttype = this.curItem.BELONGING_TP;
                          this.receiptbelongtype = this.curItem.BELONGING_TP
                          if (isEmpty(this.curItem.EXPENSE_NO)) {
                              $('#'+this.pgmid+"RECEIPT_CCENTER_TP").prop('selectedIndex', 0);
                          }else{
                              $('#'+this.pgmid+'RECEIPT_CCENTER_TP').val(this.curItem.BELONGING_TP);
                          }
                          
                          await wait(0);
                          //관리항목 조회
                          this.setReceiptMng({CODE:this.curItem.EXPENSE_CD});
                          this.setReceiptAmtInput({REF5:this.curItem.DEFAULT_AMT_YN});
                          

                          
                      }else if (this.curItem.TYPE=="TOLL") { // TOLL ==================================================================
                              
                                  //비용사용자
                              this.$refs.popuptollemp.setData(this.curItem.EXPENSE_EMP_NO,this.curItem.EXPENSE_EMP_NM); // 비용청구인
                              this.$refs.RECEIPT_DT_TOLL.setData(this.curItem.RECEIPT_DT);  

                              //popup code
                              this.$refs.popupexptoll.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                              this.$refs.popupcostcentertoll.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                              this.$refs.popupprojecttoll.setData(this.curItem.PS_CD,this.curItem.PS_NM);
//                               this.expenseAmt = parseFloat(this.curItem.EXPENSE_AMT);
                              $('#'+this.pgmid+'EXPENSE_AMT_TOLL').val(numberformat(this.curItem.EXPENSE_AMT,'0,000'));
                              $('#'+this.pgmid+'RMK_TOLL').val(this.curItem.RMK);
                              
                              
                              this.receiptcosttype = this.curItem.BELONGING_TP;
                              this.receiptbelongtype = this.curItem.BELONGING_TP
                              if (isEmpty(this.curItem.EXPENSE_NO)) {
                                  $('#'+this.pgmid+"TOLL_CCENTER_TP").prop('selectedIndex', 0);
                              }else{
                                  $('#'+this.pgmid+'TOLL_CCENTER_TP').val(this.curItem.BELONGING_TP);
                              }
                              
                              // canvas조회
                             // var url = window.location.protocol + "//" + window.location.host + '/ec/common/syscommon/fileupload/downloadFile/' + this.curItem.FILE_NO ;
                              if (isEmpty(this.curItem.EXPENSE_NO)){
                                 this.$refs.tollimg.getFiles('/ex/expense/expensemst/getFilesByGroupNo', {GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                                }else{
                               	 this.$refs.tollimg.getFiles('/ex/expense/expensemst/getExpenseFilesByNo', {EXPENSE_NO : this.curItem.EXPENSE_NO} ); // 비용청구인
                                }       
                              
                              this.getTollList(this.curItem.EXPENSE_NO);
                              
                              //관리항목 조회
                        
                      }else if (this.curItem.TYPE=="PREPAY"){ // 가지급 ==================================================================
                          
                          if (isEmpty(this.curItem.EXPENSE_EMP_NO) == true) {
                              //비용사용자
                              this.$refs.popupprepayemp.setData('[[${session.g_empNo}]]','[[${session.g_empNm}]]'); // 비용청구인
                              this.curItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;   
                              this.curItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;   
                              
                          }else{
                              //비용사용자
                              this.$refs.popupprepayemp.setData(this.curItem.EXPENSE_EMP_NO,this.curItem.EXPENSE_EMP_NM); // 비용청구인
                          }
                          
                          this.$refs.RECEIPT_DT_PREPAY.setData(this.curItem.RECEIPT_DT);  

                          //popup code
                          this.$refs.popupexpprepay.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                          this.$refs.popupcostcenterprepay.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                          this.$refs.popupprojectprepay.setData(this.curItem.PS_CD,this.curItem.PS_NM);
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              this.$refs.prepayimg.getFiles('/ex/expense/expensemst/getFilesByGroupNo', {GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                          }else{
                           	 this.$refs.prepayimg.getFiles('/ex/expense/expensemst/getExpenseFilesByNo', {EXPENSE_NO : this.curItem.EXPENSE_NO} ); // 비용청구인
                          }           
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              $('#'+this.pgmid+'PREPAY_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                              this.currencyRate = 1;
                          }else{
                              $('#'+this.pgmid+'PREPAY_CURRENCY').val(this.curItem.CURRENCY_CD);
                              this.currencyRate = parseFloat(this.curItem.CURRENCY_RATE).toFixed(4);
                          }
                          
                          this.$refs.CURRENCY_AMT_PREPAY.setData(parseFloat(this.curItem.CURRENCY_AMT));
                          
                          this.currencyDt = this.curItem.CURRENCY_DT
                          this.expenseAmt = parseFloat(this.curItem.EXPENSE_AMT);
                          $('#'+this.pgmid+'RMK_PREPAY').val(this.curItem.RMK);
                          
                          this.currencyCd =  this.curItem.CURRENCY_CD;
                          this.receiptcosttype = this.curItem.BELONGING_TP;
                          this.receiptbelongtype = this.curItem.BELONGING_TP
                          if (isEmpty(this.curItem.EXPENSE_NO)) {
                              $('#'+this.pgmid+"PREPAY_CCENTER_TP").prop('selectedIndex', 0);
                          }else{
                              $('#'+this.pgmid+'PREPAY_CCENTER_TP').val(this.curItem.BELONGING_TP);
                          }
                          
                          //관리항목 조회
                          this.setReceiptMng({CODE:this.curItem.EXPENSE_CD});
                          this.setReceiptAmtInput({REF5:this.curItem.DEFAULT_AMT_YN});                        
 
                      }else if (this.curItem.TYPE=="ATM"){ // 가지급 ==================================================================
                          
                          if (isEmpty(this.curItem.EXPENSE_EMP_NO) == true) {
                              //비용사용자
                              this.$refs.popupatmemp.setData('[[${session.g_empNo}]]','[[${session.g_empNm}]]'); // 비용청구인
                              this.curItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;   
                              this.curItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;   
                              
                          }else{
                              //비용사용자
                              this.$refs.popupatmemp.setData(this.curItem.EXPENSE_EMP_NO,this.curItem.EXPENSE_EMP_NM); // 비용청구인
                          }
                          
                          this.$refs.RECEIPT_DT_ATM.setData(this.curItem.RECEIPT_DT);  
                          

                          //popup code
                          this.$refs.popupexpatm.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                          this.$refs.popupcostcenteratm.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                          this.$refs.popupprojectatm.setData(this.curItem.PS_CD,this.curItem.PS_NM);
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              this.$refs.atmimg.getFiles('/ex/expense/expensemst/getFilesByGroupNo', {GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                          }else{
                           	 this.$refs.atmimg.getFiles('/ex/expense/expensemst/getExpenseFilesByNo', {EXPENSE_NO : this.curItem.EXPENSE_NO} ); // 비용청구인
                          }           
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              $('#'+this.pgmid+'ATM_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                              this.currencyRate = 1;
                          }else{
                              $('#'+this.pgmid+'ATM_CURRENCY').val(this.curItem.CURRENCY_CD);
                              this.currencyRate = parseFloat(this.curItem.CURRENCY_RATE).toFixed(4);
                          }
                          
                          this.$refs.CURRENCY_AMT_ATM.setData(parseFloat(this.curItem.CURRENCY_AMT));
                          
                          this.currencyDt = this.curItem.CURRENCY_DT
                          this.expenseAmt = parseFloat(this.curItem.EXPENSE_AMT);
                          $('#'+this.pgmid+'RMK_ATM').val(this.curItem.RMK);
                          
                          this.currencyCd =  this.curItem.CURRENCY_CD;
                          this.receiptcosttype = this.curItem.BELONGING_TP;
                          this.receiptbelongtype = this.curItem.BELONGING_TP
                          if (isEmpty(this.curItem.EXPENSE_NO)) {
                              $('#'+this.pgmid+"ATM_CCENTER_TP").prop('selectedIndex', 0);
                          }else{
                              $('#'+this.pgmid+'ATM_CCENTER_TP').val(this.curItem.BELONGING_TP);
                          }
                          
                          //관리항목 조회
                          this.setReceiptMng({CODE:this.curItem.EXPENSE_CD});
                          this.setReceiptAmtInput({REF5:this.curItem.DEFAULT_AMT_YN});     
                          
                      }else if (this.curItem.TYPE=="CON"){ // 가지급 ==================================================================
                          
                          if (isEmpty(this.curItem.EXPENSE_EMP_NO) == true) {
                              //비용사용자
                              this.$refs.popupconemp.setData('[[${session.g_empNo}]]','[[${session.g_empNm}]]'); // 비용청구인
                              this.curItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;   
                              this.curItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;   
                              
                          }else{
                              //비용사용자
                              this.$refs.popupconemp.setData(this.curItem.EXPENSE_EMP_NO,this.curItem.EXPENSE_EMP_NM); // 비용청구인
                          }
                          
                          this.$refs.RECEIPT_DT_CON.setData(this.curItem.RECEIPT_DT);  

                          //popup code
                          this.$refs.popupexpcon.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                          this.$refs.popupcostcentercon.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                          this.$refs.popupprojectcon.setData(this.curItem.PS_CD,this.curItem.PS_NM);
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              this.$refs.conimg.getFiles('/ex/expense/expensemst/getFilesByGroupNo', {GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                          }else{
                           	 this.$refs.conimg.getFiles('/ex/expense/expensemst/getExpenseFilesByNo', {EXPENSE_NO : this.curItem.EXPENSE_NO} ); // 비용청구인
                          }           
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              $('#'+this.pgmid+'CON_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                              this.currencyRate = 1;
                          }else{
                              $('#'+this.pgmid+'CON_CURRENCY').val(this.curItem.CURRENCY_CD);
                              this.currencyRate = parseFloat(this.curItem.CURRENCY_RATE).toFixed(4);
                          }
                          
                          this.$refs.CURRENCY_AMT_CON.setData(parseFloat(this.curItem.CURRENCY_AMT));
                          
                          this.currencyDt = this.curItem.CURRENCY_DT
                          this.expenseAmt = parseFloat(this.curItem.EXPENSE_AMT);
                          $('#'+this.pgmid+'RMK_CON').val(this.curItem.RMK);
                          
                          this.currencyCd =  this.curItem.CURRENCY_CD;
                          this.receiptcosttype = this.curItem.BELONGING_TP;
                          this.receiptbelongtype = this.curItem.BELONGING_TP
                          if (isEmpty(this.curItem.EXPENSE_NO)) {
                              $('#'+this.pgmid+"CON_CCENTER_TP").prop('selectedIndex', 0);
                          }else{
                              $('#'+this.pgmid+'CON_CCENTER_TP').val(this.curItem.BELONGING_TP);
                          }
                          
                          //관리항목 조회
                          this.setReceiptMng({CODE:this.curItem.EXPENSE_CD});
                          this.setReceiptAmtInput({REF5:this.curItem.DEFAULT_AMT_YN});       
                          
                     }else if (this.curItem.TYPE=="GEN"){ // 가지급 ==================================================================
                          
                          if (isEmpty(this.curItem.EXPENSE_EMP_NO) == true) {
                              //비용사용자
                              this.$refs.popupgenemp.setData('[[${session.g_empNo}]]','[[${session.g_empNm}]]'); // 비용청구인
                              this.curItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;   
                              this.curItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;   
                              
                          }else{
                              //비용사용자
                              this.$refs.popupgenemp.setData(this.curItem.EXPENSE_EMP_NO,this.curItem.EXPENSE_EMP_NM); // 비용청구인
                          }
                          
                          this.$refs.RECEIPT_DT_GEN.setData(this.curItem.RECEIPT_DT);  

                          //popup code
                          this.$refs.popupexpgen.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                          this.$refs.popupcostcentergen.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                          this.$refs.popupprojectgen.setData(this.curItem.PS_CD,this.curItem.PS_NM);
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              this.$refs.genimg.getFiles('/ex/expense/expensemst/getFilesByGroupNo', {GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                          }else{
                           	 this.$refs.genimg.getFiles('/ex/expense/expensemst/getExpenseFilesByNo', {EXPENSE_NO : this.curItem.EXPENSE_NO} ); // 비용청구인
                          }           
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                              $('#'+this.pgmid+'GEN_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                              this.currencyRate = 1;
                          }else{
                              $('#'+this.pgmid+'GEN_CURRENCY').val(this.curItem.CURRENCY_CD);
                              this.currencyRate = parseFloat(this.curItem.CURRENCY_RATE).toFixed(4);
                          }
                          
                          this.$refs.CURRENCY_AMT_GEN.setData(parseFloat(this.curItem.CURRENCY_AMT));
                          
                          this.currencyDt = this.curItem.CURRENCY_DT
                          this.expenseAmt = parseFloat(this.curItem.EXPENSE_AMT);
                          $('#'+this.pgmid+'RMK_GEN').val(this.curItem.RMK);
                          
                          this.currencyCd =  this.curItem.CURRENCY_CD;
                          this.receiptcosttype = this.curItem.BELONGING_TP;
                          this.receiptbelongtype = this.curItem.BELONGING_TP
                          if (isEmpty(this.curItem.EXPENSE_NO)) {
                              $('#'+this.pgmid+"GEN_CCENTER_TP").prop('selectedIndex', 0);
                          }else{
                              $('#'+this.pgmid+'GEN_CCENTER_TP').val(this.curItem.BELONGING_TP);
                          }
                          
                          //관리항목 조회
                          this.setReceiptMng({CODE:this.curItem.EXPENSE_CD});
                          this.setReceiptAmtInput({REF5:this.curItem.DEFAULT_AMT_YN});     
                          
                          
                      }else if (this.curItem.TYPE=="CARD"){ // CARD ==================================================================
                          
                    	  
                    	  // 화면 초기화(승인내역 탭으로)
                    	   $('a[href="#' + this.pgmid + 'card-tab-1' + '"]').tab('show');
                    	  
                      
                    	   await wait(0);
                      
                          this.$refs.popupexpcard.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                          this.$refs.popupexpcard.setkeycode(this.curItem.EVID_NO);
                          if (isEmpty(this.curItem.EXPENSE_CD)){
                        	  this.$refs.popupexpcard.callrecents(this.curItem.BIZ_NO, this.curItem.BIZ_NM);
                          }else{
                        	  this.$refs.popupexpcard.clearrecents();
                          }
                          
                          if (this.curItem.PRIVATE_YN == '1') {
                        	  $('#'+this.pgmid+'privateUseCheck').prop("checked", true);
                          }else{
                        	  $('#'+this.pgmid+'privateUseCheck').prop("checked", false);
                          }
                          
                          // 증빙 이미지부터 안보이기
                          $('#'+this.pgmid+'cardevidswitch').prop("checked", false);
                          this.isCardEvidShow = false;
                          
                          this.$refs.RECEIPT_DT_CARD.setData(this.curItem.RECEIPT_DT.substring(0, 8));
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)){
                             	this.$refs.cardimg.getFiles('/ex/expense/expensemst/getOcrImgByEvidNo', {CARD_EVID_NO : this.curItem.EVID_NO} ); // 비용청구인
                          }else{
                        	  
                         	    this.$refs.cardimg.getFiles('/ex/expense/expensemst/getExpenseFilesByNo',{EXPENSE_NO : this.curItem.EXPENSE_NO, GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                          }
                          
                          
                          
                          
                          this.receiptcosttype   = this.curItem.BELONGING_TP;
                          this.receiptbelongtype = this.curItem.BELONGING_TP;
                          
                          this.$refs.popupcostcentercard.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                          this.$refs.popupprojectcard.setData(this.curItem.PS_CD,this.curItem.PS_NM); 

                          if (isEmpty(this.curItem.EXPENSE_NO)) {
                              
                        	  $('#'+this.pgmid+"CARD_CCENTER_TP").prop('selectedIndex', 0);
                              this.curItem.FILE_NO = '';
                              //임시 , 미처리 건일 때, 이미지 로드 안함.
                              //this.$refs.cardimg.setUrl('');
                              
                          }else{
                              $('#'+this.pgmid+'CARD_CCENTER_TP').val(this.curItem.BELONGING_TP);
                          }
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)) {
                              $('#'+this.pgmid+'EXPENSE_AMT_CARD').val(this.$options.filters.numberformat(to_number(this.curItem.SUPPLY_AMT) + to_number(this.curItem.ETC_AMT),'0,000'));
                              $('#'+this.pgmid+'EXPENSE_VAT_AMT_CARD').val(this.$options.filters.numberformat(this.curItem.VAT_AMT,'0,000'));
                          }else{
                              $('#'+this.pgmid+'EXPENSE_AMT_CARD').val(this.$options.filters.numberformat(this.curItem.EXPENSE_AMT,'0,000'));
                              $('#'+this.pgmid+'EXPENSE_VAT_AMT_CARD').val(this.$options.filters.numberformat(this.curItem.EXPENSE_VAT_AMT,'0,000'));
                          }
                          
//                           if (!isEmpty(this.curItem.FILE_NO)) {
//                         	  this.$refs.cardimg.setUrl('/ec/common/syscommon/fileupload/downloadFile/'+this.curItem.FILE_NO,this.curItem.FILE_NO ); // 비용청구인
//                           }
                          //관리항목 조회
                          this.setReceiptMng({CODE:this.curItem.EXPENSE_CD});
                          
                          // 적요
                          $('#'+this.pgmid+'RMK_CARD').val(this.curItem.RMK);
                          
                          //
                          //disableButton  , cardimg  // u(편집),m(확대),s(선택),d(삭제)   
                          if (this.curItem.APPROVE_STATUS =='2' || this.curItem.APPROVE_STATUS =='4') {
                             this.$refs.cardimg.disableButton('usd');
                          }else{
                        	 this.$refs.cardimg.enableAllButton();
                          }
                          

                      }else if (this.curItem.TYPE=="GAS"){ // GAS ==================================================================
                    	  
                          if (isEmpty(this.curItem.EXPENSE_EMP_NO) == true) {
                              //비용사용자
                              this.$refs.popupgasemp.setData('[[${session.g_empNo}]]','[[${session.g_empNm}]]'); // 비용청구인
                              this.curItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]';
                              this.curItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]'; 
                          }else{
                              //비용사용자
                              this.$refs.popupgasemp.setData(this.curItem.EXPENSE_EMP_NO,this.curItem.EXPENSE_EMP_NM); // 비용청구인
                          }
                      
                          this.tempCurItem.FILE_NO = this.curItem.FILE_NO;
                          
                          this.$refs.RECEIPT_DT_GAS.setData(this.curItem.RECEIPT_DT);
                        //popup code
                          this.$refs.popupexpgas.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                          
                        //  $('#'+this.pgmid+"DISTANCE").val(this.curItem.DISTANCE);
                        
                        //유종
                          if (isEmpty(this.curItem.MILEAGE_RATE_CD)){
                              $('#'+this.pgmid+"getGasRate").prop('selectedIndex', 0);
                              //계산
                              this.changeGasRate();
                          }else{
                              $('#'+this.pgmid+'getGasRate').val(this.curItem.MILEAGE_RATE_CD);
                          }
                          
                          this.distanceCalcType = this.curItem.DISTANCE_TP;
                          this.$refs.EX_DISTANCE_CALC_TP.setData(this.curItem.DISTANCE_TP);
                          
                          this.$refs.EX_DISTANCE_CALC_TP.setDisable(false);
                          
                          if (this.distanceCalcType == '3') { // 
                              if (isEmpty(this.curItem.EXPENSE_NO)){
                                  this.$refs.odoimg.getFiles('/ex/expense/expensemst/getFilesByGroupNo', {GROUP_NO : this.curItem.GROUP_NO} ); // 비용청구인
                              }else{
                               	 this.$refs.odoimg.getFiles('/ex/expense/expensemst/getExpenseFilesByNo', {EXPENSE_NO : this.curItem.EXPENSE_NO} ); // 비용청구인
                              }    
                          }else if (this.distanceCalcType == '4') { //  
                                  this.$refs.EX_DISTANCE_CALC_TP.setDisable(true);
                                                       
                          }                   
//                           if (isEmpty(this.marker_start.lat)){ 
//                               customAlert("","","<span class='f-s-15'><strong>출발지를 검색하세요.</strong></span>");
//                               return;
//                           }
//                           if (isEmpty(this.marker_end.lat)){ 
//                               customAlert("","","<span class='f-s-15'><strong>도착지를 검색하세요.</strong></span>");
//                               return;
//                           }
                          
//                           var passLeng = this.curItem_pass.length;
//                           if(passLeng > 0) {
//                         	  var inputCheck = false
//         	                  for(idx in this.curItem_pass) {
//         	                	  if(isEmpty(this.marker_pass[idx])) {
//         	                		  inputCheck = true;
//         	                		  break;
//         	                	  }
//         	          		  }
//                         	  if(inputCheck) {
//         	               		  customAlert("","","<span class='f-s-15'><strong>경유지를 검색하세요.</strong></span>");
//         	                      return false;
//                         	  }
//                           }
                           
                          
                          //지도 초기화
                          //this.initMap();
                          
                          if(this.curItem_pass.length > 0) for(idx in this.curItem_pass) $('#'+this.pgmid+'passAddr'+idx).val('');
                          this.curItem_pass = [];
                          this.tempCurItem.PASS_ITEMS = [];
                          this.marker_start = {};
                          this.marker_end = {};
                          this.marker_pass = [];
                          $('#'+this.pgmid+'StartAddr').val('');
                          $('#'+this.pgmid+'EndAddr').val('');
                          this.$nextTick(function () {
                              window.dispatchEvent(new Event('resize'));
                          });
                          
                          
                          //코스트센터
                          this.receiptcosttype   = this.curItem.BELONGING_TP;
                          this.receiptbelongtype = this.curItem.BELONGING_TP;
                          
                          this.$refs.popupcostcentergas.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                          this.$refs.popupprojectgas.setData(this.curItem.PS_CD,this.curItem.PS_NM);                          
                          
                          if (isEmpty(this.curItem.EXPENSE_NO)) {
                              $('#'+this.pgmid+"GAS_CCENTER_TP").prop('selectedIndex', 0);
                          }else{
                              $('#'+this.pgmid+'GAS_CCENTER_TP').val(this.curItem.BELONGING_TP);
                          }                         
                          
                         $('#'+this.pgmid+'EXPENSE_AMT_GAS').val(numberformat(this.curItem.EXPENSE_AMT,'0,000'));
                         
                         
                         
                          if (this.distanceCalcType == '2'){ //  tmap 지도
                              this.getGpsList(this.curItem.EXPENSE_NO);
                           }   
                         
                         
                          
                          
                      }else if (this.curItem.TYPE=="TRAVEL"){ // TRAVEL ==================================================================
                    	  var ref = this;
                          this.$nextTick(function () {
                        	  ref.bizTripCalGridView  = ref.$refs.gridbiztrip.myGridID;
                               
                               // 선택 변경 이벤트 바인딩 (master-detail구조에서 필요)
                               AUIGrid.bind(ref.bizTripCalGridView, "cellEditEnd", ref.auiGridBizTripUpdateHandler);
           			  		});
                          this.BIZTRIP_RATES = [];
                    	  
//                     	  this.bizTripCalGridView  = this.$refs.gridbiztrip.myGridID;

                          //비용사용자
                             if (isEmpty(this.curItem.EXPENSE_EMP_NO) == true) {
                                 //비용사용자
                                 this.$refs.popuptravelemp.setData('[[${session.g_empNo}]]','[[${session.g_empNm}]]'); // 비용청구인
                                 this.curItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;   
                                 this.curItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;   
                                 
                             }else{
                                 //비용사용자
                                 this.$refs.popuptravelemp.setData(this.curItem.EXPENSE_EMP_NO,this.curItem.EXPENSE_EMP_NM); // 비용청구인
                             }                           
                             
                          this.$refs.biztriprange.setData(this.curItem.BIZTRIP_START, this.curItem.BIZTRIP_END);
                          this.$refs.BizTripType.setDropDown(this.curItem.BIZTRIP_START); 
                          
                        //popup code
                          this.$refs.popupexptravel.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                          this.$refs.popupcostcentertravel.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                          this.$refs.popupprojecttravel.setData(this.curItem.PS_CD,this.curItem.PS_NM);
                          
                          this.receiptcosttype = this.curItem.BELONGING_TP;
                          this.receiptbelongtype = this.curItem.BELONGING_TP;
                          
                          this.$refs.TRAVEL_CCENTER_TP.setValue(this.curItem.BELONGING_TP);
                          
                          this.currencyRate = parseFloat(this.curItem.CURRENCY_RATE).toFixed(4);
                          this.currencyDt = this.curItem.CURRENCY_DT
                          this.currencyCd = this.curItem.CURRENCY_CD
                          
                          $('#'+this.pgmid+'getBizTripType').val(this.curItem.BIZTRIP_TP);
                          $('#'+this.pgmid+'EXPENSE_AMT_TRAVEL').val( this.$options.filters.numberformat(parseFloat(this.curItem.EXPENSE_AMT),"0,000" ));
                          $('#'+this.pgmid+'BIZTRIP_DAYS').val(this.curItem.BIZTRIP_DAYS);
                          $('#'+this.pgmid+'RMK_TRAVEL').val(this.curItem.RMK);
                          
                          this.tempCurItem.FILE_NO = this.curItem.FILE_NO;
                          
                          this.marker_start = {};
                          this.marker_end = {};
//                           $('#'+this.pgmid+'officeLoc').val('');
//                           $('#'+this.pgmid+'travelLoc').val('');
                          this.$nextTick(function () {
                              window.dispatchEvent(new Event('resize'));
                          });

                          if(!isEmpty(this.curItem.DISTANCE)) {
                        	  $('#'+this.pgmid+'TRAVELDIST').val(this.curItem.DISTANCE)
                          } 
                          
                          if(this.curItem.BIZTRIP_CAL_MTHD == '20') {
                          	this.bizTripCalSum =  this.curItem.EXPENSE_AMT;
                          }
                          
                       	  $("#" + this.pgmid+ "biztripCalType" +this.curItem.BIZTRIP_CAL_MTHD).prop("checked", true);
                       	  this.biztripCalTypeClick(this.curItem.BIZTRIP_CAL_MTHD);
                       	  
                      }
                   this.setReceiptCostCenter({REF4 : this.curItem.BELONGING_TYPE});
                      
                      
                  }, // openDetail
                  
                openGas : function() {
                	//티맵 API URL 저장
                	this.getTmapApiUrls();
                    
                      this.marker_start = {};
                      this.marker_end = {};
                      this.marker_pass = [];
                      this.curItem = {};
                      this.curItem.TYPE = "GAS";
                      this.curItem.SOURCE_TP = "4";
                      this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
                      //this.curItem.RECEIPT_DT = moment().format('YYYYMMDD');
                      this.curItem.EXPENSE_NO = "";
                      this.curItem.ODOMETER_START = "";
                      this.curItem.ODOMETER_END = "";
                      this.curItem.DISTANCE = "";
                      
                      this.curItem.EXPENSE_AMT = "";
                      this.tempCurItem = {};
                      this.tempCurItem.PASS_ITEMS = [];
                      this.receiptMngList = {};
                      this.receiptcosttype = "1";
                      this.receiptbelongtype = "3";  
                      
                      //비용사용자
                      this.tempCurItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;  
                      this.tempCurItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;                        
                      this.$refs.popupgasemp.setData(this.tempCurItem.EXPENSE_EMP_NO,this.tempCurItem.EXPENSE_EMP_NM); // 비용청구인
                      
                      $('#'+this.pgmid+'EXPENSE_AMT_GAS').val("");
                      
                      this.$refs.RECEIPT_DT_GAS.setData(moment().format('YYYYMMDD'));
                      this.$refs.popupexpgas.setData("","");
                      this.$refs.popupcostcentergas.setData("","");
                      this.$refs.popupprojectgas.setData("","");
                      this.distanceCalcType = '2';
                      this.$refs.EX_DISTANCE_CALC_TP.setData(this.distanceCalcType);
                      
                      //odometer 초기화
                      this.odometerStartFile = "";
                      this.odometerEndFile = "";
                      
                      // ec-img
                      this.$refs.odoimg.setUrl('');
                      
                      this.$refs.EX_DISTANCE_CALC_TP.setDisable(false);
                      this.$refs.EX_DISTANCE_CALC_TP.setDisableItem('4'); // 4번 gps 신규금지
                      //지도 초기화
                      
                      
                      if(this.curItem_pass.length > 0) for(idx in this.curItem_pass) $('#'+this.pgmid+'passAddr'+idx).val('');
                    	  
                      this.curItem_pass = [];
                      $('#'+this.pgmid+'StartAddr').val('');
                      $('#'+this.pgmid+'EndAddr').val('');
                      
                      var ref = this;
                      ref.initMap();   
                      
                  }, // openDetail
                  
                 //초기화 시 사용
                  openCard : function() {
                	  
                	  this.curItem.EXPENSE_NO = '';
                	  this.curItem.EXPENSE_CD = '';
                	  this.curItem.EXPENSE_NM = '';
                	  this.curItem.FILE_NO = '';
                	  this.curItem.REPORT_TP_NM = '';
                      this.$refs.popupexpcard.setData(this.curItem.EXPENSE_CD,this.curItem.EXPENSE_NM);
                      
                      
                      this.$refs.popupexpcard.setkeycode(this.curItem.EVID_NO);
                      if (isEmpty(this.curItem.EXPENSE_CD)){
                          this.$refs.popupexpcard.callrecents(this.curItem.BIZ_NO);
                      }else{
                          this.$refs.popupexpcard.clearrecents();
                      }
                      
                      
                      this.$refs.RECEIPT_DT_CARD.setData(this.curItem.RECEIPT_DT.substring(0, 8));
                    
                      this.receiptcosttype   = this.curItem.BELONGING_TP;
                      this.receiptbelongtype = this.curItem.BELONGING_TP;
                      
                      
                      this.curItem.CCTR_CD='';
                      this.curItem.CCTR_NM='';
                      this.curItem.PS_CD='';
                      this.curItem.PS_NM='';
                      
                      this.$refs.popupcostcentercard.setData(this.curItem.CCTR_CD,this.curItem.CCTR_NM);
                      this.$refs.popupprojectcard.setData(this.curItem.PS_CD,this.curItem.PS_NM); 

                      this.$refs.cardimg.setUrl('');
                      
                      
                      if (isEmpty(this.curItem.EXPENSE_NO)) {
                          $('#'+this.pgmid+"CARD_CCENTER_TP").prop('selectedIndex', 0);
                      }else{
                          $('#'+this.pgmid+'CARD_CCENTER_TP').val(this.curItem.BELONGING_TP);
                      }
                      
                      
                      this.curItem.EXPENSE_AMT = 0;
                      this.curItem.EXPENSE_VAT_AMT = 0;
                      this.curItem.EXCLUDE_AMT = 0;
                      
                      if (isEmpty(this.curItem.EXPENSE_NO)) {
                          $('#'+this.pgmid+'EXPENSE_AMT_CARD').val(this.$options.filters.numberformat(to_number(this.curItem.SUPPLY_AMT) + to_number(this.curItem.ETC_AMT),'0,000'));
                          $('#'+this.pgmid+'EXPENSE_VAT_AMT_CARD').val(this.$options.filters.numberformat(this.curItem.VAT_AMT,'0,000'));
                      }else{
                          $('#'+this.pgmid+'EXPENSE_AMT_CARD').val(this.$options.filters.numberformat(this.curItem.EXPENSE_AMT,'0,000'));
                          $('#'+this.pgmid+'EXPENSE_VAT_AMT_CARD').val(this.$options.filters.numberformat(this.curItem.EXPENSE_VAT_AMT,'0,000'));
                      }
                      
                      //관리항목 조회
                      this.setReceiptMng({CODE:this.curItem.EXPENSE_CD});
                          
                  }, // openDetail                   
                  
                openReceipt : function() {
                      
                      this.curItem = {};
                      this.curItem.TYPE = "RECEIPT";
                      this.curItem.SOURCE_TP = "2";
                      this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
                    
                   
                   
                      this.curItem.FILE_NO ="";
                      this.curItem.FILE_LIST =[];
                      this.curItem.EXPENSE_NO = "";
                      this.curItem.EXPENSE_AMT = "";
                      
                      this.curItem.CURRENCY_AMT = "";
                      this.curItem.CURRENCY_RATE = "";
                      this.curItem.CURRENCY_DT = "";
                      this.curItem.CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                      this.curItem.BASE_CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                      
                      this.curItem.RMK = "";
                      this.tempCurItem = {};
                      
                      this.receiptMngList = [];
                      this.receiptcosttype = "1";
                      this.receiptbelongtype = "3";                      
                      
                      //비용사용자
                      this.tempCurItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;  
                      this.tempCurItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ; 
                     this.$refs.popupreceiptemp.setData(this.tempCurItem.EXPENSE_EMP_NO,this.tempCurItem.EXPENSE_EMP_NM); // 비용청구인                     
                     // ec-img
                      this.$refs.receiptimg.setUrl('');
                     
                      
                      $('#'+this.pgmid+'RECEIPT_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                     this.$refs.CURRENCY_AMT.setData('');
                      $('#'+this.pgmid+'RMK_RECEIPT').val('');
                      this.$refs.RECEIPT_DT_RECEIPT.setData(moment().format('YYYYMMDD'));
                      this.$refs.popupexpreceipt.setData("","");
                      this.$refs.popupcostcenterreceipt.setData("","");
                      this.$refs.popupprojectreceipt.setData("","");
                      
                      $('#'+this.pgmid+"RECEIPT_CCENTER_TP").prop('selectedIndex', 0);
                      // 환율읽어오기
                      this.curCdChange();
                      
                      this.$nextTick(function () {
                          window.dispatchEvent(new Event('resize'));
                      });   
                          
                  }, // openDetail                 
                  
                openPrepay : function() {
                      
                      this.curItem = {};
                      this.curItem.TYPE = "PREPAY";
                      this.curItem.SOURCE_TP = "8";
                      this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
                      this.curItem.FILE_NO ="";
                      this.curItem.EXPENSE_NO = "";
                      this.curItem.EXPENSE_AMT = "";
                      
                      this.curItem.CURRENCY_AMT = "";
                      this.curItem.CURRENCY_RATE = "";
                      this.curItem.CURRENCY_DT = "";
                      this.curItem.CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                      this.curItem.BASE_CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                      
                      this.curItem.RMK = "";
                      this.tempCurItem = {};
                      
                      this.receiptMngList = [];
                      this.receiptcosttype = "1";
                      this.receiptbelongtype = "3";                      
                      
                      //비용사용자
                      this.tempCurItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;  
                      this.tempCurItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;                        
                      this.$refs.popupprepayemp.setData(this.tempCurItem.EXPENSE_EMP_NO,this.tempCurItem.EXPENSE_EMP_NM); // 비용청구인                     
                      
                      // ec-img
                      this.$refs.prepayimg.setUrl('');
                      
                      $('#'+this.pgmid+'PREPAY_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                    //  $('#'+this.pgmid+'CURRENCY_RATE').val('');
                      this.$refs.CURRENCY_AMT_PREPAY.setData('');
                      $('#'+this.pgmid+'RMK_PREPAY').val('');
                      this.$refs.RECEIPT_DT_PREPAY.setData(moment().format('YYYYMMDD'));
                      this.$refs.popupexpprepay.setData("","");
                      this.$refs.popupcostcenterprepay.setData("","");
                      this.$refs.popupprojectprepay.setData("","");
                      
                      $('#'+this.pgmid+"PREPAY_CCENTER_TP").prop('selectedIndex', 0);
                      // 환율읽어오기
                      this.curCdChange();
                      
                      this.$nextTick(function () {
                          window.dispatchEvent(new Event('resize'));
                      });   
                          
                  }, // openDetail
               // 일반비용
               openGen : function() {
                      
                      this.curItem = {};
                      this.curItem.TYPE = "GEN";
                      this.curItem.SOURCE_TP = "9";
                      this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
                      this.curItem.FILE_NO ="";
                      this.curItem.EXPENSE_NO = "";
                      this.curItem.EXPENSE_AMT = "";
                      
                      this.curItem.CURRENCY_AMT = "";
                      this.curItem.CURRENCY_RATE = "";
                      this.curItem.CURRENCY_DT = "";
                      this.curItem.CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                      this.curItem.BASE_CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                      
                      this.curItem.RMK = "";
                      this.tempCurItem = {};
                      
                      this.receiptMngList = [];
                      this.receiptcosttype = "1";
                      this.receiptbelongtype = "3";                      
                      
                      //비용사용자
                      this.tempCurItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;  
                      this.tempCurItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;                        
                      this.$refs.popupgenemp.setData(this.tempCurItem.EXPENSE_EMP_NO,this.tempCurItem.EXPENSE_EMP_NM); // 비용청구인                     
                      
                      // ec-img
                      this.$refs.genimg.setUrl('');
                      
                      $('#'+this.pgmid+'GEN_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                    //  $('#'+this.pgmid+'CURRENCY_RATE').val('');
                      this.$refs.CURRENCY_AMT_GEN.setData('');
                      $('#'+this.pgmid+'RMK_GEN').val('');
                      this.$refs.RECEIPT_DT_GEN.setData(moment().format('YYYYMMDD'));
                      this.$refs.popupexpgen.setData("","");
                      this.$refs.popupcostcentergen.setData("","");
                      this.$refs.popupprojectgen.setData("","");
                      
                      $('#'+this.pgmid+"GEN_CCENTER_TP").prop('selectedIndex', 0);
                      // 환율읽어오기
                      this.curCdChange();
                      
                      this.$nextTick(function () {
                          window.dispatchEvent(new Event('resize'));
                      });   
                          
                  }, // openGen
                  // 경조금ATM
                  openAtm : function() {
                         
                         this.curItem = {};
                         this.curItem.TYPE = "ATM";
                         this.curItem.SOURCE_TP = "7";
                         this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
                         this.curItem.FILE_NO ="";
                         this.curItem.EXPENSE_NO = "";
                         this.curItem.EXPENSE_AMT = "";
                         
                         this.curItem.CURRENCY_AMT = "";
                         this.curItem.CURRENCY_RATE = "";
                         this.curItem.CURRENCY_DT = "";
                         this.curItem.CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                         this.curItem.BASE_CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                         
                         this.curItem.RMK = "";
                         this.tempCurItem = {};
                         
                         this.receiptMngList = [];
                         this.receiptcosttype = "1";
                         this.receiptbelongtype = "3";                      
                         
                         //비용사용자
                         this.tempCurItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;  
                         this.tempCurItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;                        
                         this.$refs.popupatmemp.setData(this.tempCurItem.EXPENSE_EMP_NO,this.tempCurItem.EXPENSE_EMP_NM); // 비용청구인                     
                         
                         // ec-img
                         this.$refs.atmimg.setUrl('');
                         
                         $('#'+this.pgmid+'ATM_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                       //  $('#'+this.pgmid+'CURRENCY_RATE').val('');
                         this.$refs.CURRENCY_AMT_ATM.setData('');
                         $('#'+this.pgmid+'RMK_ATM').val('');
                         this.$refs.RECEIPT_DT_ATM.setData(moment().format('YYYYMMDD'));
                         this.$refs.popupexpatm.setData("","");
                         this.$refs.popupcostcenteratm.setData("","");
                         this.$refs.popupprojectatm.setData("","");
                         
//                          this.$refs.popupexpatm.setIndex(0);
                         
                         $('#'+this.pgmid+"ATM_CCENTER_TP").prop('selectedIndex', 0);
                         // 환율읽어오기
                         this.curCdChange();
                         
                         this.$nextTick(function () {
                             window.dispatchEvent(new Event('resize'));
                         });   
                             
                     }, // 경조금ATM     
                     // 경조금 현금
                     openCon : function() {
                            this.curItem = {};
                            this.curItem.TYPE = "CON";
                            this.curItem.SOURCE_TP = "5";
                            this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
                            this.curItem.FILE_NO ="";
                            this.curItem.EXPENSE_NO = "";
                            this.curItem.EXPENSE_AMT = "";
                            
                            this.curItem.CURRENCY_AMT = "";
                            this.curItem.CURRENCY_RATE = "";
                            this.curItem.CURRENCY_DT = "";
                            this.curItem.CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                            this.curItem.BASE_CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
                            
                            this.curItem.RMK = "";
                            this.tempCurItem = {};
                            
                            this.receiptMngList = [];
                            this.receiptcosttype = "1";
                            this.receiptbelongtype = "3";                      
                            
                            //비용사용자
                            this.tempCurItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;  
                            this.tempCurItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;                        
                            this.$refs.popupconemp.setData(this.tempCurItem.EXPENSE_EMP_NO,this.tempCurItem.EXPENSE_EMP_NM); // 비용청구인                     
                            
                            // ec-img
                            this.$refs.conimg.setUrl('');
                            
                            $('#'+this.pgmid+'CON_CURRENCY').val('[[${session.g_baseCurrencyCd}]]');
                          //  $('#'+this.pgmid+'CURRENCY_RATE').val('');
                            this.$refs.CURRENCY_AMT_CON.setData('');
                            $('#'+this.pgmid+'RMK_CON').val('');
                            this.$refs.RECEIPT_DT_CON.setData(moment().format('YYYYMMDD'));
                            this.$refs.popupexpcon.setData("","");
                            this.$refs.popupcostcentercon.setData("","");
                            this.$refs.popupprojectcon.setData("","");
                            
                            $('#'+this.pgmid+"CON_CCENTER_TP").prop('selectedIndex', 0);
                            // 환율읽어오기
                            this.curCdChange();
                            
                            this.$nextTick(function () {
                                window.dispatchEvent(new Event('resize'));
                            });   
                                
                        }, // 경조금 현금                 
               openToll : function() {
                      
                      this.curItem = {};
                      this.curItem.TYPE = "TOLL";
                      this.curItem.SOURCE_TP = "6";
                      this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
                      this.curItem.FILE_NO ="";
                      this.curItem.EXPENSE_NO = "";
                      this.curItem.EXPENSE_AMT = "";
                      
//                       this.curItem.RMK = "";
                      this.tempCurItem = {};
                      
                      this.receiptcosttype = "1";
                      this.receiptbelongtype = "3";    
                      
                      //비용사용자
                      this.tempCurItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;  
                      this.tempCurItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;                        
                      this.$refs.popuptollemp.setData(this.tempCurItem.EXPENSE_EMP_NO,this.tempCurItem.EXPENSE_EMP_NM); // 비용청구인                     
                      // ec-img
                      this.$refs.tollimg.setUrl('');
                      // 비용항목 , 코스트센터
                      $('#'+this.pgmid+"TOLL_CCENTER_TP").prop('selectedIndex', 0);
                      this.$refs.popupexptoll.setData("","");
                      this.$refs.popupcostcentertoll.setData("","");
                      this.$refs.popupprojecttoll.setData("","");                      
                      
                      this.$refs.RECEIPT_DT_TOLL.setData(moment().format('YYYYMMDD')); // 날짜
                      $('#'+this.pgmid+"EXPENSE_AMT_TOLL").val('');
                      $('#'+this.pgmid+"RMK_TOLL").val('');
                      
                      //초기화 : 그리드, pdf, dropzone, img, canvas
                      this.tollOcrList = [];
                      this.$refs.gridtoll.setGridData(this.tollOcrList);
                      
                      var ref = this;
                      this.$nextTick(function () {
	                   	   setTimeout(function(){  
	                   		    window.dispatchEvent(new Event('resize'));
	                       }, 500);    
                     });    
                      
                          
                  }, // openDetail   
                  tollUploaded: function(file) { //
            		   pdfToText(file, this.pdfToTextCallback,"data");
                	   
                  },
                  

                  openTravel : function() { //일당
                	  var ref = this;
                      this.$nextTick(function () {
                    	  ref.bizTripCalGridView  = ref.$refs.gridbiztrip.myGridID;
                           
                           // 선택 변경 이벤트 바인딩 (master-detail구조에서 필요)
                           AUIGrid.bind(ref.bizTripCalGridView, "cellEditEnd", ref.auiGridBizTripUpdateHandler);
       			  	    });
                      	this.BIZTRIP_RATES = [];
	                	//티맵 API URL 저장
	                  	this.getTmapApiUrls();
	                  	this.marker_start = {};
	                    this.marker_end = {};
	                	  
	                    this.curItem = {};
	                    this.curItem.TYPE = "TRAVEL";
	                    this.curItem.SOURCE_TP = "3";
	                    this.curItem.SOURCE_TP_NM = getGridDropdownRendererName('SOURCE_TP', this.curItem.SOURCE_TP );
	                    this.curItem.EXPENSE_NO = "";
	                    this.curItem.EXPENSE_AMT = "";
	                    this.curItem.DISTANCE = "";
	                    this.BIZTRIP_CAL_MTHD = '10'
	                    
	                    //this.curItem.BIZTRIP_DAYS = "1";
	                    this.curItem.CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';
	                    this.currencyCd = this.curItem.CURRENCY_CD;
	                    this.curItem.BASE_CURRENCY_CD = '[[${session.g_baseCurrencyCd}]]';  
	                    $('#'+this.pgmid+'EXPENSE_AMT_TRAVEL').val('');
	                    $('#'+this.pgmid+'TRAVELDIST').val(null);
	                    $('#'+this.pgmid+'BIZTRIP_DAYS').val('1');
	                    $('#'+this.pgmid+'RMK_TRAVEL').val('');
	                    $('#'+this.pgmid+'TRAVEL_CCENTER_TP').val('1');
	                    $('#'+this.pgmid+'TRAVEL_CCENTER_TP').prop('disabled',false);
// 	                    $("#" + this.pgmid+ "biztripCalType" +this.curItem.BIZTRIP_CAL_MTHD).prop("checked", true);
	                    
	                  //금액계산방법 유형}
	                    $('#'+this.pgmid+"getBizTripType").prop('selectedIndex', 0);
	                    
	                    this.tempCurItem = {};
	                    
	                    //초기화
                        //비용사용자
                        this.tempCurItem.EXPENSE_EMP_NO = '[[${session.g_empNo}]]' ;  
                        this.tempCurItem.EXPENSE_EMP_NM = '[[${session.g_empNm}]]' ;                        
                        this.$refs.popuptravelemp.setData(this.tempCurItem.EXPENSE_EMP_NO,this.tempCurItem.EXPENSE_EMP_NM); // 비용청구인

	                    this.$refs.biztriprange.setData(moment().format('YYYYMMDD'), moment().format('YYYYMMDD'));
	                    
	                    this.$refs.BizTripType.setDropDown(moment().format('YYYYMMDD')); 
	                    
	                    $('#' + this.pgmid + 'bizTrip_type_A').removeClass('d-none');
		        		$('#' + this.pgmid + 'bizTrip_type_B').addClass('d-none');
		        		
	                    this.$refs.popupexptravel.setData('',''); 
	                    this.$refs.popupcostcentertravel.setData('',''); 
	                    this.$refs.popupprojecttravel.setData('',''); 
	                    
	                    this.receiptMngList = {};
	                    this.receiptcosttype = "1";
	                    this.receiptbelongtype = "3";  
	                    
// 	                    this.initTravelMap();
	                    //근무지 조회
	                    this.getOfficeLoc();
	                    
	                    this.bizTripCalSum = 0;
	                    this.biztripCalTypeClick('10')
                    
                  }, // openTravel    
                  
                  
// ================================================= 출장비 ======================================================

	//                출장비 map 초기화
            initTravelMap : function (){
            	  $("#"+this.pgmid+"travel_map_div").children().remove();
                  this.mapTravel = new Tmapv2.Map(this.pgmid+"travel_map_div", {
                      center : new Tmapv2.LatLng(37.570028, 126.986072),
                      width : "100%",
                      height : isMobile() ? "250px" : "510px",
                      zoom : 15,
                      zoomControl : true,
                      scrollwheel : true,
                      httpsMode: true,
                  });
                  this.tempCurItem.FILE_NO = "";
                  
                  var ref = this;
                  this.$forceUpdate();
                  this.$nextTick(function () {
                 	   setTimeout(function(){  
                 		    window.dispatchEvent(new Event('resize'));
                     }, 500);
                   });
                  
             },
             
             getOfficeLoc : function() {
           	  	 var param = {
                         svcId:"search",
                         strUrl:"/ex/exp/expMyOffice/search",   
                         param : {},
                         pCall : this.getOfficeLocCallBack,  
                         pLoad : true
                 };
            	//트랜젝션 실행
                 ajaxReadJsonData(param); 
             },
             getOfficeLocCallBack : function(svcId, data) {
            	 var result = data.ds_result.data
            	 if(result != null) {
            		this.curItem.START_ADDR = result.OFFICE_ADDR;
            		this.curItem.START_LAT = result.OFFICE_LAT;
            		this.curItem.START_LONG = result.OFFICE_LONG;
            		this.initTravelMap();
            	 	this.travelAddMarker("llStart", result.OFFICE_LONG, result.OFFICE_LAT);
                    this.mapTravel.setCenter(new Tmapv2.LatLng(result.OFFICE_LAT,result.OFFICE_LONG));
                    this.$forceUpdate();
            	 } else {
            		this.initTravelMap();
            	 }
             },
             
			//               근무지 저장
             saveOfficeLoc : function () {
            	 if (isEmpty($("#"+this.pgmid+'officeLoc').val())) {
                     customAlert("","","<span class='f-s-15'><strong>근무지를 검색하세요.</strong></span>");
                     return false;
                 }
            	 
                 var param = {
                         svcId:"saveOfficeLoc",
                         strUrl:"/ex/exp/expMyOffice/save",   
                         param : {OFFICE_ADDR: this.curItem.START_ADDR, OFFICE_LAT: this.curItem.START_LAT, OFFICE_LONG: this.curItem.START_LONG},
                         pCall : this.saveOfficeLocCallBack,  
                         pLoad : true
                 };
                 
                 //트랜젝션 실행
                 ajaxReadJsonData(param);               
             },
              
             saveOfficeLocCallBack : function(svcId, data) {
            	 if(data.ErrorCode == 0) {
            		 saveGritter();
            	 } else {
            		 customAlert("", "", data.SVC_MSG_TEXT)
            	 }
             },
                
//                 근무지 설정
              setOfficeLoc : function () {
                  var addr = $("#"+this.pgmid+'officeLoc').val();
                  
                 if (isEmpty(addr)) {
                     customAlert("","","<span class='f-s-15'><strong>근무지를 검색하세요.</strong></span>");
                     return false;
                 }
                  
                  var optionPoi = {
                            "searchKeyword" : addr,
                            "resCoordType" : "WGS84GEO",
                            "reqCoordType" : "WGS84GEO",
                            "count" : 1
                  }
                  var param = {
                          method : "GET",
                          svcId:"setOfficeLoc",
                          strUrl:this.tmapApiUrls.SET_LOCATION, 
                          param : optionPoi, 
                          pCall : this.setOfficeLocCallback, 
                          pLoad : true   ,
                      };
                  
                    ajax_tmap(param);                 
              },
              
              setOfficeLocCallback : function (svcId, data, errCd, msgTp, msgCd, msgText){
                  
                  if (isEmpty(data) == true) {
                      customAlert("","","검색 결과가 없습니다.. 자세한 주소를 입력하세요.");
                      return;
                  }
                  
                   this.initTravelMap();
                   
                   var lat = data.searchPoiInfo.pois.poi[0].frontLat;
                   var lon = data.searchPoiInfo.pois.poi[0].frontLon;
                   var addr = data.searchPoiInfo.pois.poi[0];
                   this.curItem.START_ADDR = "("+ addr.name + ")" +   addr.upperAddrName + ' ' +addr.middleAddrName + ' '+addr.roadName + ' ' + addr.firstBuildNo + ((addr.secondBuildNo=="") ? "" : ((addr.secondBuildNo=="0") ? "" : ('-'+ addr.secondBuildNo)));
                   this.curItem.START_LAT = lat;
                   this.curItem.START_LONG = lon;
                   this.curItem.DISTANCE = '';
                   $('#'+this.pgmid+'TRAVELDIST').val(null);
                   this.travelAddMarker("llStart", lon, lat);
                   
                   this.mapTravel.setCenter(new Tmapv2.LatLng(lat,lon));
                   
//                    var ref = this;
//                    this.marker_start.addListener("dragend", function (evt) {
                	   
//                        ref.marker_start.lat = evt.latLng._lat;
//                        ref.marker_start.lon = evt.latLng._lng;//lon;
//                        ref.searchAddr('searchMarkerStartAddr',ref.marker_start);
//                    });
                   
              },

//				출장지 설정
              setTravelLoc : function () {
                  
                  var addr = $("#"+this.pgmid+'travelLoc').val();
                  if (isEmpty(addr)) {
                      customAlert("","","<span class='f-s-15'><strong>출장지를 입력해주세요.</strong></span>");
                      return false;
                  }
                  
                  var optionPoi = {
                            "searchKeyword" : addr,
                            "resCoordType" : "WGS84GEO",
                            "reqCoordType" : "WGS84GEO",
                            "count" : 1
                  }
                  var param = {
                          method : "GET",
                          svcId:"setEndLoc",
                          strUrl: this.tmapApiUrls.SET_LOCATION, 
                          param : optionPoi, 
                          pCall : this.setTravelLocCallback, 
                          pLoad : true   ,
                      };
                  
                    ajax_tmap(param);    
              },    
              
              setTravelLocCallback : function (svcId, data, errCd, msgTp, msgCd, msgText){
                  
                  if (isEmpty(data) == true){
                      customAlert("","","검색 결과가 없습니다. 자세한 주소를 입력하세요.");
                      return;
                  }
                   this.initTravelMap();
                   var lat = data.searchPoiInfo.pois.poi[0].frontLat;
                   var lon = data.searchPoiInfo.pois.poi[0].frontLon;
                   var addr = data.searchPoiInfo.pois.poi[0];
                   this.curItem.END_ADDR = "("+ addr.name + ")" +   addr.upperAddrName + ' ' +addr.middleAddrName + ' '+addr.roadName + ' ' + addr.firstBuildNo + ((addr.secondBuildNo=="") ? "" : ((addr.secondBuildNo=="0") ? "" : ('-'+ addr.secondBuildNo)));
                   this.curItem.END_LAT = lat;
                   this.curItem.END_LONG = lon;
                   this.curItem.DISTANCE = '';
                   $('#'+this.pgmid+'TRAVELDIST').val(null);

//                    $("#"+this.pgmid+"EndAddr").val(this.curItem.END_ADDR);
                   
                   this.travelAddMarker("llEnd", lon, lat);
                   this.mapTravel.setCenter(new Tmapv2.LatLng(lat,lon));
                   
//                    var ref = this;
//                    this.marker_end.addListener("dragend", function (evt) {
//                        ref.marker_end.lat = evt.latLng._lat;
//                        ref.marker_end.lon = evt.latLng._lng;//lon;
//                        ref.searchAddr('searchMarkerEndAddr',ref.marker_end);
//                    });
              },
              
            //핀 찍기
              travelAddMarker : function (status, lon, lat, draggable) {
              		if(typeof draggable == "undefined") draggable = false
					//출도착경유구분
					//이미지 파일 변경.
					var addrDtl = '';
					
					if(status == "llStart") {
						imgURL = '/custom/image/pin_r_m_s.png';
						addrDtl = this.curItem.START_ADDR;
						if (this.marker_start.isOn){
	                       this.marker_start.setMap(null) ;
	                       this.marker_start.isOn = false;
	                    }
					} else if (status == "llEnd") {
						imgURL = '/custom/image/pin_r_m_e.png';
						addrDtl = this.curItem.END_ADDR;
						if (this.marker_end.isOn){
	                       this.marker_end.setMap(null) ;
	                       this.marker_end.isOn = false;
	                    };
					}
					
					var marker = new Tmapv2.Marker({
						position: new Tmapv2.LatLng(lat,lon),
						icon: imgURL,
						iconSize : new Tmapv2.Size(24, 38),
                        title: addrDtl,
                        label: addrDtl,
                        map : this.mapTravel,
                        draggable : draggable,
					});
					
					if(status == "llStart") {
						this.marker_start = marker;
						this.marker_start.lat = lat;
		                this.marker_start.lon = lon;
		                this.marker_start.isOn = true;
					} else if (status == "llEnd") {
						this.marker_end = marker;
						this.marker_end.lat = lat;
		                this.marker_end.lon = lon;
		                this.marker_end.isOn = true;
					}
			  	},
	             
// 	             출장비 거리 계산
	             travelSearchPath : function() {
	           	  
		           	  if ( !isEmpty(this.curItem.START_LAT) ) { // 기존 저장 건
		           		  this.initTravelMap();
		           	  }
		           	  
		           	  var ref = this;
		             	   setTimeout(function(){  
		             		 ref.travelSearchPathCallback()
	                 }, 500);    
	             }, 
	             
	             travelSearchPathCallback : function() {
	                 
		           	  if ( !isEmpty(this.curItem.START_LAT) ) { // 기존 저장 건
		           		  this.travelAddMarker("llStart", this.curItem.START_LONG, this.curItem.START_LAT, false);
		           		  this.travelAddMarker("llEnd", this.curItem.END_LONG, this.curItem.END_LAT, false); 	          
		             }  
		           	  
		           	  
		           	 if (isEmpty(this.marker_start.lat)){ 
	                     customAlert("","","<span class='f-s-15'><strong>근무지를 검색하세요.</strong></span>");
	                     return;
	                 }
	                 if (isEmpty(this.marker_end.lat)){ 
	                     customAlert("","","<span class='f-s-15'><strong>출장지를 검색하세요.</strong></span>");
	                     return;
	                 }
	                 showLoader();
	                 
	                 var distance = this.marker_start.getPosition().distanceTo(this.marker_end.getPosition());
	                 
	                 var s_latlng = new Tmapv2.LatLng (this.marker_start.lat, this.marker_start.lon);
	                 var e_latlng = new Tmapv2.LatLng (this.marker_end.lat, this.marker_end.lon);
	                 this.curItem.START_LONG = this.marker_start.lon;
	                 this.curItem.START_LAT = this.marker_start.lat;
	                 this.curItem.END_LONG = this.marker_end.lon;
	                 this.curItem.END_LAT = this.marker_end.lat;
	                 
	                 var optionObj = {
	                     reqCoordType:"WGS84GEO", //요청 좌표계 옵셥 설정입니다.
	                     resCoordType:"WGS84GEO",  //응답 좌표계 옵셥 설정입니다.
	                     trafficInfo:"Y"
	                 };
	                 
	                 var params = {
	                     onComplete:this.travelOnComplete,
	                     onProgress:this.onProgress,
	                     onError:this.onError
	                 };
	                 
	                 // TData 객체 생성
	                 var tData = new Tmapv2.extension.TData();
	             
	                 // TData 객체의 경로요청 함수
	                 tData.getRoutePlanJson(s_latlng, e_latlng, optionObj, params);     
	             },
	             
	              travelOnComplete : function (e) {
	                    hideLoader();
	                  
	                    var jsonObject = new Tmapv2.extension.GeoJSON();
	                    
	                    // 총거리
	                    var d = e._responseData.features[0].properties.totalDistance/1000;
	                    
	                    $('#'+this.pgmid+'TRAVELDIST').val(d)
	                    this.curItem.DISTANCE = d;
	                   //비용금액 재계산
	                    this.changeGasRate();
	                    
	                    var lat = (parseFloat(this.marker_start.lat)+parseFloat(this.marker_end.lat))/2;
	                    var lon = (parseFloat(this.marker_start.lon)+parseFloat(this.marker_end.lon))/2;
	                    
	                   	this.mapTravel.setCenter(new Tmapv2.LatLng(lat, lon));
	                   	
	                    this.travelDrawData(e._responseData);
	                    //this.mapOil.setZoom(14);
	                    
	                // 6. 경유지 최적화 결과 반경만큼 지도 레벨 조정
	                   var newData = e._responseData.features;
	                   PTbounds = new Tmapv2.LatLngBounds();
	                   for (var i = 0; i < newData.length; i++) {
	                       var mData = newData[i];
	                       var type = mData.geometry.type;
	                       var pointType = mData.properties.pointType;
	                       if(type == "Point"){
	                           var linePt = new Tmapv2.LatLng(mData.geometry.coordinates[1],mData.geometry.coordinates[0]);
	                           PTbounds.extend(linePt);
	                       } else {
	                           var startPt,endPt;
	                           for (var j = 0; j < mData.geometry.coordinates.length; j++) {
	                               var linePt = new Tmapv2.LatLng(mData.geometry.coordinates[j][1],mData.geometry.coordinates[j][0]);
	                               PTbounds.extend(linePt);
	                           }
	                       }
	                   }
	                   this.mapTravel.fitBounds(PTbounds);                    
	                   hideLoader();
	                   
// 	                   customAlert("","", "<h1 class='text-maintheme text-center f-s-20 f-w-600'>" + d +" km </h1>");
	              }, // onComplete
	              
	              travelDrawData : function (data){
	            		//pin 찍기
	            		//출발지
	          			this.travelAddMarker("llStart", this.curItem.START_LONG, this.curItem.START_LAT, false);
	            		//도착지
	            		this.travelAddMarker("llEnd", this.curItem.END_LONG, this.curItem.END_LAT, false);
	                    
	            		var ar_line = [];
	            		
	            		for (var i = 0; i < data.features.length; i++) {
	            			var feature = data.features[i];
	            			//배열에 경로 좌표 저장
	            			if(feature.geometry.type == "LineString"){
	            				ar_line = [];
	            				for (var j = 0; j < feature.geometry.coordinates.length; j++) {
	            					var startPt = new Tmapv2.LatLng(feature.geometry.coordinates[j][1],feature.geometry.coordinates[j][0]);
	            					ar_line.push(startPt);
	            				}
	            				var polyline = new Tmapv2.Polyline({
	            			        path: ar_line,
	            			        strokeColor: "#ff0000", 
	            			        strokeWeight: 6,
	            			        trafficDefaultColor:"#000000", //교통 정보가 없을 때
		                            trafficType1Color:"#009900", //원할
		                            trafficType2Color:"#7A8E0A", //서행
		                            trafficType3Color:"#8E8111",  //정체
		                            trafficType4Color:"#FF0000",  //정체
	            			        map: this.mapTravel
	            			    });
	            			}
	            		}
	            	},
	            	
	            	// 일자별등록 팝업 버튼
	            	bizTripCalOnclick : function() {
	            		
	            		if($('#'+this.pgmid+'BIZTRIP_DAYS').val() <= 0) {
			        		customAlert('', '', '출장기간을 바르게 입력해주세요.')
			        		return null;
			        	}
			        	 $('#'+this.pgmid+'modal_biztrip_cal').modal('show');
			        	 
	            	},
	            	
	            	getBizTripCalOnclick :function() {
	            		AUIGrid.clearGridData(this.bizTripCalGridView);
			        	 if(!isEmpty(this.curItem.EXPENSE_NO)) {
				             var param = {
		                         svcId:"getExpBizTrip",
		                         strUrl:"/ex/exp/expMyOffice/getExpBizTrip",   
		                         param : {EXPENSE_NO : this.curItem.EXPENSE_NO},
		                         pCall : this.bizTripCalOnclickCallBack,  
		                         pLoad : true
			                 };
			                 
			                 //트랜젝션 실행
			                 ajaxReadJsonData(param); 
			        	 } 
			        		 
		        		 if(isEmpty(this.curItem.EXPENSE_NO) && this.bizTripCalSum == 0) {
		        			 this.addDatesBizTrip();
		        		 }
	            	},
	            	
	            	bizTripCalOnclickCallBack : function(svcId, data) {
	            		this.$refs.gridbiztrip.setGridData(data["ds_result"]['data']);

	            		if(this.bizTripCalSum == 0) {
							var index = []
							for(var i=0;i<this.curItem.BIZTRIP_DAYS;i++){
								index.push(i);
							}
							AUIGrid.removeRow(this.bizTripCalGridView, index);
                            AUIGrid.update(this.bizTripCalGridView);
                            
                            this.addDatesBizTrip();
                            
                            this.BIZTRIP_RATES.push(0);
					 	}
	            	},
	            	
	            	addDatesBizTrip : function () {
	            		$('#'+this.pgmid+'EXPENSE_AMT_TRAVEL').val(this.bizTripCalSum);
// 	            		var frDate = moment(this.$refs.biztriprange.getFrDate()).format('YYYY-MM-DD');
	            		var toDate = moment(this.$refs.biztriprange.getToDate()).format('YYYY-MM-DD');
			        	var duration = $('#'+this.pgmid+'BIZTRIP_DAYS').val();
			        	 
			        	let date = new Date(toDate);
			        	date.setMonth(date.getMonth() + 1);
			        	
			        	for(var i=0; i<duration; i++) {
			        		var newItem = { BIZTRIP_ORDER : duration-i 
			        				, BIZTRIP_DT : date.getFullYear() +""+ date.getMonth() +""+ date.getDate()
//				        				, BIZTRIP_RATE : numberformat( (this.tempCurItem.TRAVEL_RATE * this.currencyRate).toFixed(0), '0,000' ) 
			        		}
							AUIGrid.addRow(this.bizTripCalGridView, newItem, "first");
			        		date.setDate(date.getDate() - 1);
						};
	            	},
			        
	            	//일자별 입력 데이터 저장
			        saveBizTripCal : function() {
			        	
		        		this.bizTripCalSum = AUIGrid.getFooterData(this.bizTripCalGridView)[1].value;
			        	if (AUIGrid.getRowCount(this.bizTripCalGridView) == 0) {
			            	 customGritter("저장할 데이터가 없습니다.");
			            	 return false;
			             }
			        	
			        	var    j = getCRUDdata(this.bizTripCalGridView);
			        	log(j)
		                 if (j.data.length <= 0 ) {
		              	   customAlert('','','변경 건이 없습니다.');
		                     return false;
		                 }
		                 
			        	if (auiValidateGridData(this.bizTripCalGridView, ["BIZTRIP_DT","BIZTRIP_TP", "BIZTRIP_RATE"] ) == false){
		                	 return false
		                } 
			        	
// 			        	this.bizTripCalGridItem = true;
			        	$('#'+this.pgmid+'EXPENSE_AMT_TRAVEL').val(numberformat((this.bizTripCalSum).toFixed(0), '0,000' ));
			        	$('#'+this.pgmid+'modal_biztrip_cal').modal('hide');
			        },
			        
			        // 금액계산방법 이벤트
			        biztripCalTypeClick : function(t) {
			        	$("#" + this.pgmid+ "biztripCalType" +t).prop("checked", true);
			        	var ref = this;
	                    this.$nextTick(function () {
	                        ref.changeTripType();
	                    });
			        	this.curItem.BIZTRIP_CAL_MTHD = t
			        	if(t == '10') {
			        		$('#' + this.pgmid + 'bizTrip_type_A').removeClass('d-none');
			        		$('#' + this.pgmid + 'bizTrip_type_B').addClass('d-none');
			        	} else if(t == '20') {
			        		$('#' + this.pgmid + 'bizTrip_type_B').removeClass('d-none');
			        		$('#' + this.pgmid + 'bizTrip_type_A').addClass('d-none');
			        		this.getBizTripCalOnclick();
			        	}
			        },
			        
			        // 일자별등록 팝업 닫기
			        bizTripModalClose : function() {
			        	$('#'+this.pgmid+'modal_biztrip_cal').modal('hide'); 
			        },
			        
			        // 일자별 일당유형 저장
			        saveExpBizTripCal : function() {
			        	var ds_data = {};
			        	ds_data.EXPENSE_NO = this.curItem.EXPENSE_NO
					    ds_data['ds_master'] = getCRUDdata(this.bizTripCalGridView);
			        	
					    if(!ds_data){ return; }
					    
					    log(ds_data);
					    var param = {
					        svcId:"saveExpBizTrip", 
					        strUrl: "/ex/exp/expMyOffice/saveExpBizTrip",   //전송 url 
					        param : ds_data,        // 전송할 파라미터
					        pCall : this.saveExpBizTripCalCallBack, 
					        pLoad : true          // 로딩이미지 노출 여부  
					    };

					    //트랜젝션 실행
					    ajaxReadJsonData(param); 
			        },
			        
			        saveExpBizTripCalCallBack : function () {
			        	this.getBizTripCalOnclick();
			        },
			        
			        // 일자별 일당유형 - 드롭다운 선택 이벤트
			        auiGridBizTripUpdateHandler : function(e) {
			        	var item = gridDropdownRenderer['BIZTRIP_TP'].list;
			        	var rate = 0;
						for(var i=0,len=item.length; i<len; i++) {
							if(item[i].CODE == e.value) {
								rate = item[i].REF1;
								break;
							}
						}
						var val = rate * this.currencyRate;
			        	this.BIZTRIP_RATES[e.rowIndex] = val;
			        	AUIGrid.updateRow(this.bizTripCalGridView, {'BIZTRIP_RATE':val, 'TRAVEL_RATE':rate}, e.rowIndex);
			        	this.$forceUpdate();
			        },
			        
			        // 모바일버전에서 지도 보이기 토글
			        addMapToggle : function() {
			        	$( '#'+this.pgmid+'travel_map_wrap' ).toggleClass( 'd-none' );
                        window.dispatchEvent(new Event('resize'));
			        },
                  
// ================================================= 출장비  END ======================================================
                  
                  
                  
              //영수증 이미지 get
              getReceiptList : function(type) { 
                  var svcid;
                  if (type == "all") {
                      
                      svcid = 'getReceiptList_all';
                      
                  }else if (type == "modal") {
                      
                      svcid = 'getReceiptList_modal';
                  }
                  
                  var o={};
                  
                  o.ORDERBY = this.orderby;
                  o.SEARCH_FR_DT =  this.$refs.daterange.getFrDate();
                  o.SEARCH_TO_DT =  this.$refs.daterange.getToDate();
                  o.APPROVE_STATUS_LIST  = this.$refs.EX_APPROVE_STATUS.getValue();
                  o.TYPE_LIST  = this.$refs.EX_SOURCE_TP.getValue();
                  
                  var param = {
                          svcId:svcid, 
                          strUrl:"/ec/fi/exp/receipt/getReceiptList", 
                          inDs :  "" ,  
                          param : o, 
                          pCall : this.tranCallBack, 
                          pLoad : true          
                      };
                      //트랜젝션 실행
                      ajaxReadJsonData(param);
              }, // getReceiptList
              clickpopupapprovemp : function() {
            	  this.$refs.popupapprovemp.clickSearch('blur');
            	  this.$refs.popupapprovemp.showModal();
              },
              searchButtonOnClick : function() {
            	  
            	  
                 this.$refs.selectReportType.setData("")
                 this.getReceiptList("all");
                        
                      }, // end of searchButtonOnClick
              
                tranCallBack : function(svcId, data, errCd, msgTp, msgCd, msgText) { //******************************
                      if (svcId=="getReceiptList_all"){
                            if(data["ds_master"]['data'].length >= 0) {
                               this.receiptList = data["ds_master"]['data'];
                               this.selectedReportTypes = [];
                               $('#'+this.pgmid+'selectAll').prop("checked", false);
                               this.$refs.gridmaster.setGridData(this.receiptList);
                               var ref = this;
                               this.$nextTick(function () {
                            	   setTimeout(function(){  
                                	  ref.modalVisible = true; 
                                   }, 500);
                               } )
                               this.$nextTick(function () {
                            	   setTimeout(function(){  
                                       $("#"+ ref.pgmid + 'modal-dialog-detail').draggable({  //  :id="pgmid+'modal-dialog-detail'" 
                                           handle: "."+ref.pgmid + 'receiptmodalheader'  // :class="pgmid+'receiptmodalheader'" >
                                        });
                                   }, 1000);
                               } )       
                               
                                               	 // :id="pgmid+'modal-dialog-detail'"
			                	 setTimeout( function () {
			                		    $("#"+ ref.pgmid+'modal-dialog-detail').draggable({
			                                handle: "."+ref.pgmid + 'modal-header-receipt'  // 
			                             });
			                		    $("#"+ ref.pgmid+'report').children('.modal-dialog').draggable({
			                                handle: "."+ref.pgmid + 'modal-header-receipt'  // 
			                             });                		    
			                		    
			                	 } , 2000 )
                               

                              }
                      }else if (svcId=="getReceiptList_modal"){
                          if(data["ds_master"]['data'].length >= 0) {
                              this.receiptList = data["ds_master"]['data'];
                             // this.setDetail(); // grid 디테일컬럼 데이터 만들기
                              this.$refs.gridmaster.setGridData(this.receiptList);
                              $('#'+this.pgmid+'selectAll').prop("checked", false);
                              var ref=this;
                              
                             if (typeof this.curItem.INDEX == 'undefined') return;
                             
                              this.$nextTick(function () {
                                  var expenseList = ref.receiptList.filter(function (item, index, array) { return item.EXPENSE_NO == ref.curItem.EXPENSE_NO });
                                  ref.curItem = expenseList[0];
                                  ref.tempCurItem = {};
                                  ref.tempCurItem.BELONGING_TP = ref.curItem.BELONGING_TP;
                              });                                     
                              
                            }
                      }else if (svcId=="getReportList"){
                          this.reportList = [];
                          this.reportList = data["ds_master"]['data'];
                      }else if (svcId=="getApproveStatus"){
                          this.approveStatus = data["ds_master"]['data'];                         
                      }else if (svcId=="searchPath"){   // 
                      }else if (svcId=="curCdChange"){   // curCdChange
                         if (data.ds_master.data.length != 0) {
                             this.currencyDt = data.ds_master.data[0].CURRENCY_DT;
                             this.currencyRate = parseFloat(data.ds_master.data[0].CURRENCY_RATE.toFixed(4));
                         }else{
                        	 
                        	 this.currencyDt = "";
                        	 if (this.currencyCd == this.curItem.BASE_CURRENCY_CD){
                        		     this.currencyRate = 1;
                        		// return true;
                        		 }else{
		                             this.currencyRate = 0;
		                             customAlert("","","환율정보가 없습니다.");
                        		 }
                         }
                         this.setAmt();
                         this.$forceUpdate();
                      }else if (svcId=="deleteExpenseItem"){   
                          this.deleteExpenseItemCallback(data);
                         // this.getReceiptList("modal");              
                      }else if (svcId=="deleteMobileExpMstCallBack"){  
                          this.deleteExpenseItemCallback(data);
                          $('#'+ this.pgmid+'modal-detail').modal('hide')
                      }// if
                    },  // tranCallBack
                    
            deleteExpenseItemCallback : function (data) { // 
            	
            	// card일 때는 리스트에서 삭제하지 않고, 초기화만 함.
	            	if (data.TYPE == 'CARD'){
	            		this.curItem =  this.receiptList[data.INDEX];
	                    this.openCard(); // 초기화            	
	            	    return;
	            	}
	            	
	            	var index ;
	            	if (isEmpty(data.INDEX) ) {
 	            		 index = this.curItem.INDEX;
	            	}else{
	            		 index = data.INDEX;
	            	}
                    
                    this.receiptList.splice(index,1);
                    
                    if (index == this.receiptList.length - 1  &&  index != 0){
                        this.openDetail(null, index-1)
                        
                    }else if (index < this.receiptList.length - 1 ){
                        this.openDetail(null, index)
                        
                    }else{
                        // close modal
                        $('#'+ this.pgmid+'modal-detail').modal('hide')
                    }
                    
                    this.resetSelectedReportBtn();
                
            }, // 
            
            //결재 상신
            procApprove : function (){
                
                //필수체크
                if (checkRequiredInput(this.pgmid+"ApproveModalBody") == false){
                    customAlert("필수항목","","필수항목 입력하세요.");  
                    return false;
                };
                
                // 필수체크 결재자  this.approveLine = setArrChangeFlag(this.approveLines[0].APPROVE_LIST,'I');
//                 if (this.approveLine.length < 2){
	            //임시
                if (this.approveLines[0].APPROVE_LIST.length < 2){
                      customAlert("필수항목","","필수항목(결재자) 입력하세요.");  
                    return false;
                };                  
                
//                  var checkedList = this.receiptList.filter(function (item, index, array) {return item.CHECKED == '1'});
                 
//                  if (checkedList.length == 0){
//                      customAlert("필수항목","","선택한 결재 건이 없습니다.");  
//                      return false;
//                  }           
                
                ajaxUploadFile('#'+this.pgmid+'reportAddedFile', null ,this.procApproveCallback);
            },
            procApproveCallback : function (svcId, data, errCd, msgTp, msgCd, msgText) {
                if (data == "") {
                    this.reportFiles = [];
                }else{
                    
                    this.reportFiles = data;
                }
                
                //save
                this.saveApprove();
            },
            
            changeApproveLineSeq : function (el, target, source, sibling){
                
            },
            
            clickExpDetailLog : function(o) {
                var arr = [this.curItem.EXPENSE_NO, this.curItem.REPORT_NO];
                this.$refs[o].getLog(arr);
            },
            
            getApproveStatus : function() {
                
                   var param = {
                           svcId:"getApproveStatus",
                           strUrl:"/ex/expense/report/getApproveStatus", 
                           inDs :  "" ,  
                           param : {}, 
                           pCall : this.tranCallBack, 
                           pLoad : true         
                       };
                       //트랜젝션 실행
                       ajaxReadJsonData(param);     
            
            }, // getApproveStatus
                    
           auiCellEditingHandler : function(event) {
                    if(event.type == "cellEditEnd") {
                    }
                },
          setAmt : function() {
              let curramt = 0;
              if (this.curItem.TYPE == 'RECEIPT') {
                  curramt = parseFloat(to_number(this.$refs.CURRENCY_AMT.getData())); 
                  curramt = curramt  * this.currencyRate; // to_number(  $("#"+this.pgmid+"CURRENCY_RATE").val() );
                  this.expenseAmt = curramt.toFixed(0); 
                  this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
              }else if (this.curItem.TYPE == 'PREPAY') {
                  curramt = parseFloat(to_number(this.$refs.CURRENCY_AMT_PREPAY.getData())); 
                  curramt = curramt  * this.currencyRate; // to_number(  $("#"+this.pgmid+"CURRENCY_RATE").val() );
                  this.expenseAmt = curramt.toFixed(0); 
                  this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
              }else if (this.curItem.TYPE == 'ATM') {
                  curramt = parseFloat(to_number(this.$refs.CURRENCY_AMT_ATM.getData())); 
                  curramt = curramt  * this.currencyRate; // to_number(  $("#"+this.pgmid+"CURRENCY_RATE").val() );
                  this.expenseAmt = curramt.toFixed(0); 
                  this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
              }else if (this.curItem.TYPE == 'CON') {
                  curramt = parseFloat(to_number(this.$refs.CURRENCY_AMT_CON.getData())); 
                  curramt = curramt  * this.currencyRate; // to_number(  $("#"+this.pgmid+"CURRENCY_RATE").val() );
                  this.expenseAmt = curramt.toFixed(0); 
                  this.tempCurItem.EXPENSE_AMT = this.expenseAmt;
              }else if (this.curItem.TYPE == 'GEN') {
                  curramt = parseFloat(to_number(this.$refs.CURRENCY_AMT_GEN.getData())); 
                  curramt = curramt  * this.currencyRate; // to_number(  $("#"+this.pgmid+"CURRENCY_RATE").val() );
                  this.expenseAmt = curramt.toFixed(0); 
                  this.tempCurItem.EXPENSE_AMT = this.expenseAmt;

              }else if (this.curItem.TYPE == 'TRAVEL') {
                  var rate =  dropdownRenderer['getBizTripType'][this.$refs.BizTripType.getIndex()].REF1
                  this.tempCurItem.TRAVEL_RATE = rate;
                  var days = parseFloat(to_number($("#"+this.pgmid+"BIZTRIP_DAYS").val()));
                  if (this.curItem.BIZTRIP_CAL_MTHD == '10') {
                  	$("#"+this.pgmid+"EXPENSE_AMT_TRAVEL").val(  numberformat( (rate * days * this.currencyRate).toFixed(0), '0,000' )  );            	  
                  } else {
                    $('#'+this.pgmid+'EXPENSE_AMT_TRAVEL').val(this.$options.filters.numberformat(parseFloat(this.bizTripCalSum),"0,000" ));
                	  
                  }
                  
                  
              }
              
            
          },
          curAmtChg : function(e) {
        	  this.setAmt();
          },
          
          clickMobileImg : function(url) {
               this.imgModalUrl = url;
               $('#'+this.pgmid+'modal-img').modal('show');
            },
          
          procOcrObj : function(response) {    
            	var str = "";
            	response.images[0].fields.forEach(function(item){
                    str = str + item.inferText;
                });
            	//inferText
            	
            	this.tollOcrList =  getTollsFromString(str);
            	if (this.tollOcrList.length > 0) {
	            	    this.$refs.gridtoll.setGridData(this.tollOcrList);
		            	this.$refs.RECEIPT_DT_TOLL.setData(this.tollOcrList[this.tollOcrList.length-1].RECEIPT_DT);
		                var amt = 0;
		                this.tollOcrList.forEach(function(item){
		                    amt = amt + item.TOT_AMT;
	                    });
                        $('#'+this.pgmid+'EXPENSE_AMT_TOLL').val(numberformat(amt,'0,000'));
            	}            	
            	return str;
            },
            tollDrozoneSucessCallback : function(response) {  
            	
            	if (response.fileType == "image/png"  ) {
            		// server ocr
            		this.curItem.FILE_TYPE = "PNG";
            		this.procOcrObj(jsonParse(response.ocrResult));
                }else if (response.fileType == "image/jpeg"  )  {
                    // js function
                    this.curItem.FILE_TYPE = "JPG";
                    this.procOcrObj(jsonParse(response.ocrResult));
                    //this.procPdfToll(response);
                    
            	}else if (response.fileType == "application/pdf"  )  {
            		// js function
            		this.curItem.FILE_TYPE = "PDF";
            		this.procPdfToll(response);
            	}
          
            },//tollDrozoneSucessCallback 
            completeGridSrcType  : function() {  
            	this.changeSourceType(this.$refs.EX_GRID_SOURCE_TYPE.getValue());
                // EX_GRID_SOURCE_TYPE은 pc용에서만 사용, 
//                 if (!isEmpty(this.$refs.EX_GRID_SOURCE_TYPE)) {
//                 	this.changeSourceType(  this.$refs.EX_GRID_SOURCE_TYPE.getValue());
//                 }
            },
            completeApprStatus  : function() {  
            	
	       		this.approvetpList = gridDropdownRenderer['EX_APPROVE_TP'].list;    
	       		this.$refs.EX_APPROVE_STATUS.setData('1');
	       		this.$refs.EX_APPROVE_STATUS.setData('5');
	       		this.$refs.EX_APPROVE_STATUS.setData('6');
	       		this.isApproveTypeCheckbox = '1'
           
            },
            completeSrcType  : function() {  
            	 this.$refs.EX_SOURCE_TP.setAllData();
            	 this.isSrcTypeCheckbox = '1';
            },
            completeDistnsCalType  : function() {  
            	this.distanceCalcType = dropdownRenderer['EX_DISTANCE_CALC_TP'][0].CODE;
            },
          }, // end of methods
          watch: {
                   viewType: function (newVal, oldVal) {
                        if (newVal == "grid") {
                            this.isGrid = true;this.isBox = false;this.isList = false;
                             this.$nextTick(function () {
                                 window.dispatchEvent(new Event('resize'));
                             });
                             
                        }else if (newVal == "box") {
                            this.isGrid = false;this.isBox = true;this.isList = false;
                        }else if (newVal == "list") {
                            this.isGrid = false;this.isBox = false;this.isList = true;                          
                        }; // if
                   },
                   currencyCd : function (newVal, oldVal) {},
                   isSrcTypeCheckbox : async function (newVal, oldVal) {
                	   if (this.isApproveTypeCheckbox == '1'){
                 		  // search 
                		   this.searchButtonOnClick();
                 	   }
                   },
                   isApproveTypeCheckbox : async function (newVal, oldVal) {
                	   
                	   if (this.isSrcTypeCheckbox == '1'){
                		  // search 
                		   this.searchButtonOnClick();
                	   }
                   }
                   
                },
                updated: function () {
//                 	  if (this.modalVisible == true){return;};
                      var ref = this;
                //      ref.modalVisible = true;
                	  this.$nextTick(function () {
                	     

                	  })
                	},       
          mounted: function() {
        	  
          
             this.user_id = '[[${session.g_userId}]]';
             var ref = this;
             ref.getApproveStatus();
             this.$nextTick(function () {
            	// ref.$refs.selectReportType.addItem({CODE : '-1' , NAME:'미처리' , INDEX : 1 });
     			  window.addEventListener('[[${param.pgm_id}]]Click', function (e) { 
    				  ref.searchButtonOnClick();
    			  }, false);
            	 
            	 // 사용자정의 버튼 툴바로 이동
            	$('#'+ref.pgmid+'midbtn4').append($('#'+ref.pgmid + 'expsourcebtn'));
            	$('#'+ref.pgmid+'midbtn5').append($('#'+ref.pgmid + 'expTypeBtn'));
            	$('#'+ref.pgmid+'midbtn1').append($('#'+ref.pgmid + 'toolbtn'));
                
//                  $('#'+ref.pgmid+'modal-img').on('hidden.bs.modal', function (e) {
//                      ref.imgModalUrl = "";
//                  })
                 
                 AUIGrid.bind(ref.gridView, "cellEditEnd", ref.auiCellEditingHandler);
                 AUIGrid.bind(ref.gridView, "cellDoubleClick", function(event) {
                    if (   !( isEmpty(event.item.SLIP_KEY)) ) {
                         let o = '';
                         o = event.item.SLIP_KEY;
                         goSapSlip(o);
                    }
                 });
                 
                 
				
	              ref.gridView = ref.$refs.gridmaster.myGridID;
                 
	                 //모달 show 이벤트 등록
	                 $('#'+ref.pgmid+'modal-detail').on('shown.bs.modal', function (event) {
	                     window.dispatchEvent(new Event('resize'));
	                 })                  
              
                	 $('#'+ref.pgmid+'collapseExample' ).on('hidden.bs.collapse', function () {
                		  window.dispatchEvent(new Event('resize'));
                		});
                		
                	 $('#'+ref.pgmid+'collapseExample' ).on('shown.bs.collapse', function () {
                		  window.dispatchEvent(new Event('resize'));
                		}) ;   		
                	 
            	
                
                 
              });
             
                this.getTmapApiUrls();
             
//**********************************************************************************************              
             vueArr.push(this);
            },
      }) // end of new Vue

    </script>
   </div> 
   
  </body>
</html>
