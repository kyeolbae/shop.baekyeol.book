package com.ec.eframework.ex.config;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ec.eframework.lib.GridDataMap;
import com.ec.eframework.lib.JsonDataMap;
import com.ec.eframework.lib.JsonResultMsgMap;
import com.ec.eframework.lib.P;
import com.ec.eframework.lib.MapSession;
import com.ec.eframework.mapper.basic.GridDataMultiSave;
import com.ec.eframework.mapper.basic.MyDuplicateKeyException;
import com.ec.eframework.mapper.ex.config.ErpCodeServiceMapper;
import com.ec.eframework.mapper.ex.config.ExpConfigServiceMapper;
import com.ec.eframework.mapper.fi_basis.AcctServiceMapper;

/**
 * 비용항목- 은행
 */	
@Controller
@RequestMapping("ec/ex/config/erpcode")
public class ErpCodeController  {


	@RequestMapping(value = "/page_bank")
	public String page() {
	
	     return "contents/ex/config/expbankcd";
	}
	
	@RequestMapping(value = "/page_costcenter")
	public String page2() {
	
	     return "contents/ex/config/expcostcenter";
	}
	
	@RequestMapping(value = "/page_taxcode")
	public String page3() {
	
	     return "contents/ex/config/exptaxcode";
	}
	
	@RequestMapping(value = "/page_currencycode")
	public String page4() {
	
	     return "contents/ex/config/currencycode";
	}
	
	@RequestMapping(value = "/page_currencyrate")
	public String page5() {
	
	     return "contents/ex/config/currencyrate";
	}
	
	@RequestMapping(value = "/page_plant")
	public String page6() {
	
	     return "contents/ex/config/exp-plant";
	}
	
	@RequestMapping(value = "/page_project")
	public String page7() {
	
	     return "contents/ex/config/exp-project";
	}
	
	@RequestMapping(value = "/page_company")
	public String page8() {
	
	     return "contents/ex/config/exp-company";
	}
	
	@RequestMapping(value = "/m_page_company")
	public String m_page() {
	
	     return "contents/ex/config/m_exp-company";
	}

	@Autowired
	private ErpCodeServiceMapper erpCodeServiceMapper;
	
	@Transactional
	@RequestMapping(value = "/searchExpBankCd" , produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public Map<String, Object>searchExpBankCd(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
		
	    paramMap.putAll((Map)new MapSession(session));
		return new JsonDataMap("ds_master", erpCodeServiceMapper.searchExpBankCd(paramMap));	
	}	
	
	
	@Transactional
	@RequestMapping(value = "/searchExpCostCenter" , produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public Map<String, Object>searchExpCostCenter(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
		
	    paramMap.putAll((Map)new MapSession(session));
		return new JsonDataMap("ds_master", erpCodeServiceMapper.searchExpCostCenter(paramMap));
	}	
	
		
		@Transactional
		@RequestMapping(value = "/searchExpTaxCode" , produces = MediaType.APPLICATION_JSON_VALUE)
		@ResponseBody
		public Map<String, Object>searchExpTaxCode(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
				
			paramMap.putAll((Map)new MapSession(session));
			return new JsonDataMap("ds_master", erpCodeServiceMapper.searchExpTaxCode(paramMap));	
	}
		
		
		@Transactional
		@RequestMapping(value = "/searchCurrencyCode" , produces = MediaType.APPLICATION_JSON_VALUE)
		@ResponseBody
		public Map<String, Object>searchCurrencyCode(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
				
			paramMap.putAll((Map)new MapSession(session));
			return new JsonDataMap("ds_master", erpCodeServiceMapper.searchCurrencyCode(paramMap));	
	}
		
		
		@Transactional
		@RequestMapping(value = "/searchCurrencyRate" , produces = MediaType.APPLICATION_JSON_VALUE)
		@ResponseBody
		public Map<String, Object>searchCurrencyRate(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
				
			paramMap.putAll((Map)new MapSession(session));
			return new JsonDataMap("ds_master", erpCodeServiceMapper.searchCurrencyRate(paramMap));	
	}
		
		
		@Transactional
		@RequestMapping(value = "/searchPlant" , produces = MediaType.APPLICATION_JSON_VALUE)
		@ResponseBody
		public Map<String, Object>searchPlant(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
				
			paramMap.putAll((Map)new MapSession(session));
			return new JsonDataMap("ds_master", erpCodeServiceMapper.searchPlant(paramMap));	
	}
		
		
		@Transactional
		@RequestMapping(value = "/searchProject" , produces = MediaType.APPLICATION_JSON_VALUE)
		@ResponseBody
		public Map<String, Object>searchProject(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
				
			paramMap.putAll((Map)new MapSession(session));
			return new JsonDataMap("ds_master", erpCodeServiceMapper.searchProject(paramMap));	
	}
		
		@Transactional
		@RequestMapping(value = "/searchCompany" , produces = MediaType.APPLICATION_JSON_VALUE)
		@ResponseBody
		public Map<String, Object>searchCompany(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
				
			paramMap.putAll((Map)new MapSession(session));
			return new JsonDataMap("ds_master", erpCodeServiceMapper.searchCompany(paramMap));	
		}
	
//	그리드 저장
	@Transactional
	@ResponseBody
	@RequestMapping(value = "/saveCompany", produces = MediaType.APPLICATION_JSON_VALUE)
	public Map<String, Object>  saveCompany(@RequestBody Map paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        
		paramMap.putAll(new MapSession(session));
		
     try {
		  if ( erpCodeServiceMapper.updateCompany(paramMap) == 1) {
                  return new JsonResultMsgMap(true);
          }else {
                 return new JsonResultMsgMap(false);
          }
	 }catch (MyDuplicateKeyException e)  {
	  	   e.printStackTrace();
	  	   return new JsonResultMsgMap(false, e.getMessage());
	    }catch (Exception e) {
			   e.printStackTrace();
			  throw new RuntimeException("Exception for rollback");
		}
	}	 // save
	
	@Transactional
	@ResponseBody
	@RequestMapping(value = "/insertCompany", produces = MediaType.APPLICATION_JSON_VALUE)
	public Map<String, Object>  insertCompany(@RequestBody Map paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
        
		paramMap.putAll(new MapSession(session));
		
     try {
		  if ( erpCodeServiceMapper.insertCompany(paramMap) == 1) {
                  return new JsonResultMsgMap(true);
          }else {
                 return new JsonResultMsgMap(false);
          }
	 }catch (MyDuplicateKeyException e)  {
	  	   e.printStackTrace();
	  	   return new JsonResultMsgMap(false, e.getMessage());
	    }catch (Exception e) {
			   e.printStackTrace();
			  throw new RuntimeException("Exception for rollback");
		}
	}	 // save
	
	
	
	@Transactional
	@RequestMapping(value = "/searchCompanyModal" , produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public Map<String, Object>searchCompanyModal(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
			
		paramMap.putAll((Map)new MapSession(session));
		return new JsonDataMap("ds_master", erpCodeServiceMapper.searchCompanyModal(paramMap));	
	}
	
	@Transactional
	@ResponseBody
	@RequestMapping(value = "/InsertCompanyModal", produces = MediaType.APPLICATION_JSON_VALUE)
	public Map<String, Object> InsertCompanyModal(@RequestBody Map paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
          
		  GridDataMultiSave gs = new GridDataMultiSave();
          GridDataMap gd = new GridDataMap(); 
          gs.addParamMap((Map)new MapSession(session));
          P.ln(paramMap.toString());
          try {
    		  if (
    			     gs.invokeMethod(erpCodeServiceMapper, gd.getUpdateMaps(paramMap), "InsertCompanyModal" ) 
    	           > 0) {
    	                  return new JsonResultMsgMap(true);
              }else{
    	                  return new JsonResultMsgMap(false);
    	      }  
          }catch (MyDuplicateKeyException e)  {
        	   e.printStackTrace();
        	   return new JsonResultMsgMap(false, e.getMessage());
          }catch (Exception e) {
			   e.printStackTrace();
			  throw new RuntimeException("Exception for rollback");
		  }	
   } // save
	
}
