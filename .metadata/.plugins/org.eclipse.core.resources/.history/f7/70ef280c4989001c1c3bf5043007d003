package com.ec.eframework.ex.config;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ec.eframework.config.AppProperty;
import com.ec.eframework.lib.GridDataMap;
import com.ec.eframework.mapper.basic.GridDataMultiSave;
import com.ec.eframework.lib.JsonDataMap;
import com.ec.eframework.lib.JsonResultMsgMap;
import com.ec.eframework.lib.MapSession;
import com.ec.eframework.mapper.ex.config.ExpConfigServiceMapper;

/**
 * 비용항목 config
 */
@Controller
@RequestMapping("ec/ex/config/expcard")
public class ExpCardController  {

	/**
	 * 계정관리 페이지 호출 
	 */
	@RequestMapping(value = "/page")
	public String page() {
	
	     return "contents/ex/config/expcard";
	}

	@Autowired
	private ExpConfigServiceMapper expConfigServiceMapper;
	@Autowired
	AppProperty appProperty;
	
	@RequestMapping(value = "/searchExpCard" , produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public Map<String, Object>  searchExpCard(@RequestBody Map<String, String> paramMap,HttpServletRequest request, HttpSession session) {
		
	    paramMap.putAll((Map)new MapSession(session));
	    paramMap.put("ENC_KEY", appProperty.getEncKey());
		return new JsonDataMap("ds_master",expConfigServiceMapper.searchExpCard(paramMap));	
	}	
	
	
//	그리드 저장
	@Transactional
	@ResponseBody
	@RequestMapping(value = "/saveExpCard", produces = MediaType.APPLICATION_JSON_VALUE)
	public Map<String, Object>  saveExp(@RequestBody Map paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
          GridDataMultiSave gs = new GridDataMultiSave();
          GridDataMap gd = new GridDataMap(); 
          gs.addParamMap((Map)new MapSession(session));
		
		  if (
		      gs.invokeMethod(expConfigServiceMapper, gd.getInsertMaps(paramMap), "insertExpCard" ) *
		      gs.invokeMethod(expConfigServiceMapper, gd.getUpdateMaps(paramMap), "updateExpCard" ) 
/*		      gs.invokeMethod(expConfigServiceMapper, gd.getDeleteMaps(paramMap), "deleteExpClosing" ) 
*/           > 0) {
                  return new JsonResultMsgMap(true);
                }
          
          else {
                 return new JsonResultMsgMap(false);
          }

   } // save
	
	
}
